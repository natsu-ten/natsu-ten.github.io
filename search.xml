<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>菜谱</title>
      <link href="2023/01/14/%E8%8F%9C%E8%B0%B1/"/>
      <url>2023/01/14/%E8%8F%9C%E8%B0%B1/</url>
      
        <content type="html"><![CDATA[<h2 id="菜谱"><a href="#菜谱" class="headerlink" title="菜谱"></a>菜谱</h2><h3 id="手撕包菜"><a href="#手撕包菜" class="headerlink" title="手撕包菜"></a>手撕包菜</h3><p>原料</p><ul><li>包菜</li><li>五花肉</li><li>葱姜蒜</li><li>干辣椒</li><li>料酒</li><li>香醋</li><li>少许豆瓣酱</li><li>蒸鱼豉油</li><li>糖</li><li>盐</li><li>鸡精</li></ul><p>操作</p><ul><li>包菜不用洗（如果要洗的话一定要空干水分），用刀被拍击包菜使其松软，然后撕成块状备用</li><li>清洗五花肉，用刀切成硬币左右厚的薄片</li><li>葱姜蒜 切成细末，按个人口味准备分量即可，然后准备几个干辣椒 切成段</li><li>热锅凉油，下锅炒五花肉 待肉变成白色 下葱姜蒜干辣椒 煸出香味。放入少许豆瓣酱。锅边悬入 料酒，炒出香味</li><li>放入包菜，全程开大火，待包菜炒至松软，放入 盐 鸡精 糖 翻炒几下，然后放入 蒸鱼豉油，超出香气，锅边悬入 香醋 即可出锅</li></ul><h3 id="西红柿炒鸡蛋"><a href="#西红柿炒鸡蛋" class="headerlink" title="西红柿炒鸡蛋"></a>西红柿炒鸡蛋</h3><p>原料</p><ul><li>西红柿</li><li>鸡蛋</li></ul>]]></content>
      
      
      <categories>
          
          <category> 菜谱 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 菜谱 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>openssl 自建证书</title>
      <link href="2022/07/06/openssl%20%E7%94%9F%E6%88%90%E8%AF%81%E4%B9%A6/"/>
      <url>2022/07/06/openssl%20%E7%94%9F%E6%88%90%E8%AF%81%E4%B9%A6/</url>
      
        <content type="html"><![CDATA[<h3 id="生成私钥"><a href="#生成私钥" class="headerlink" title="生成私钥"></a>生成私钥</h3><blockquote><p>genra 生成RSA私钥 <br><br>-des3 des3算法 <br><br>-out server.key 生成的私钥文件名 <br><br>2048 私钥长度 <br></p></blockquote> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 需要输入4位以上的密码</span><br>openssl genrsa -des3 -out server.pass.key 2048<br></code></pre></td></tr></table></figure><h3 id="去掉私钥密码"><a href="#去掉私钥密码" class="headerlink" title="去掉私钥密码"></a>去掉私钥密码</h3><blockquote><p>去掉私钥密码，不然重启nginx的时候 每次都要手动输入pem密码</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">openssl rsa -<span class="hljs-keyword">in</span> server.pass.key -out server.key<br></code></pre></td></tr></table></figure><h3 id="生成CSR文件（用于请求证书签名）"><a href="#生成CSR文件（用于请求证书签名）" class="headerlink" title="生成CSR文件（用于请求证书签名）"></a>生成CSR文件（用于请求证书签名）</h3><blockquote><p>req 生成证书签名请求 <br><br>-new 新生成 <br><br>-key 私钥文件 <br><br>-out 生成的CSR文件 <br><br>-subj 生成CSR证书的参数 <br></p></blockquote><blockquote><p>字段 字段含义 示例 <br><br>/C= Country 国家 CN <br><br>/ST= State or Province 省 Guangdong <br><br>/L= Location or City 城市 Guangzhou <br><br>/O= Organization 组织或企业 xdevops <br><br>/OU= Organization Unit 部门 xdevops <br><br>/CN= Common Name 域名或IP gitlab.xdevops.cn <br></p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">openssl req -new -key server.key -out server.csr -subj <span class="hljs-string">&quot;/C=CN/ST=Shanghai/L=Shanghai/O=xdevops/OU=xdevops/CN=域名.cn&quot;</span><br></code></pre></td></tr></table></figure><h3 id="生成自签名SSL证书"><a href="#生成自签名SSL证书" class="headerlink" title="生成自签名SSL证书"></a>生成自签名SSL证书</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># -days 证书有效期 一年</span><br>openssl x509 -req -days 365 -<span class="hljs-keyword">in</span> server.csr -signkey server.key -out server.crt<br></code></pre></td></tr></table></figure><blockquote><p>X.509证书包含三个文件：key，csr，crt。<br>key是服务器上的私钥文件，用于对发送给客户端数据的加密，以及对从客户端接收到数据的解密<br>csr是证书签名请求文件，用于提交给证书颁发机构（CA）对证书签名<br>crt是由证书颁发机构（CA）签名后的证书，或者是开发者自签名的证书，包含证书持有人的信息，持有人的公钥，以及签署者的签名等信息<br>备注：在密码学中，X.509是一个标准，规范了公开秘钥认证、证书吊销列表、授权凭证、凭证路径验证算法等。</p></blockquote><h3 id="生成以下5个文件"><a href="#生成以下5个文件" class="headerlink" title="生成以下5个文件"></a>生成以下5个文件</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">server.key  server.crt  server.csr  server.key<br></code></pre></td></tr></table></figure><h3 id="配置nginx"><a href="#配置nginx" class="headerlink" title="配置nginx"></a>配置nginx</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs bash">server &#123;<br>  listen 443 ssl;<br>  server_name rancher.eminhui.com;<br>  access_log /var/<span class="hljs-built_in">log</span>/nginx/rancher.eminhui.com.log;<br>  error_page 500 502 503 504 /50x.html;<br>  <span class="hljs-comment"># 证书</span><br>  ssl_certificate /etc/nginx/crt/minhui.crt;  <br>  ssl_certificate_key /etc/nginx/crt/minhui.key;<br><br>  location / &#123;<br>    proxy_pass https://192.168.10.163;<br>    proxy_set_header Host <span class="hljs-variable">$http_host</span>;<br> &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> openssl </category>
          
      </categories>
      
      
        <tags>
            
            <tag> openssl </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ecs云盘扩容</title>
      <link href="2022/03/15/%E9%98%BF%E9%87%8C%E4%BA%91ecs%E4%BA%91%E7%9B%98%E6%89%A9%E5%AE%B9/"/>
      <url>2022/03/15/%E9%98%BF%E9%87%8C%E4%BA%91ecs%E4%BA%91%E7%9B%98%E6%89%A9%E5%AE%B9/</url>
      
        <content type="html"><![CDATA[<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs bash"><br><span class="hljs-comment">#查看文件系统</span><br>lsb_release -a | awk <span class="hljs-string">&#x27;&#123;print $2&#125;&#x27;</span>| sed -n 3p<br><br><span class="hljs-comment">#CentOS</span><br>yum update<br>yum install cloud-utils-growpart<br>    <br><span class="hljs-comment">#Ubuntu</span><br>apt update<br>apt install -y cloud-guest-utils<br><br><br><span class="hljs-comment">#查看文件系统</span><br>blkid <br><br><span class="hljs-comment">#运行以下命令扩容分区。</span><br>growpart /dev/vda 3 (数字是要扩容器的分区)<br><br>---<br><span class="hljs-comment">#根据不同文件系统格式选择不同命令</span><br><span class="hljs-comment">#xfs</span><br>xfs_growfs /dev/vdc<br><span class="hljs-comment">#btrfs</span><br>btrfs filesystem resize max /dev/vdc<br><span class="hljs-comment">#ext</span><br>resize2fs /dev/vda1    <br><br></code></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> ecs </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 阿里云 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>linux性能优化-IO</title>
      <link href="2022/03/15/linux%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96-IO%E7%AF%87/"/>
      <url>2022/03/15/linux%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96-IO%E7%AF%87/</url>
      
        <content type="html"><![CDATA[<h3 id="磁盘性能指标"><a href="#磁盘性能指标" class="headerlink" title="磁盘性能指标"></a>磁盘性能指标</h3><ul><li>使用率 : 磁盘处理i/o的时间百分比</li><li>饱和率 : 磁盘处理 i/o 的繁忙百分比</li><li>iops : 每秒的i/o 请求数</li><li>吞吐率 : 每秒的 i/o 请求大小</li><li>响应时间 : i/o 请求发出到收到响应的间隔时间</li></ul>]]></content>
      
      
      <categories>
          
          <category> linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 性能优化 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>linux性能优化-内存</title>
      <link href="2022/03/15/linux%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96-%E5%86%85%E5%AD%98%E7%AF%87/"/>
      <url>2022/03/15/linux%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96-%E5%86%85%E5%AD%98%E7%AF%87/</url>
      
        <content type="html"><![CDATA[<h3 id="内存映射"><a href="#内存映射" class="headerlink" title="内存映射"></a>内存映射</h3><p>pc里面的内存条,称之为 物理内存, 系统里面每个进程启动的时候 内核会分配一个独有的连续的虚拟内存, 所以系统并不直接读取物理内存, 只有实际使用的虚拟内存才会给分配物理内存, 并且分配了物理内存之后通过内存映射来管理,<br>内存映射: 虚拟内存映射到物理内存,内核为内阁进程都维护了一张页表,记录虚拟内存和物理内存的映射地址,</p><p>  <img src="https://cdn.jsdelivr.net/gh/natsu-ten/images/img/%E5%86%85%E5%AD%98%E6%98%A0%E5%B0%84.png" alt="内存映射"></p><p>当进程访问的虚拟内存在页表中查不到的时候, 系统会产生一个<code>缺页异常</code>, 进入内核空间分配物理内存,更新进程页表,最后返回用户空间,恢复进程的运行.</p><h3 id=""><a href="#" class="headerlink" title=""></a></h3><h3 id="内存回收"><a href="#内存回收" class="headerlink" title="内存回收"></a>内存回收</h3><h3 id="内存使用情况"><a href="#内存使用情况" class="headerlink" title="内存使用情况"></a>内存使用情况</h3><p>top命令下的某参数说明</p><ul><li>VIRT: 进程虚拟内存的大小,只要是进程申请过的内存,即便还没有真正的分配物理内存,也会计算在内</li><li>RES: 常驻内存的大小,也就是进程实际使用过程中使用的物理内存的大小,但不包括 swap和共享内存</li><li>SHR: 是共享内存的大小,比如与其他进程共同使用的共享内存,加载的动态链接库以及程序的代码段等</li></ul><p>注意两点: </p><ul><li>一 : 虚拟内存通常并不会全部分配物理内存,从top命令可以看出,每个进程的虚拟内存都比常驻内存要大的多</li><li>二 : 共享内存SHR 并不一定是共享的. 比方说,程序的代码段 非共享的动态链接库,也都算在SHR里面,  </li></ul><h3 id="buffer-和-cache"><a href="#buffer-和-cache" class="headerlink" title="buffer 和 cache"></a>buffer 和 cache</h3><p>buffer: 缓冲区<br>cache: 缓存<br>对应文件: /proc/meminfo<br>磁盘数据: 直接读写分区的数据<br>文件数据: 通过文件系统读写的文件<br>buffer是对磁盘数据的缓存,cache是对文件数据的缓存, 他们既会用在读请求,也会用在写请求.</p><h3 id="回收内存的三种方式"><a href="#回收内存的三种方式" class="headerlink" title="回收内存的三种方式"></a>回收内存的三种方式</h3><ul><li>基于LRU算法, 回收缓存</li><li>基于swap机制,回收不常访问的匿名页</li><li>基于oom机制,杀掉占用大量内存的进程<br>前两种方法回收缓存和swap都基于 LRU算法,都是优先回收不常访问的内存,LRU 回收算法其实维护这两个双向链表,active(记录活跃的内存页)和inactive(记录非活跃的内存页),越接近链表尾部,表示内存页越不常访问,回收内存时 根据活跃程度 优先回收不会活跃的进程.<br>可以从 <code>/proc/meminfo</code> 中查看他们的大小  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># grep 表示只保留包含 active 的指标（忽略大小写）</span><br><span class="hljs-comment"># sort 表示按照字母顺序排序</span><br>$ cat /proc/meminfo | grep -i active | sort<br>Active(anon):     167976 kB<br>Active(file):     971488 kB<br>Active:          1139464 kB<br>Inactive(anon):      720 kB<br>Inactive(file):  2109536 kB<br>Inactive:        2110256 kB<br></code></pre></td></tr></table></figure>第三种 oom机制安装 oom_score给进程排序, oom_score越大 进程就越容易被系统杀死<br>当系统发现内存不够分配时,会尝试回收内存, 如果回收了文件页和匿名页后 内存够用了 ,然后把内存分配给进程使用就可以了,如果还是不够用 然后在使用 oom机制杀死占用内存量大的进程</li></ul><p>查看OOM日志 <code>/var/log/dmesg</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ dmesg | grep -i <span class="hljs-string">&quot;Out of memory&quot;</span><br>Out of memory: Kill process 9329 (java) score 321 or sacrifice child<br></code></pre></td></tr></table></figure><h3 id="衡量缓存使用的好坏指标"><a href="#衡量缓存使用的好坏指标" class="headerlink" title="衡量缓存使用的好坏指标?"></a>衡量缓存使用的好坏指标?</h3><p><code>缓存命中率</code></p><ul><li>cachestat : 提供了整个操作系统缓存的读写命中情况</li><li>cachetop : 提供了每个进程的缓存命中情况</li></ul><h3 id="内存泄漏如何处理"><a href="#内存泄漏如何处理" class="headerlink" title="内存泄漏如何处理"></a>内存泄漏如何处理</h3><blockquote><p>内存的分配和回收</p></blockquote><ul><li><p>一般在局部定义一个变量,比如 int data[64] 就定义了一个可以存储64字节的内存段, 由于是一个局部变量 所以他会在<code>内存空间的栈</code>中分配内存. <br/><br>栈内存  由系统自动分配和管理, 所以程序一旦超出 就会被系统自动回收, 就不会产生 内存泄漏的问题.<br/><br>但是很多时候我们不知道数据大小, 所以要用到标准函数库 malloc()_, 在程序中动态分配内存, 这时候 系统会从<code>内存空间的堆</code>中分配内存.<br>堆内存由应用程序自己分配和管理,除非程序自己退出, 不然这些堆内存不会被自动释放,所以就要用到应用程序明确调用库函数 free()来释放, 如果应用程序没有正确释放,那么就会造成内存泄漏.</p></li><li><p>内存泄漏危害非常大,如果忘记释放内存,不仅应用自己无法访问,系统也不能把他们的空间自此分配给其他应用, 最终内存耗尽,gg <br/><br> 但是系统最终可以通过 OOM(out of momeory) 机制杀死进程,但是进程在OOM之前 以及引发了一连串的反应,遭到严重影响,  </p></li></ul><h3 id="内存泄漏分析工具"><a href="#内存泄漏分析工具" class="headerlink" title="内存泄漏分析工具"></a>内存泄漏分析工具</h3><p><code>memleak</code> 是bbc软件包中的一个工具, 安装目录 <code>/usr/share/bcc/tools/memleak</code><br>分析容器中的应用常见问题: 调用栈不能正常显示,应为容器和外表隔离 所以参考 perf 方法中的案例, 如果单一二进制的应用程序 直接复制出来 运行 也可以</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># -a 显示每个内存分配请求的大小以及地址</span><br><span class="hljs-comment"># -p pid号</span><br>memleak -a -p $(pidof 进程)<br></code></pre></td></tr></table></figure><h3 id="为何很多程序比如-Hadoop-es-k8s-等要关闭swap"><a href="#为何很多程序比如-Hadoop-es-k8s-等要关闭swap" class="headerlink" title="为何很多程序比如 Hadoop es k8s 等要关闭swap"></a>为何很多程序比如 Hadoop es k8s 等要关闭swap</h3><p><code>大多数的java程序都建议关闭swap , 这是应为 jvm 在gc 的时候 需要遍历所有用到的堆内存, 如果这一部分堆内存被swap出去了, 那么遍历的时候就要磁盘IO 严重影响性能</code></p><h3 id="内存性能指标"><a href="#内存性能指标" class="headerlink" title="内存性能指标"></a>内存性能指标</h3><p><img src="https://cdn.jsdelivr.net/gh/natsu-ten/images/img/%E5%86%85%E5%AD%98%E6%80%A7%E8%83%BD%E6%8C%87%E6%A0%87.png" alt="内存性能指标"></p><h3 id="分析流程"><a href="#分析流程" class="headerlink" title="分析流程"></a>分析流程</h3><p><img src="https://cdn.jsdelivr.net/gh/natsu-ten/images/img/%E5%86%85%E5%AD%98%E5%88%86%E6%9E%90%E6%B5%81%E7%A8%8B.png" alt="内存分析流程"></p><h3 id="内存优化的几种思路"><a href="#内存优化的几种思路" class="headerlink" title="内存优化的几种思路"></a>内存优化的几种思路</h3><ul><li>最好禁止 swap 空间, 尤其是java程序,应为jvm在gc的时候会遍历进程的堆内存,如果这一部分内存被交换到swap 那么gc会进行io操作, 影响性能, 如果非要启用swap ,那么尽量减少 swappiness的值, 减少内存回收时swap的使用倾向</li><li>减少内存的动态分配,比如, 可以使用内存池,大页(huge page)等.</li><li>尽量使用缓存和缓冲来访问数据, 比如 可以使用堆栈明确声明内存空间,来存储需要缓存的数据, 或者使用redis这种第三方缓存组件, 优化数据的访问</li><li>使用cgroups等方式限制进程的内存使用情况,这样可以确保系统内存不会被异常进程消耗殆尽</li><li>通过 /proc/pid/oom_adj 调整核心应用的oom_score, 这样可以保值即使内存使用紧张, 核心应用进程也不会被oom杀死</li></ul>]]></content>
      
      
      <categories>
          
          <category> linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 性能优化 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ssh限制登录次数和超时自动退出</title>
      <link href="2022/03/15/ssh%E9%99%90%E5%88%B6%E7%99%BB%E5%BD%95%E6%AC%A1%E6%95%B0%E5%92%8C%E8%B6%85%E6%97%B6%E8%87%AA%E5%8A%A8%E9%80%80%E5%87%BA/"/>
      <url>2022/03/15/ssh%E9%99%90%E5%88%B6%E7%99%BB%E5%BD%95%E6%AC%A1%E6%95%B0%E5%92%8C%E8%B6%85%E6%97%B6%E8%87%AA%E5%8A%A8%E9%80%80%E5%87%BA/</url>
      
        <content type="html"><![CDATA[<h2 id="系统空闲等待时间-超时自动退出"><a href="#系统空闲等待时间-超时自动退出" class="headerlink" title="系统空闲等待时间(超时自动退出)"></a>系统空闲等待时间(超时自动退出)</h2><ul><li>修改 /etc/profile 文件 (/etc/profile 全局配置文件)<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">export</span> TMOUT=600   <span class="hljs-comment">#600秒无操作自动退出登录</span><br><span class="hljs-built_in">readonly</span> TMOUT<span class="hljs-comment"># 将值设置为readonly 防止用户更改，在shell中无法修改TMOUT</span><br></code></pre></td></tr></table></figure></li><li><code>source /etc/profile</code> 生效即可</li><li>取消此配置<ul><li>删掉参数 并且 <code>unset TMOUT</code> </li><li><code>source /etc/profile</code> 即可</li></ul></li></ul><h2 id="ssh限制登录次数"><a href="#ssh限制登录次数" class="headerlink" title="ssh限制登录次数"></a>ssh限制登录次数</h2><ul><li><p>使用 <code>pam_tally2</code> 模块实现登录限制</p><ul><li>验证 pam_tally2 模块是否存在<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">whereis pam_tally2<br></code></pre></td></tr></table></figure></li></ul></li><li><p>修改 <code>/etc/pam.d/sshd</code> 文件添加如下两行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">auth       requisite    pam_tally2.so  onerr=fail  deny=3 unlock_time=60 even_deny_root root_unlock_time=60<br><br>account     required    pam_tally2.so（加到postlogin之后，如下图）<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">#%PAM-1.0</span><br>auth       required     pam_sepermit.so<br>auth       substack     password-auth<br>auth       requisite    pam_tally2.so  onerr=fail  deny=3 unlock_time=60 even_deny_root root_unlock_time=60<br>auth       include      postlogin<br>account    required     pam_tally2.so<br><span class="hljs-comment"># Used with polkit to reauthorize users in remote sessions</span><br>-auth      optional     pam_reauthorize.so prepare<br>account    required     pam_nologin.so<br>account    include      password-auth<br>password   include      password-auth<br><span class="hljs-comment"># pam_selinux.so close should be the first session rule</span><br>session    required     pam_selinux.so close<br>session    required     pam_loginuid.so<br><span class="hljs-comment"># pam_selinux.so open should only be followed by sessions to be executed in the user context</span><br>session    required     pam_selinux.so open env_params<br>session    required     pam_namespace.so<br>session    optional     pam_keyinit.so force revoke<br>session    include      password-auth<br>session    include      postlogin<br><span class="hljs-comment"># Used with polkit to reauthorize users in remote sessions</span><br>-session   optional     pam_reauthorize.so prepare<br><br></code></pre></td></tr></table></figure><ul><li><code>even_deny_root</code> 限制root用户</li><li><code>root_unlook_time</code> root用户锁定时间 , 不锁定root 删除即可 配合even_deny_root参数</li><li><code>unlock_time=60</code> 普通用户锁定时间</li><li><code>onerr=fail</code> 连续错误</li><li><code>deny=3</code> 连续错误3次 </li><li>用户锁定期间, 无论输入正确和错误的密码 都视为密码错误,并以最后一次登录为锁定起始时间,如果用户解锁后输入密码的第一次仍为错误密码, 则再次锁定</li></ul></li></ul><ul><li><p>检查<code>/etc/ssh/sshd_config</code> 文件是否开启 pam 验证</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">UsePAM yes<br></code></pre></td></tr></table></figure></li><li><p>重启ssh服务</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">systemctl restart sshd <span class="hljs-comment">#centos7</span><br><br>service sshd restart <span class="hljs-comment">#centos6</span><br></code></pre></td></tr></table></figure></li><li><p>使用pam_tally2命令检查登录情况</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">pam_tally2 --user=root   <span class="hljs-comment"># 查看root用户登录失败情况</span><br><br>pam_tally2 --user=用户1 --reset   <span class="hljs-comment">#重置用户1 的登录失败次数为0</span><br></code></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      <categories>
          
          <category> linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ssh </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>k8s提问</title>
      <link href="2022/03/15/k8s%E5%87%A0%E4%B8%AA%E9%97%AE%E7%AD%94/"/>
      <url>2022/03/15/k8s%E5%87%A0%E4%B8%AA%E9%97%AE%E7%AD%94/</url>
      
        <content type="html"><![CDATA[<p>1: k8s的适应场景 ,和局限性,<br>  答: 应用场景:<br>        可以构造一个自动化运维平台, 降低成本 增加效率, (根据资源占用 自动伸缩服务,做到资源合理利用. 版本管理 自动迭代 怎加效率)<br>        对于微服务架构.soa架构来说 都比较合适,因为服务拆分的越多 就更难以管理.维护难度增大, 使用k8s 用容器方式部署, 自动编排 自动伸缩, 便于管理</p><p>2: k8s方便集中管理:  怎么方便管理<br>   答: 因为它本身就是一个自动化运维平台, 只需要设定ymal文件根据给的的参数, 比如cpu ,内存的阈值 就能根据值自动自动伸缩服务,服务宕机了 也会自动重启, 重新发布服务 也会保证服务可用性, 只需要做一个简单的ci , 就行了 </p><p>3: jenkins怎么做cicd详细说下<br>   答: 首先jenkins可以写pipline 或者 自由风格的项目, 配置代码仓库, 自定义构造变量, 然后写脚本一样自动打包 分发即可</p><p>4: 小规模为什么不适合<br>  答: 因为k8s本身的服务组件众多,相比来说比较占用资源. 如果只有十几个服务, 可能资源都没有k8s自身占用的资源多, 这时候使用anisble这种轻量级批量管理工具可能更适合</p><p>5: 只是微服务么, soa可不可以,<br>  答: 不管是面向服务架构还是微服务架构, 他们都会把服务拆分出来, 这样就比较容易做容器化 ,  k8s都可以让他们变得简单易于管理</p><p>6: 微服务架构为什么合适k8s<br>   答: 首先什么是微服务: 高内聚低耦合 服务拆分, 分布式 xxxxxx<br>       微服务架构设计模式:<br>        1: 负载均衡+API 网关<br>        2:<br>       然后 k8s 本身就是微服务架构</p><p>7: 你了解的微服务架构有哪些<br>    答: Spring Boot ,Spring Cloud ,Dubbo , </p>]]></content>
      
      
      <categories>
          
          <category> k8s </category>
          
      </categories>
      
      
        <tags>
            
            <tag> k8s </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>alpine 镜像 java 日志中文问号乱码</title>
      <link href="2022/03/15/alpine%20%E9%95%9C%E5%83%8F%E6%97%A5%E5%BF%97%E4%B8%AD%E6%96%87%E4%B9%B1%E7%A0%81%E9%97%AE%E9%A2%98/"/>
      <url>2022/03/15/alpine%20%E9%95%9C%E5%83%8F%E6%97%A5%E5%BF%97%E4%B8%AD%E6%96%87%E4%B9%B1%E7%A0%81%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<h2 id="使用alpine镜像时-在dockerfile中修改语言环境"><a href="#使用alpine镜像时-在dockerfile中修改语言环境" class="headerlink" title="使用alpine镜像时,在dockerfile中修改语言环境"></a>使用alpine镜像时,在dockerfile中修改语言环境</h2><ul><li><h3 id="dockerfile如下"><a href="#dockerfile如下" class="headerlink" title="dockerfile如下:"></a>dockerfile如下:</h3><pre><code><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs bash">FROM alpine:3.6<br><br><span class="hljs-comment"># Install language pack</span><br>RUN apk --no-cache add ca-certificates wget &amp;&amp; \<br>    wget -q -O /etc/apk/keys/sgerrand.rsa.pub https://alpine-pkgs.sgerrand.com/sgerrand.rsa.pub &amp;&amp; \<br>    wget https://github.com/sgerrand/alpine-pkg-glibc/releases/download/2.25-r0/glibc-2.25-r0.apk &amp;&amp; \<br>    wget https://github.com/sgerrand/alpine-pkg-glibc/releases/download/2.25-r0/glibc-bin-2.25-r0.apk &amp;&amp; \<br>    wget https://github.com/sgerrand/alpine-pkg-glibc/releases/download/2.25-r0/glibc-i18n-2.25-r0.apk &amp;&amp; \<br>    apk add glibc-bin-2.25-r0.apk glibc-i18n-2.25-r0.apk glibc-2.25-r0.apk<br><br>COPY ./locale.md /locale.md<br>RUN cat locale.md | xargs -i /usr/glibc-compat/bin/localedef -i &#123;&#125; -f UTF-8 &#123;&#125;.UTF-8<br><br>ENV LANG=en_US.UTF-8 \<br>    LANGUAGE=en_US.UTF-8<br><br></code></pre></td></tr></table></figure></code></pre></li><li><h3 id="同级目录下创建-locale-md-文件，将以下内容拷贝入-locale-md："><a href="#同级目录下创建-locale-md-文件，将以下内容拷贝入-locale-md：" class="headerlink" title="同级目录下创建 locale.md 文件，将以下内容拷贝入 locale.md："></a>同级目录下创建 locale.md 文件，将以下内容拷贝入 locale.md：</h3><pre><code><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br></pre></td><td class="code"><pre><code class="hljs bash">aa_DJ<br>aa_ER<br>aa_ET<br>af_ZA<br>am_ET<br>an_ES<br>ar_AE<br>ar_BH<br>ar_DZ<br>ar_EG<br>ar_IN<br>ar_IQ<br>ar_JO<br>ar_KW<br>ar_LB<br>ar_LY<br>ar_MA<br>ar_OM<br>ar_QA<br>ar_SA<br>ar_SD<br>ar_SY<br>ar_TN<br>ar_YE<br>as_IN<br>ast_ES<br>ayc_PE<br>az_AZ<br>be_BY<br>bem_ZM<br>ber_DZ<br>ber_MA<br>bg_BG<br>bho_IN<br>bn_BD<br>bn_IN<br>bo_CN<br>bo_IN<br>br_FR<br>brx_IN<br>bs_BA<br>byn_ER<br>ca_AD<br>ca_ES<br>ca_FR<br>ca_IT<br>crh_UA<br>csb_PL<br>cs_CZ<br>cv_RU<br>cy_GB<br>da_DK<br>de_AT<br>de_BE<br>de_CH<br>de_DE<br>de_LU<br>doi_IN<br>dv_MV<br>dz_BT<br>el_CY<br>el_GR<br>en_AG<br>en_AU<br>en_BW<br>en_CA<br>en_DK<br>en_GB<br>en_HK<br>en_IE<br>en_IN<br>en_NG<br>en_NZ<br>en_PH<br>en_SG<br>en_US<br>en_ZA<br>en_ZM<br>en_ZW<br>es_AR<br>es_BO<br>es_CL<br>es_CO<br>es_CR<br>es_CU<br>es_DO<br>es_EC<br>es_ES<br>es_GT<br>es_HN<br>es_MX<br>es_NI<br>es_PA<br>es_PE<br>es_PR<br>es_PY<br>es_SV<br>es_US<br>es_UY<br>es_VE<br>et_EE<br>eu_ES<br>fa_IR<br>ff_SN<br>fi_FI<br>fil_PH<br>fo_FO<br>fr_BE<br>fr_CA<br>fr_CH<br>fr_FR<br>fr_LU<br>fur_IT<br>fy_DE<br>fy_NL<br>ga_IE<br>gd_GB<br>gez_ER<br>gez_ET<br>gl_ES<br>gu_IN<br>gv_GB<br>ha_NG<br>he_IL<br>hi_IN<br>hne_IN<br>hr_HR<br>hsb_DE<br>ht_HT<br>hu_HU<br>hy_AM<br>ia_FR<br>id_ID<br>ig_NG<br>ik_CA<br>is_IS<br>it_CH<br>it_IT<br>iu_CA<br>ja_JP<br>ka_GE<br>kk_KZ<br>kl_GL<br>km_KH<br>kn_IN<br>kok_IN<br>ko_KR<br>ks_IN<br>ku_TR<br>kw_GB<br>ky_KG<br>lb_LU<br>lg_UG<br>li_BE<br>lij_IT<br>li_NL<br>lo_LA<br>lt_LT<br>lv_LV<br>mag_IN<br>mai_IN<br>mg_MG<br>mhr_RU<br>mi_NZ<br>mk_MK<br>ml_IN<br>mni_IN<br>mn_MN<br>mr_IN<br>ms_MY<br>mt_MT<br>my_MM<br>nb_NO<br>nds_DE<br>nds_NL<br>ne_NP<br>nhn_MX<br>niu_NU<br>niu_NZ<br>nl_AW<br>nl_BE<br>nl_NL<br>nn_NO<br>nr_ZA<br>nso_ZA<br>oc_FR<br>om_ET<br>om_KE<br>or_IN<br>os_RU<br>pa_IN<br>pa_PK<br>pl_PL<br>ps_AF<br>pt_BR<br>pt_PT<br>ro_RO<br>ru_RU<br>ru_UA<br>rw_RW<br>sa_IN<br>sat_IN<br>sc_IT<br>sd_IN<br>se_NO<br>shs_CA<br>sid_ET<br>si_LK<br>sk_SK<br>sl_SI<br>so_DJ<br>so_ET<br>so_KE<br>so_SO<br>sq_AL<br>sq_MK<br>sr_ME<br>sr_RS<br>ss_ZA<br>st_ZA<br>sv_FI<br>sv_SE<br>sw_KE<br>sw_TZ<br>szl_PL<br>ta_IN<br>ta_LK<br>te_IN<br>tg_TJ<br>th_TH<br>ti_ER<br>ti_ET<br>tig_ER<br>tk_TM<br>tl_PH<br>tn_ZA<br>tr_CY<br>tr_TR<br>ts_ZA<br>tt_RU<br>ug_CN<br>uk_UA<br>unm_US<br>ur_IN<br>ur_PK<br>uz_UZ<br>ve_ZA<br>vi_VN<br>wa_BE<br>wae_CH<br>wal_ET<br>wo_SN<br>xh_ZA<br>yi_US<br>yo_NG<br>yue_HK<br>zh_CN<br>zh_HK<br>zh_SG<br>zh_TW<br>zu_ZA<br></code></pre></td></tr></table></figure></code></pre></li><li><h3 id="构建环境"><a href="#构建环境" class="headerlink" title="构建环境"></a>构建环境</h3><pre><code><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker build -t utf8-alpine .<br></code></pre></td></tr></table></figure></code></pre></li><li><h3 id="运行构建的镜像，查看编码环境"><a href="#运行构建的镜像，查看编码环境" class="headerlink" title="运行构建的镜像，查看编码环境"></a>运行构建的镜像，查看编码环境</h3><pre><code><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># docker run -it --rm utf8-alpine sh</span><br><span class="hljs-comment"># env #查看环境变量</span><br><span class="hljs-comment"># /usr/glibc-compat/bin/locale -a</span><br></code></pre></td></tr></table></figure></code></pre></li></ul>]]></content>
      
      
      <categories>
          
          <category> alpine </category>
          
      </categories>
      
      
        <tags>
            
            <tag> alpine </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>计算机网络的89个概念</title>
      <link href="2022/03/15/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E7%9A%8489%E4%B8%AA%E6%A6%82%E5%BF%B5/"/>
      <url>2022/03/15/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E7%9A%8489%E4%B8%AA%E6%A6%82%E5%BF%B5/</url>
      
        <content type="html"><![CDATA[<h3 id="文章转载-程序员cxuan-的公众号"><a href="#文章转载-程序员cxuan-的公众号" class="headerlink" title="文章转载 程序员cxuan 的公众号"></a>文章转载 程序员cxuan 的公众号</h3><ol><li><p><code>主机</code> : 计算机网络上任何一种能够链接网络的终端</p></li><li><p><code>通信链路</code> : 通信链路是由物理链路(同轴电缆,双绞线,光纤等),链接到一起组成的物理通路</p></li><li><p><code>传输速率</code> : 用来度量一个端系统到另一个端系统的通信传输速度</p></li><li><p><code>分组</code> : 当一台端系统向另一台端系统发送数据时,通常会将数据进行分组,然后为每段加上首部字节,从而形成计算机网络的专业术语: 分组, 这些分组通过网络发送到端 然后进行数据处理</p></li><li><p><code>路由器</code> : 相当于带有路由功能的交换机,主要用来转发数据</p></li><li><p><code>路径</code> : 一个分组所经历一系列通信链路和分组交换机称为通过这个网络的路径</p></li><li><p><code>因特网服务商</code> : 也叫ISP 也就是网络运营商</p></li><li><p><code>网络协议</code> : 计算机网络中进行数据交互而设定的规则和约束</p></li><li><p><code>IP</code> : 网际协议, 规定了 路由器 到 端系统 之间发送和接受的分组格式</p></li><li><p><code>TCP/IP协议簇</code> : 不仅仅只有TCP IP 协议 ,而是以 TCP IP 为主的一系列协议, 比如 ICMP(png) ARP UDP DNS SMTP等</p></li><li><p><code>分布式应用程序</code> : 多个端系统之间交互数据的系统 </p></li><li><p><code>套接字接口</code> : 也就是 sockte 接口, 这个接口规定了端系统之间通过因特网进行数据交互的方式 </p></li><li><p><code>协议</code> : 规定了两个通信实体 之间交互报文的格式和顺序所遵从的标准</p></li><li><p><code>客户端</code> : 一般是请求方 </p></li><li><p><code>服务器</code> : 服务端 提供服务的端, 供请求方使用</p></li><li><p><code>转发表</code> : 路由内部记录报文路径的映射关系的一种记录</p></li><li><p><code>时延</code> : 一个报文或者分组 从一个端传递到另一端所需要的时间, 时延分类有: 发送时延,传播时延,处理时延,排队时延, 总时延=发送时延+传播时延+处理时延+排队时延</p></li><li><p><code>丢包</code> : 指在网络中 分组的丢失现象</p></li><li><p><code>吞吐量</code> : 在计算机网络中 单位时间内 成功传输数据的数量</p></li><li><p><code>报文</code> : 应用层的分组</p></li><li><p><code>报文段</code> : 通常把运输层的分组称为报文段</p></li><li><p><code>数据报</code> : 通常把网络层的分组称为数据报</p></li><li><p><code>帧</code> : 一般把链路层的分组称为帧</p></li><li><p><code>CIDR</code> : 把几个标准网络合成一个大的网络,</p></li><li><p><code>p2p</code> : 对等体系结构,相当于自由服务器 大家都是客户机 每个客户既能发送请求也能做出响应</p></li><li><p><code>IP地址</code> : ip地址就是网际协地址,在互联网中唯一一个标识主机的一种地址,每一台入网的设备都会有一个ip地址,</p></li><li><p><code>端口号</code>: 用来标识不同程序不同应用的进程</p></li><li><p><code>URL</code> : 网址</p></li><li><p><code>URI</code> : 统一资源标识符,能够唯一的标记互联网上的资源,</p></li><li><p><code>HTML</code> : 超文本标记语言 </p></li><li><p><code>web页面</code> : 通俗理解 浏览器里面打开的页面 </p></li><li><p><code>web服务器</code> : 提供web服务的服务器 </p></li><li><p><code>cdn</code> : 内容分发网络, 利用http的缓存和代理技术, 代替源站响应客户端的请求,依靠部署在各地的边缘服务器, 通过中心平台的负载均衡,内容分发 调度等模块功能 是用户就近获取所需要的内容</p></li><li><p><code>WAF</code> : 应用程序防护系统, 通过执行一系列对 http https 的安全策略 来专门为web应用提供保护的产品</p></li><li><p><code>webservice</code> : web应用程序, 是一种跨编程语言和跨操作系统平台的远程调用技术</p></li><li><p><code>HTTP</code> : tcpip协议的一种</p></li><li><p><code>session</code> : 客户的的会话缓存</p></li><li><p><code>cookie</code> : 保存在浏览器的用户数据</p></li><li><p><code>smtp协议</code> : 提供邮件服务的协议</p></li><li><p><code>dns协议</code> : </p></li><li><p><code>telnet协议</code> : 远程登录协议,运行用户通过一个协商过程来与一个远程设备进行通信</p></li><li><p><code>ssh协议</code> : 建立在应用层的安全加密协议,</p></li><li><p><code>ftp协议</code> : 文件传输协议</p></li><li><p><code>MIME类型</code> : 表示互联网的资源类型, .html .mp4 .mp3  </p></li><li><p><code>多路分解</code> : 在接收端,运输层会检查源端口号和目的端口号等字段,然后标识出接收的套接字,从而将运输层报文段的数据交付到正确套接字的过程被称为多路分解</p></li><li><p><code>多路复用</code> : 在发送方,从不同的套接字中收集数据块,然后为数据块封装上首部信息 从而生成报文段 然后将报文段传递给网络层的过程被称之为多路复用</p></li><li><p><code>周知端口号</code> : 在主机中 0-1023的端口号是受限制的,被称之为周知端口号,这些端口一般不能占用</p></li><li><p><code>单向数据传输</code> : 数据的流向只是单向的</p></li><li><p><code>双向数据传输</code> : 数据双向传输 也叫全双工 发送端和接收端相互发送数据</p></li><li><p><code>面向链接的</code> : 面向链接指的是应用进程在向另一个应用进程发送数据前 需要先进行握手,即他们必须先相互发送预备报文段,用来建立确保数据传输的参数</p></li><li><p><code>三次握手</code> : <img src="https://mmbiz.qpic.cn/mmbiz_png/A3ibcic1Xe0iaSJ18w9BYZq1IWkMEGoNiaY8uhE7FS3VNFO89BQRfVicFCnHynpabACU4ohPZiaiaSNicAQxjeo6pM5pibw/640?wx_fmt=png&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1"></p></li><li><p><code>最大报文段长度</code> : MSS 指z从缓存中取出并放入报文段中的最大值</p></li><li><p><code>最大传输单元</code> : MTU  指通信双方能够接受有效负荷的大小,即 mss 通常会根据mtu来设</p></li><li><p><code>冗余ACK</code> : 就是再次确认某报文段的ACK 报文段的丢失会导致冗余ACK的出现</p></li><li><p><code>四次挥手</code> : <img src="https://mmbiz.qpic.cn/mmbiz_png/A3ibcic1Xe0iaSJ18w9BYZq1IWkMEGoNiaY8mRnzXHWQGnMaUyRhfnR3rziboQcDf6ybnceLpjuI3mTUpaxmznsSF0g/640?wx_fmt=png&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1"></p></li><li><p><code>路由选择算法</code> : 网络层中决定分组发送路径的一种算法</p></li><li><p><code>转发</code> : 将分组从一个输入链路转移到合适的输出链路的动作</p></li><li><p><code>分组调度</code> : 分组调度讨论的是分组如何经输出链路传输的问题, 主要有三种调度方式 : 先进先出,优先级排队,循环和加权公平排队</p></li><li><p><code>接口</code> : 主机和物理链路之间的边界</p></li><li><p><code>ARP协议</code> : ARP 是一种解决地址问题的协议,通过ip位线索 可以定位下一个用来接受数据的网络设备的mac地址, 如果目标主机与主机不在同一个链路上时,可以通过ARP查找下一个跳路由的地址,适用于ipv4 不适用ipv6</p></li><li><p><code>RAPP</code> : ARP 协议反过来,通过mac地址定位 ip地址的一种协议<br><img src="https://mmbiz.qpic.cn/mmbiz_png/A3ibcic1Xe0iaSJ18w9BYZq1IWkMEGoNiaY8fVzLNBPXFzCMDjvvBxEBxPeW7UOsOpp4kaq0KzF2PVRwnGogkUzJqg/640?wx_fmt=png&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1"></p></li><li><p><code>代理ARP</code> : 用户解决 ARP 包被路由隔离的情况, 通过代理ARP可以实现将ARP请求转发给临近的网段</p></li><li><p><code>ICMP协议</code> : 报文控制协议, 如果ip在通信过程中由于某个ip包某个原因未能到达目标主机,那么将发送icmp消息<br><img src="https://mmbiz.qpic.cn/mmbiz_png/A3ibcic1Xe0iaSJ18w9BYZq1IWkMEGoNiaY8OdU5jKbhQr2qzknLAGunKx9lVlHxdcZOBGX7h4KdXtozTI4X9GCFaA/640?wx_fmt=png&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1"></p></li><li><p><code>NAT协议</code>: 网络地址转换协议,将所有本地地址的主机在接入网络时,都会要在NAT路由器上将其转换称为全球ip地址 才能和其他主机进行通信</p></li><li><p><code>ip隧道</code> : ip隧道技术是由路由器把网络层协议封装到另一个协议中从而跨国网络传输到另一个路由器的过程</p></li><li><p><code>单播</code> : 一对一 <img src="https://mmbiz.qpic.cn/mmbiz_png/A3ibcic1Xe0iaSJ18w9BYZq1IWkMEGoNiaY8oAp0GiaD3oT0GqJhia23Coop8rgM4xGHeGDcpia7uG8V93bqltRNNqiafw/640?wx_fmt=png&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1"></p></li><li><p><code>广播</code> : 一对多 <img src="https://mmbiz.qpic.cn/mmbiz_png/A3ibcic1Xe0iaSJ18w9BYZq1IWkMEGoNiaY82psT8qQ2ficggzoVqUtWJfJA65fjr2RpNaugrA5qos9Q0ria4rvfRMtw/640?wx_fmt=png&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1"></p></li><li><p><code>多播</code> : 于广播类似,也是将消息发送给多个主机,不同之处在于多播要限定在某一组主机作为接收端 <img src="https://mmbiz.qpic.cn/mmbiz_png/A3ibcic1Xe0iaSJ18w9BYZq1IWkMEGoNiaY82EuVM7pOzYQDffeickicjdmnfXE4nKJPfVgoJ9iawmvibHnKvAYA3CtnPw/640?wx_fmt=png&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1"></p></li><li><p><code>IGP</code> : 内部网关协议,一般用于企业内部自己搭建的路由自治系统</p></li><li><p><code>EGP</code> : 外部网关协议,EGP通常用于在网络主机之间相互交互路由信息</p></li><li><p><code>RIP</code> : 一种距离向量型路由协议 广泛应用于 lan网</p></li><li><p><code>OSPF</code> : </p></li><li><p><code>MPLS</code> : </p></li></ol>]]></content>
      
      
      <categories>
          
          <category> 网络基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 网络基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>shell 脚本100 例</title>
      <link href="2022/03/15/shell%E8%84%9A%E6%9C%AC100%E4%BE%8B/"/>
      <url>2022/03/15/shell%E8%84%9A%E6%9C%AC100%E4%BE%8B/</url>
      
        <content type="html"><![CDATA[<h3 id="1-编写一个hello-work-脚本"><a href="#1-编写一个hello-work-脚本" class="headerlink" title="1: 编写一个hello work 脚本"></a>1: 编写一个hello work 脚本</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-meta">#! /bin/bash</span><br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;hello word&quot;</span><br></code></pre></td></tr></table></figure><h3 id="2-通过位置变量创建linux系统账户及密码"><a href="#2-通过位置变量创建linux系统账户及密码" class="headerlink" title="2: 通过位置变量创建linux系统账户及密码"></a>2: 通过位置变量创建linux系统账户及密码</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-meta">#!/bin/bash</span><br>useradd <span class="hljs-variable">$1</span> -c <span class="hljs-string">&quot;测试用户&quot;</span> -G root -s /usr/sbin/nologin<br><span class="hljs-built_in">echo</span> <span class="hljs-variable">$2</span> | passwd <span class="hljs-variable">$1</span> --stdin<br></code></pre></td></tr></table></figure><h3 id="3-每周5使用tar命令备份-var-log下的所有日志文件"><a href="#3-每周5使用tar命令备份-var-log下的所有日志文件" class="headerlink" title="3: 每周5使用tar命令备份/var/log下的所有日志文件"></a>3: 每周5使用tar命令备份/var/log下的所有日志文件</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-meta">#!/bin/bash</span><br><span class="hljs-comment"># 备份的文件尽量用目前的日期命名</span><br><span class="hljs-comment"># P 因为tar 默认允许是相对路径， 如果路径写的是绝对路径 要加大写 P，要放在f前面 </span><br>tar zcPf /tmp/<span class="hljs-built_in">log</span>-`date +%F-%H-%M`.tar.gz /var/<span class="hljs-built_in">log</span>/*.<span class="hljs-built_in">log</span><br><br>---<br><br><span class="hljs-comment"># crontab -e</span><br>00 03 * * 5 /bin/bash /tmp/备份.sh<br></code></pre></td></tr></table></figure><h3 id="4-一键部署LNMP-rpm包版本"><a href="#4-一键部署LNMP-rpm包版本" class="headerlink" title="4: 一键部署LNMP (rpm包版本)"></a>4: 一键部署LNMP (rpm包版本)</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-meta">#!/bin/bash</span><br><span class="hljs-comment">#配置yum源，安装epel源</span><br>yum install epel-release<br>yum makecache <br>yum install nginx<br>yum install mysql<br>yum install php php-mysql<br>systemctl start nginx mysql<br>systemctl <span class="hljs-built_in">enable</span> nginx mysql<br></code></pre></td></tr></table></figure><h3 id="5-实时监控本机内存和硬盘剩余空间，剩余内存小于500M-根空间剩余小于1000M-时发送报警邮件给root管理员"><a href="#5-实时监控本机内存和硬盘剩余空间，剩余内存小于500M-根空间剩余小于1000M-时发送报警邮件给root管理员" class="headerlink" title="5: 实时监控本机内存和硬盘剩余空间，剩余内存小于500M ,根空间剩余小于1000M 时发送报警邮件给root管理员"></a>5: 实时监控本机内存和硬盘剩余空间，剩余内存小于500M ,根空间剩余小于1000M 时发送报警邮件给root管理员</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-meta">#!/bin/bash</span><br><span class="hljs-comment">#if语句中 -a &quot;and 且&quot;  |  -o &quot;or 或者&quot;</span><br><span class="hljs-comment"># awk // 正则</span><br>memu=400<br>diskmu=4000<br>mem=$(free -m | awk <span class="hljs-string">&#x27;/Mem/&#123;print $4&#125;&#x27;</span>)<br>disk=$(df -m / | awk <span class="hljs-string">&#x27;/\//&#123;print $4&#125;&#x27;</span>)<br><span class="hljs-keyword">if</span> [ <span class="hljs-variable">$mem</span> -lt <span class="hljs-variable">$memu</span> -a <span class="hljs-variable">$disk</span> -lt <span class="hljs-variable">$diskmu</span> ];<span class="hljs-keyword">then</span><br>    <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;资源不够用&quot;</span> | mail root -s <br>  <span class="hljs-keyword">elif</span> [ <span class="hljs-variable">$mem</span> -lt <span class="hljs-variable">$memu</span> ];<span class="hljs-keyword">then</span><br>    <span class="hljs-built_in">echo</span>  <span class="hljs-string">&quot;内存小于<span class="hljs-variable">$memu</span>&quot;</span> | mail root -s<br>  <span class="hljs-keyword">elif</span> [ <span class="hljs-variable">$disk</span> -lt <span class="hljs-variable">$diskmu</span> ];<span class="hljs-keyword">then</span><br>    <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;磁盘小于<span class="hljs-variable">$diskmu</span>&quot;</span> | mail root -s<br><span class="hljs-keyword">fi</span><br><br></code></pre></td></tr></table></figure><h3 id="6-脚本生成一个100以内的随机数，提示用户猜数字，根据用户的输入，提示用户猜对了或者猜小了-猜大了-直至用户结束脚本"><a href="#6-脚本生成一个100以内的随机数，提示用户猜数字，根据用户的输入，提示用户猜对了或者猜小了-猜大了-直至用户结束脚本" class="headerlink" title="6: 脚本生成一个100以内的随机数，提示用户猜数字，根据用户的输入，提示用户猜对了或者猜小了 猜大了 直至用户结束脚本"></a>6: 脚本生成一个100以内的随机数，提示用户猜数字，根据用户的输入，提示用户猜对了或者猜小了 猜大了 直至用户结束脚本</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs bash"><br><span class="hljs-meta">#!/bin/bash</span><br><span class="hljs-comment"># $RANDOM 随即范围 0-32767 ， 使用取余算法将随机数变为1-100的随机数 $[$RNADOM%100+1]</span><br><span class="hljs-comment"># echo 换行打印 参数 -e</span><br><span class="hljs-comment"># grep 匹配静默输出参数 -q</span><br><span class="hljs-comment"># 判断输入的类型是否是数字 使用grep 正则去判断 如果匹配到数字则返回0 匹配不到数字则返回1</span><br>yes=$[<span class="hljs-variable">$RANDOM</span>%10]<br><span class="hljs-built_in">echo</span> -e <span class="hljs-string">&quot;这是一个猜数字游戏 \n输入你要猜的数字进行&quot;</span><br><br><span class="hljs-keyword">while</span> <span class="hljs-literal">true</span>;<span class="hljs-keyword">do</span><br>    <span class="hljs-built_in">read</span> -p <span class="hljs-string">&quot;请输入你要猜的数字：&quot;</span> num<br>        <span class="hljs-keyword">if</span> grep -q <span class="hljs-string">&#x27;^[[:digit:]]*$&#x27;</span> &lt;&lt;&lt; <span class="hljs-string">&quot;<span class="hljs-variable">$num</span>&quot;</span> ;<span class="hljs-keyword">then</span><br>            <span class="hljs-keyword">if</span> [ <span class="hljs-variable">$num</span> -lt <span class="hljs-variable">$yes</span> ];<span class="hljs-keyword">then</span><br>                <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;数字小于正确答案&quot;</span><br>            <span class="hljs-keyword">elif</span> [ <span class="hljs-variable">$num</span> -gt <span class="hljs-variable">$yes</span> ];<span class="hljs-keyword">then</span><br>                <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;数字大于正确答案&quot;</span><br>            <span class="hljs-keyword">elif</span> [ <span class="hljs-variable">$num</span> -eq <span class="hljs-variable">$yes</span> ];<span class="hljs-keyword">then</span><br>                <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;恭喜你才对了&quot;</span><br>                <span class="hljs-built_in">exit</span><br>            <span class="hljs-keyword">else</span><br>                <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;请输入真确的数字&quot;</span><br>            <span class="hljs-keyword">fi</span><br>        <span class="hljs-keyword">else</span><br>            <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;请输入数字&quot;</span><br>        <span class="hljs-keyword">fi</span><br><span class="hljs-keyword">done</span><br><br></code></pre></td></tr></table></figure><h3 id="7-检测本机当前用户是否为超级管理员，如果是管理员，-则使用yum安装vsftp-，如果不是，则提示您非管理员（使用字符串对比版本）"><a href="#7-检测本机当前用户是否为超级管理员，如果是管理员，-则使用yum安装vsftp-，如果不是，则提示您非管理员（使用字符串对比版本）" class="headerlink" title="7: 检测本机当前用户是否为超级管理员，如果是管理员， 则使用yum安装vsftp ，如果不是，则提示您非管理员（使用字符串对比版本）"></a>7: 检测本机当前用户是否为超级管理员，如果是管理员， 则使用yum安装vsftp ，如果不是，则提示您非管理员（使用字符串对比版本）</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-meta">#!/bin/bash</span><br><br><span class="hljs-keyword">if</span> [[ <span class="hljs-variable">$USER</span> == <span class="hljs-string">&quot;root&quot;</span> ]];<span class="hljs-keyword">then</span><br>    yum install vsftp -y<br>  <span class="hljs-keyword">else</span><br>    <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;请用管理员账号操作&quot;</span><br>  <span class="hljs-keyword">fi</span><br><br>---<br><br><span class="hljs-meta">#!/bin/bash</span><br><br><span class="hljs-keyword">if</span> [[ <span class="hljs-variable">$UID</span> == 0 ]];<span class="hljs-keyword">then</span><br>    yum install vsftp -y<br>  <span class="hljs-keyword">else</span><br>    <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;请用管理员账号操作&quot;</span><br>  <span class="hljs-keyword">fi</span><br><br></code></pre></td></tr></table></figure><h3 id="8-编写脚本：-提示用户输入用户名和密码，脚本自动创建相应的账户和配置密码，如果用户不输入账户名，则提示必须输入账户名并退出脚本，如果用户不输入密码，则统一使用默认的123456-作为默认密码"><a href="#8-编写脚本：-提示用户输入用户名和密码，脚本自动创建相应的账户和配置密码，如果用户不输入账户名，则提示必须输入账户名并退出脚本，如果用户不输入密码，则统一使用默认的123456-作为默认密码" class="headerlink" title="8: 编写脚本： 提示用户输入用户名和密码，脚本自动创建相应的账户和配置密码，如果用户不输入账户名，则提示必须输入账户名并退出脚本，如果用户不输入密码，则统一使用默认的123456 作为默认密码"></a>8: 编写脚本： 提示用户输入用户名和密码，脚本自动创建相应的账户和配置密码，如果用户不输入账户名，则提示必须输入账户名并退出脚本，如果用户不输入密码，则统一使用默认的123456 作为默认密码</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-meta">#!/bin/bash</span><br><span class="hljs-comment">#if -n 不为空。-z 为空</span><br><span class="hljs-built_in">read</span> -p <span class="hljs-string">&quot;输入要创建的用户名：&quot;</span> user<br><br><span class="hljs-comment">#[ ! $user] &amp;&amp; useradd $user || echo &quot;请输入用户名&quot; exit 2</span><br><br><span class="hljs-keyword">if</span> [ -n <span class="hljs-string">&quot;<span class="hljs-variable">$user</span>&quot;</span> ];<span class="hljs-keyword">then</span><br>    useradd <span class="hljs-variable">$user</span><br>    <span class="hljs-built_in">read</span> -p <span class="hljs-string">&quot;输入密码：&quot;</span> password<br>    password=<span class="hljs-variable">$&#123;password:-123456&#125;</span><br>    <span class="hljs-built_in">echo</span> <span class="hljs-variable">$password</span> | passwd <span class="hljs-variable">$user</span> --stdin<br><span class="hljs-keyword">else</span><br>    <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;必须输入用户名&quot;</span><br>    <span class="hljs-built_in">exit</span> 2<br><span class="hljs-keyword">fi</span><br><br></code></pre></td></tr></table></figure><h3 id="9-依次提示用户输入3个整数，脚本根据数字大小依次排序输出3个数字"><a href="#9-依次提示用户输入3个整数，脚本根据数字大小依次排序输出3个数字" class="headerlink" title="9: 依次提示用户输入3个整数，脚本根据数字大小依次排序输出3个数字"></a>9: 依次提示用户输入3个整数，脚本根据数字大小依次排序输出3个数字</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-meta">#!/bin/bash</span><br><br><span class="hljs-comment">#eval命令： 执行时会先扫描命令一遍 进行命令替换，然后在执行命令，用于那些使用一次扫描无法实现其功能的变量。</span><br><br><span class="hljs-built_in">read</span> -p <span class="hljs-string">&quot;输入多一个数字：&quot;</span> num1<br><span class="hljs-built_in">read</span> -p <span class="hljs-string">&quot;输入第二个数字：&quot;</span> num2<br><span class="hljs-built_in">read</span> -p <span class="hljs-string">&quot;输入第三个数字：&quot;</span> num3<br><br><span class="hljs-keyword">if</span> [ <span class="hljs-variable">$num1</span> -gt <span class="hljs-variable">$num2</span> ];<span class="hljs-keyword">then</span><br>    tmp=<span class="hljs-variable">$num1</span><br>    num1=<span class="hljs-variable">$num2</span><br>    num2=<span class="hljs-variable">$tmp</span><br><span class="hljs-keyword">fi</span><br><br><span class="hljs-keyword">if</span> [ <span class="hljs-variable">$num1</span> -gt <span class="hljs-variable">$num3</span> ];<span class="hljs-keyword">then</span><br>    tmp=<span class="hljs-variable">$num1</span><br>    num1=<span class="hljs-variable">$num3</span><br>    num3=<span class="hljs-variable">$tmp</span><br><span class="hljs-keyword">fi</span><br><br><span class="hljs-keyword">fi</span> [ <span class="hljs-variable">$num2</span> -gt <span class="hljs-variable">$num3</span> ];<span class="hljs-keyword">then</span><br>    tmp=<span class="hljs-variable">$num2</span><br>    num2=<span class="hljs-variable">$num3</span><br>    num3=tmp<br><span class="hljs-keyword">fi</span><br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;数字大小依次为：<span class="hljs-variable">$num1</span> - <span class="hljs-variable">$num2</span> - <span class="hljs-variable">$num3</span>&quot;</span> <br></code></pre></td></tr></table></figure><h3 id="10-编写脚本，实现人机-剪刀石头布游戏"><a href="#10-编写脚本，实现人机-剪刀石头布游戏" class="headerlink" title="10: 编写脚本，实现人机 剪刀石头布游戏"></a>10: 编写脚本，实现人机 剪刀石头布游戏</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-meta">#!/bin/bash</span><br><span class="hljs-comment">#case形式</span><br>num=$[<span class="hljs-variable">$RANDOM</span>%3+1]<br><br><span class="hljs-built_in">echo</span> -e <span class="hljs-string">&quot;1.石头 \n2.剪刀 \n3.布&quot;</span><br><br><span class="hljs-built_in">read</span> -p <span class="hljs-string">&quot;输入1-3：&quot;</span> user<br><span class="hljs-keyword">case</span> <span class="hljs-variable">$user</span> <span class="hljs-keyword">in</span><br>1)<br>  <span class="hljs-keyword">if</span> [ <span class="hljs-variable">$num</span> -eq 1 ];<span class="hljs-keyword">then</span><br>      <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;平局&quot;</span><br>    <span class="hljs-keyword">elif</span> [ <span class="hljs-variable">$num</span> -eq 2 ];<span class="hljs-keyword">then</span> <br>      <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;你赢了&quot;</span><br>    <span class="hljs-keyword">else</span><br>      <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;你输了&quot;</span><br>  <span class="hljs-keyword">fi</span>;;<br>2)<br>  <span class="hljs-keyword">if</span> [ <span class="hljs-variable">$num</span> -eq 2 ];<span class="hljs-keyword">then</span><br>      <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;平局&quot;</span><br>    <span class="hljs-keyword">elif</span> [ <span class="hljs-variable">$num</span> -eq 3 ];<span class="hljs-keyword">then</span> <br>      <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;你赢了&quot;</span><br>    <span class="hljs-keyword">else</span><br>      <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;你输了&quot;</span><br>  <span class="hljs-keyword">fi</span>;;<br>3)<br><br>  <span class="hljs-keyword">if</span> [ <span class="hljs-variable">$num</span> -eq 3 ];<span class="hljs-keyword">then</span><br>      <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;平局&quot;</span><br>    <span class="hljs-keyword">elif</span> [ <span class="hljs-variable">$num</span> -eq 1 ];<span class="hljs-keyword">then</span> <br>      <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;你赢了&quot;</span><br>    <span class="hljs-keyword">else</span><br>      <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;你输了&quot;</span><br>  <span class="hljs-keyword">fi</span>;;<br>*) <br>  <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;必须输入1-3数字&quot;</span><br><span class="hljs-keyword">esac</span><br><br><br><span class="hljs-comment">#if形式</span><br><span class="hljs-comment">#echo -e &quot;1.石头 \n2.剪刀 \n3.布&quot;</span><br><span class="hljs-comment">#while true;do</span><br><span class="hljs-comment">#  read -p &quot;输入拳法代表的数字进行猜拳：&quot; game</span><br><span class="hljs-comment">#  ai=$[$RANDOM%3+1]</span><br><span class="hljs-comment">#  echo &quot;机器人出拳为：$ai&quot;</span><br><span class="hljs-comment">#</span><br><span class="hljs-comment">#  if [ $game -gt 3 -o $game -eq 0 ];then</span><br><span class="hljs-comment">#      echo &quot;请输入合法数字&quot;</span><br><span class="hljs-comment">#      exit 1</span><br><span class="hljs-comment">#  fi</span><br><span class="hljs-comment">#  if [ $ai -eq 1 ];then</span><br><span class="hljs-comment">#    if [ $game -eq $ai ];then</span><br><span class="hljs-comment">#        echo &quot;平局&quot;</span><br><span class="hljs-comment">#      elif [ $game -eq 2 ];then</span><br><span class="hljs-comment">#        echo &quot;你输了&quot;</span><br><span class="hljs-comment">#      else</span><br><span class="hljs-comment">#        echo &quot;你赢了&quot;</span><br><span class="hljs-comment">#    fi</span><br><span class="hljs-comment">#  fi</span><br><span class="hljs-comment">#  if [ $ai -eq 2 ];then</span><br><span class="hljs-comment">#      if [ $game -eq $ai ];then</span><br><span class="hljs-comment">#          echo &quot;平局&quot;</span><br><span class="hljs-comment">#        elif [ $game -eq 3 ];then</span><br><span class="hljs-comment">#          echo &quot;你输了&quot;</span><br><span class="hljs-comment">#        else</span><br><span class="hljs-comment">#          echo &quot;你赢了&quot;</span><br><span class="hljs-comment">#      fi</span><br><span class="hljs-comment">#  fi</span><br><span class="hljs-comment">#    if [ $ai -eq 3 ];then</span><br><span class="hljs-comment">#      if [ $game -eq $ai ];then</span><br><span class="hljs-comment">#          echo &quot;平局&quot;</span><br><span class="hljs-comment">#        elif [ $game -eq 1 ];then</span><br><span class="hljs-comment">#          echo &quot;你输了&quot;</span><br><span class="hljs-comment">#        else</span><br><span class="hljs-comment">#          echo &quot;你赢了&quot;</span><br><span class="hljs-comment">#      fi</span><br><span class="hljs-comment">#  fi</span><br><span class="hljs-comment">#done</span><br></code></pre></td></tr></table></figure><h3 id="11-让-192-168-4-0-24-整个网段中那些主机处于开机状态，-那些处于关机状态（for-while-多进程-实现）"><a href="#11-让-192-168-4-0-24-整个网段中那些主机处于开机状态，-那些处于关机状态（for-while-多进程-实现）" class="headerlink" title="11: 让 192.168.4.0/24 整个网段中那些主机处于开机状态， 那些处于关机状态（for while 多进程 实现）"></a>11: 让 192.168.4.0/24 整个网段中那些主机处于开机状态， 那些处于关机状态（for while 多进程 实现）</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">#for循环</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> &#123;1..254&#125;;<span class="hljs-keyword">do</span><br>  ping -c2 -W1 192.168.249.<span class="hljs-variable">$i</span> &gt;/dev/null<br>  <span class="hljs-keyword">if</span> [ $? -eq 0 ];<span class="hljs-keyword">then</span><br>      <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;192.168.249.<span class="hljs-variable">$i</span> 上线&quot;</span><br>    <span class="hljs-keyword">else</span><br>      <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;192.168.249.<span class="hljs-variable">$i</span> 下线&quot;</span><br>  <span class="hljs-keyword">fi</span><br><span class="hljs-keyword">done</span><br><br>---<br><br><span class="hljs-keyword">while</span> [ <span class="hljs-variable">$i</span> -le 254 ];<span class="hljs-keyword">do</span><br>  ping -c2 -W1 192.168.254.<span class="hljs-variable">$i</span> &gt;dev/null<br>  <span class="hljs-keyword">if</span> [ $? -eq 0 ];<span class="hljs-keyword">then</span><br>    <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;192.168.249.<span class="hljs-variable">$i</span> 上线&quot;</span><br>  <span class="hljs-keyword">else</span><br>    <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;192.168.249.<span class="hljs-variable">$i</span> 下线&quot;</span><br>  <span class="hljs-keyword">fi</span><br><span class="hljs-keyword">done</span><br><br>---<br><br><br><span class="hljs-function"><span class="hljs-title">myping</span></span>()&#123;<br>  ping -c2 -W2 <span class="hljs-variable">$1</span> &amp;&gt;/dev/null<br>  <span class="hljs-keyword">if</span> [ $? -eq 0 ];<span class="hljs-keyword">then</span><br>    <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;<span class="hljs-variable">$1</span> 上线&quot;</span><br>  <span class="hljs-keyword">else</span><br>    <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;<span class="hljs-variable">$1</span> 下线&quot;</span><br>  <span class="hljs-keyword">fi</span><br>&#125;<br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> &#123;1..254&#125;;<span class="hljs-keyword">do</span><br>  myping 192.168.249.<span class="hljs-variable">$i</span> &amp;<br><span class="hljs-keyword">done</span><br><span class="hljs-comment">#使用 &amp; 将执行放在后台执行</span><br><span class="hljs-comment">#这样做的好处是不需要等待ping第一台主机的回应， 就可以继续并发执行第二台 以此类推</span><br><br></code></pre></td></tr></table></figure><h3 id="12：编写脚本-显示进度条"><a href="#12：编写脚本-显示进度条" class="headerlink" title="12：编写脚本 显示进度条"></a>12：编写脚本 显示进度条</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-meta">#!/bin/bash</span><br><span class="hljs-comment">#echo -n 不换行输出</span><br><span class="hljs-function"><span class="hljs-title">jindu</span></span>()&#123;<br><span class="hljs-keyword">while</span> <span class="hljs-literal">true</span>;<span class="hljs-keyword">do</span><br>  <span class="hljs-built_in">echo</span> -n <span class="hljs-string">&quot;#&quot;</span><br>  sleep 0.2<br><span class="hljs-keyword">done</span><br>&#125;<br>jindu &amp;<br>cp -a /usr/ /tmp<br>killall $!<br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;拷贝完成&quot;</span><br></code></pre></td></tr></table></figure><h3 id="13-进度条-动态时钟脚"><a href="#13-进度条-动态时钟脚" class="headerlink" title="13: 进度条 动态时钟脚"></a>13: 进度条 动态时钟脚</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-meta">#!/bin/bash</span><br><span class="hljs-function"><span class="hljs-title">jindu</span></span>()&#123;<br>  sp=0.1<br>  count=0<br>  <span class="hljs-keyword">while</span> <span class="hljs-literal">true</span>;<span class="hljs-keyword">do</span><br>   count=$[<span class="hljs-variable">$count</span>+1]<br>    <span class="hljs-keyword">case</span> <span class="hljs-variable">$count</span> <span class="hljs-keyword">in</span><br>    1)<br>      <span class="hljs-built_in">echo</span> -e <span class="hljs-string">&quot;-\b\c&quot;</span><br>      sleep <span class="hljs-variable">$sp</span><br>      ;;<br>    2)<br>      <span class="hljs-built_in">echo</span> -e <span class="hljs-string">&#x27;\\&#x27;</span><span class="hljs-string">&quot;\b\c&quot;</span><br>      sleep <span class="hljs-variable">$sp</span><br>      ;;<br>    3)<br>      <span class="hljs-built_in">echo</span> -e <span class="hljs-string">&quot;|\b\c&quot;</span><br>      sleep <span class="hljs-variable">$sp</span><br>      ;;<br>    4)<br>      <span class="hljs-built_in">echo</span> -e <span class="hljs-string">&quot;/\b\c&quot;</span><br>      sleep <span class="hljs-variable">$sp</span><br>      ;;<br>    *)<br>      count=0<br>    <span class="hljs-keyword">esac</span><br>  <span class="hljs-keyword">done</span><br>&#125;<br>jindu<br><br></code></pre></td></tr></table></figure><h3 id="14-9-9-乘法表"><a href="#14-9-9-乘法表" class="headerlink" title="14: 9*9 乘法表"></a>14: 9*9 乘法表</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs bash"><br><span class="hljs-meta">#!/bin/bash</span><br><br><span class="hljs-comment">#for i in &#123;1..9&#125;;do</span><br><span class="hljs-comment">#    for((j=1;j&lt;$i+1;j++));do</span><br><span class="hljs-comment">#        echo -e &quot;$i&quot;x&quot;$j&quot;&quot;=&quot;&quot;$(($i*$j)) \c&quot;</span><br><span class="hljs-comment">#    done</span><br><span class="hljs-comment">#    echo -e &quot;\n&quot;</span><br><span class="hljs-comment">#done</span><br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> `seq 9`;<span class="hljs-keyword">do</span><br>  <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> `seq <span class="hljs-variable">$i</span>`;<span class="hljs-keyword">do</span><br>    <span class="hljs-built_in">echo</span> -n <span class="hljs-string">&quot;<span class="hljs-variable">$i</span>*<span class="hljs-variable">$j</span>=$[i*j]  &quot;</span><br>  <span class="hljs-keyword">done</span><br>    <span class="hljs-built_in">echo</span><br><span class="hljs-keyword">done</span><br><br></code></pre></td></tr></table></figure><h3 id="15-使用死循环实时显示-ens33-网卡发送的数据包流量"><a href="#15-使用死循环实时显示-ens33-网卡发送的数据包流量" class="headerlink" title="15: 使用死循环实时显示 ens33 网卡发送的数据包流量"></a>15: 使用死循环实时显示 ens33 网卡发送的数据包流量</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-meta">#!/bin/bash</span><br><span class="hljs-built_in">read</span> -p <span class="hljs-string">&quot;输入要观察的网卡:&quot;</span> net<br><span class="hljs-keyword">if</span> [ -z <span class="hljs-variable">$net</span> ];<span class="hljs-keyword">then</span><br>  <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;不能为空&quot;</span><br>  <span class="hljs-built_in">exit</span> 1<br><span class="hljs-keyword">fi</span><br><span class="hljs-keyword">while</span> <span class="hljs-literal">true</span>;<span class="hljs-keyword">do</span><br>  <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot; 发送流量: `ifconfig <span class="hljs-variable">$net</span> | grep &quot;</span>RX packets<span class="hljs-string">&quot; | awk &#x27;&#123;print <span class="hljs-variable">$6</span>,<span class="hljs-variable">$7</span>&#125;&#x27;`&quot;</span><br>  <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot; 接受流量: `ifconfig <span class="hljs-variable">$net</span> | grep &quot;</span>TX packets<span class="hljs-string">&quot; | awk &#x27;&#123;print <span class="hljs-variable">$6</span>,<span class="hljs-variable">$7</span>&#125;&#x27;`&quot;</span><br>  <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;-----------&quot;</span><br>  sleep 1<br><span class="hljs-keyword">done</span><br><br></code></pre></td></tr></table></figure><h3 id="16-使用user-txt-文件中的人员名单-在计算机中自动创建对应的用户并配置初始密码"><a href="#16-使用user-txt-文件中的人员名单-在计算机中自动创建对应的用户并配置初始密码" class="headerlink" title="16: 使用user.txt 文件中的人员名单,在计算机中自动创建对应的用户并配置初始密码"></a>16: 使用user.txt 文件中的人员名单,在计算机中自动创建对应的用户并配置初始密码</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-meta">#!/bin/bash</span><br> <br><span class="hljs-built_in">read</span> -p <span class="hljs-string">&quot;输入初始化密码:&quot;</span> pw<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> `cat user.txt`;<span class="hljs-keyword">do</span><br>  useradd <span class="hljs-variable">$i</span> &amp;&amp; <span class="hljs-built_in">echo</span> <span class="hljs-variable">$pw</span> | passwd <span class="hljs-variable">$i</span> --stdin<br>  <span class="hljs-keyword">if</span> [ $? -eq 0 ];<span class="hljs-keyword">then</span><br>    <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;创建用户:<span class="hljs-variable">$i</span>; 密码为:<span class="hljs-variable">$pw</span>&quot;</span><br>  <span class="hljs-keyword">else</span><br>    <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;创建用户:<span class="hljs-variable">$i</span> 失败&quot;</span><br>  <span class="hljs-keyword">fi</span><br><span class="hljs-keyword">done</span><br></code></pre></td></tr></table></figure><h3 id="17-编写批量修改扩展名脚本-如-批量将txt文件修改为doc文件"><a href="#17-编写批量修改扩展名脚本-如-批量将txt文件修改为doc文件" class="headerlink" title="17: 编写批量修改扩展名脚本,如 批量将txt文件修改为doc文件"></a>17: 编写批量修改扩展名脚本,如 批量将txt文件修改为doc文件</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-meta">#!/bin/bash</span><br><br><span class="hljs-built_in">read</span> -p  <span class="hljs-string">&quot;输入需要批量修改的目录:&quot;</span> dir<br><span class="hljs-built_in">read</span> -p  <span class="hljs-string">&quot;输入修改的目标后缀:&quot;</span>  suffix<br><span class="hljs-built_in">read</span> -p  <span class="hljs-string">&quot;输入要修改成的后缀: &quot;</span> tag<br><br><span class="hljs-comment">##rename方法简单方便</span><br><span class="hljs-variable">$cd</span> <span class="hljs-variable">$dir</span><br><span class="hljs-variable">$rename</span> <span class="hljs-variable">$suffix</span> <span class="hljs-variable">$tag</span> *<br><br><span class="hljs-comment">##sed mv 重命名方法</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> `ls <span class="hljs-variable">$dir</span>`;<span class="hljs-keyword">do</span><br> mv <span class="hljs-variable">$dir</span>/<span class="hljs-variable">$i</span> <span class="hljs-variable">$dir</span>/$(<span class="hljs-built_in">echo</span> <span class="hljs-variable">$i</span> | sed s@<span class="hljs-variable">$suffix</span>@<span class="hljs-variable">$tag</span>@)<br><span class="hljs-keyword">done</span><br><br></code></pre></td></tr></table></figure><h3 id="18-使用expect-工具自动交互密码远程其他主机安装httpd"><a href="#18-使用expect-工具自动交互密码远程其他主机安装httpd" class="headerlink" title="18: 使用expect 工具自动交互密码远程其他主机安装httpd"></a>18: 使用expect 工具自动交互密码远程其他主机安装httpd</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-meta">#!/bin/bash</span><br><span class="hljs-comment">#使用ansible</span><br>ansible node -m yum -a <span class="hljs-string">&#x27;name=nginx&#x27;</span><br></code></pre></td></tr></table></figure><h3 id="19-编写一个脚本点名器"><a href="#19-编写一个脚本点名器" class="headerlink" title="19: 编写一个脚本点名器"></a>19: 编写一个脚本点名器</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-meta">#!/bin/bash</span><br><span class="hljs-comment"># 提前准备一个txt文件,该文件中需要包含所有姓名的信息,一行一个姓名, 脚本每次随机显示一个姓名</span><br><br><span class="hljs-keyword">while</span>;<span class="hljs-keyword">do</span><br>  <span class="hljs-comment">#统计user文件中有多少用户</span><br>  line=`cat user.txt | wc -l`<br>  num=$[RANDOM%line+1]<br>  sed -n <span class="hljs-string">&quot;<span class="hljs-variable">$&#123;num&#125;</span>p&quot;</span> user.txt<br>  sleep 0.2<br><span class="hljs-keyword">done</span><br></code></pre></td></tr></table></figure><h3 id="20-查看有多少远程的ip在连接本机-不管是ssh还是http-还是ftp"><a href="#20-查看有多少远程的ip在连接本机-不管是ssh还是http-还是ftp" class="headerlink" title="20: 查看有多少远程的ip在连接本机,(不管是ssh还是http 还是ftp)"></a>20: 查看有多少远程的ip在连接本机,(不管是ssh还是http 还是ftp)</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-meta">#!/bin/bash</span><br><span class="hljs-comment">#省略前2行, sed -n &#x27;3,$p&#x27;  , awk &#x27;NR&gt;2&#x27;</span><br>netstat -ant | awk <span class="hljs-string">&#x27;&#123;print $5&#125;&#x27;</span> | sed -n <span class="hljs-string">&#x27;3,$p&#x27;</span> | sort -nr | uniq -c<br></code></pre></td></tr></table></figure><h3 id="21-对100以内的所有正整数相加求和"><a href="#21-对100以内的所有正整数相加求和" class="headerlink" title="21: 对100以内的所有正整数相加求和"></a>21: 对100以内的所有正整数相加求和</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-meta">#!/bin/bash</span><br>j=0<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> &#123;1..100&#125;;<span class="hljs-keyword">do</span><br>  j=$[j+=i]<br><span class="hljs-keyword">done</span><br><span class="hljs-built_in">echo</span> <span class="hljs-variable">$j</span><br></code></pre></td></tr></table></figure><h3 id="22-统计09-36-09-37-所有访问nginx服务器的请求有多少个-统计ip-有多少"><a href="#22-统计09-36-09-37-所有访问nginx服务器的请求有多少个-统计ip-有多少" class="headerlink" title="22: 统计09:36-09:37 所有访问nginx服务器的请求有多少个 | 统计ip 有多少"></a>22: 统计09:36-09:37 所有访问nginx服务器的请求有多少个 | 统计ip 有多少</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-meta">#!/bin/bash</span><br><br>awk -F <span class="hljs-string">&quot;:&quot;</span>  <span class="hljs-string">&#x27;$2&quot;:&quot;$3 &gt; &quot;09:36&quot; &amp;&amp; $2&quot;:&quot;$3 &lt;= &quot;09:37&quot;&#123;print $1&#125;&#x27;</span> mobile.haoqipei.com.log | awk <span class="hljs-string">&#x27;&#123;print $1&#125;&#x27;</span> | sort -n | uniq -c<br></code></pre></td></tr></table></figure><h3 id="23-打印国际象棋棋盘"><a href="#23-打印国际象棋棋盘" class="headerlink" title="23: 打印国际象棋棋盘"></a>23: 打印国际象棋棋盘</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-meta">#!/bin/bash</span><br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> &#123;1..8&#125;;<span class="hljs-keyword">do</span><br>  <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> &#123;1..8&#125;;<span class="hljs-keyword">do</span><br>    sun=$[i+j]<br>    <span class="hljs-keyword">if</span> [ $[sun%2] -eq 0 ];<span class="hljs-keyword">then</span><br>    <span class="hljs-built_in">echo</span> -en <span class="hljs-string">&quot;\033[46m  \033[0m&quot;</span><br>    <span class="hljs-keyword">fi</span><br>    <span class="hljs-built_in">echo</span> -en <span class="hljs-string">&quot;\033[47m  \033[0m&quot;</span><br>  <span class="hljs-keyword">done</span><br>  <span class="hljs-built_in">echo</span><br><span class="hljs-keyword">done</span><br><br></code></pre></td></tr></table></figure><h3 id="24-统计每个远程ip访问真机nginx-多少次"><a href="#24-统计每个远程ip访问真机nginx-多少次" class="headerlink" title="24: 统计每个远程ip访问真机nginx 多少次?"></a>24: 统计每个远程ip访问真机nginx 多少次?</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-meta">#!/bin/bash</span><br><br>awk <span class="hljs-string">&#x27;&#123;ip[$1]++&#125;END&#123;for (i in ip) print ip[i],i&#125;&#x27;</span> mobile.haoqipei.com.log<br></code></pre></td></tr></table></figure><h3 id="25-统计当前linux系统中可以登录计算机的账户有多少"><a href="#25-统计当前linux系统中可以登录计算机的账户有多少" class="headerlink" title="25: 统计当前linux系统中可以登录计算机的账户有多少?"></a>25: 统计当前linux系统中可以登录计算机的账户有多少?</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-meta">#!/bin/bash</span><br><span class="hljs-comment">#grep -v &quot;nologin&quot;  /etc/passwd | wc -l</span><br></code></pre></td></tr></table></figure><h3 id="26-统计-var-log-有多少文件-并显示这些文件名"><a href="#26-统计-var-log-有多少文件-并显示这些文件名" class="headerlink" title="26: 统计/var/log 有多少文件 并显示这些文件名"></a>26: 统计/var/log 有多少文件 并显示这些文件名</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-meta">#!/bin/bash</span><br><br>sum=0<br><span class="hljs-comment">#cd /var/log/</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> `ls -r /var/<span class="hljs-built_in">log</span>/*`;<span class="hljs-keyword">do</span><br>  <span class="hljs-keyword">if</span> [ -f <span class="hljs-variable">$i</span> ];<span class="hljs-keyword">then</span><br>    <span class="hljs-built_in">let</span> num++<br>    <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;文件名: <span class="hljs-variable">$i</span>&quot;</span><br>  <span class="hljs-keyword">fi</span><br><span class="hljs-keyword">done</span><br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;文件总数为 <span class="hljs-variable">$num</span>&quot;</span><br><br></code></pre></td></tr></table></figure><h3 id="27-自动为其他脚本添加解释器信息-bin-bash"><a href="#27-自动为其他脚本添加解释器信息-bin-bash" class="headerlink" title="27: 自动为其他脚本添加解释器信息, #!/bin/bash"></a>27: 自动为其他脚本添加解释器信息, #!/bin/bash</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-meta">#!/bin/bash</span><br><br><span class="hljs-keyword">if</span> ! grep -q <span class="hljs-string">&#x27;#!/bin&#x27;</span> $!;<span class="hljs-keyword">then</span><br>  sed <span class="hljs-string">&#x27;1i #!/bin/bash&#x27;</span> <span class="hljs-variable">$1</span><br><span class="hljs-keyword">fi</span><br></code></pre></td></tr></table></figure><h3 id="28-切割nginx日志"><a href="#28-切割nginx日志" class="headerlink" title="28: 切割nginx日志"></a>28: 切割nginx日志</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-meta">#!/bin/bash</span><br><br>nginx_log_path=<span class="hljs-string">&quot;/var/log/nginx/&quot;</span><br><br>mv <span class="hljs-variable">$&#123;nginx_log_path&#125;</span>access.log <span class="hljs-variable">$&#123;nginx_log_path&#125;</span>access_$(date +%F).<span class="hljs-built_in">log</span><br><br><span class="hljs-built_in">kill</span> -USER1 `cat /run/nginx.pid`<br><br></code></pre></td></tr></table></figure><h3 id="29-检测mysql-数据库连接量"><a href="#29-检测mysql-数据库连接量" class="headerlink" title="29: 检测mysql 数据库连接量"></a>29: 检测mysql 数据库连接量</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-meta">#!/bin/bash</span><br>log_file=/tmp/mysql_login.log<br>user=root<br>passwd=123456<br><span class="hljs-keyword">while</span> <span class="hljs-literal">true</span>;<span class="hljs-keyword">do</span><br>  mysqladmin -u<span class="hljs-string">&quot;<span class="hljs-variable">$user</span>&quot;</span> -p<span class="hljs-string">&quot;<span class="hljs-variable">$passwd</span>&quot;</span> status | awk <span class="hljs-string">&#x27;&#123;print $4&#125;&#x27;</span> &gt;&gt; <span class="hljs-variable">$log_file</span><br>  sleep 2<br><span class="hljs-keyword">done</span><br><br></code></pre></td></tr></table></figure><h3 id="30-根据md5-校验码-检测文件是否被修改"><a href="#30-根据md5-校验码-检测文件是否被修改" class="headerlink" title="30: 根据md5 校验码, 检测文件是否被修改"></a>30: 根据md5 校验码, 检测文件是否被修改</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-meta">#!/bin/bash</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> `ls /etc/*conf`;<span class="hljs-keyword">do</span><br>  md5sum <span class="hljs-string">&quot;<span class="hljs-variable">$i</span>&quot;</span> &gt;&gt; /var/<span class="hljs-built_in">log</span>/md5.log<br><span class="hljs-keyword">done</span><br><br></code></pre></td></tr></table></figure><h3 id="40-检测mysql服务是否存活"><a href="#40-检测mysql服务是否存活" class="headerlink" title="40: 检测mysql服务是否存活"></a>40: 检测mysql服务是否存活</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-meta">#!/bin/bash</span><br>user=root<br>passwd=passwd<br><br>mysqladmin -u<span class="hljs-variable">$user</span> -p<span class="hljs-variable">$passwd</span> ping &amp;&gt;/dev/null<br><span class="hljs-keyword">if</span> [ $? -eq 0 ];<span class="hljs-keyword">then</span><br>    <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;mysql 启动状态&quot;</span><br>  <span class="hljs-keyword">else</span> <br>    <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;mysql 没有启动&quot;</span><br><span class="hljs-keyword">fi</span><br></code></pre></td></tr></table></figure><h3 id="41-备份mysql的shell脚本-mysqldump"><a href="#41-备份mysql的shell脚本-mysqldump" class="headerlink" title="41: 备份mysql的shell脚本(mysqldump)"></a>41: 备份mysql的shell脚本(mysqldump)</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-meta">#!/bin/bash</span><br><br>user=root<br>passwd=passwd<br>db=testdb<br><br>[ ! d /mysqlback ] &amp;&amp; mkdir /mysqlback<br>mysqldump -u<span class="hljs-variable">$user</span> -p<span class="hljs-variable">$passwd</span> <span class="hljs-variable">$db</span> &gt; /mysqlback/<span class="hljs-variable">$db</span>.sql<br><br></code></pre></td></tr></table></figure><h3 id="42-将文件中所有的小写字母转行为大写字母"><a href="#42-将文件中所有的小写字母转行为大写字母" class="headerlink" title="42: 将文件中所有的小写字母转行为大写字母"></a>42: 将文件中所有的小写字母转行为大写字母</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-meta">#!/bin/bash</span><br><br><span class="hljs-built_in">read</span> -p <span class="hljs-string">&quot;输入需要转行的文件:&quot;</span> file<br><br>tr [a-z] [A-Z] &lt; <span class="hljs-variable">$file</span><br><br><span class="hljs-comment">#写入文件</span><br>cat test.sh | tr [a-z] [A-Z] &gt;&gt; test.sh<br></code></pre></td></tr></table></figure><h3 id="43-非交互自动生成ssh密钥"><a href="#43-非交互自动生成ssh密钥" class="headerlink" title="43: 非交互自动生成ssh密钥"></a>43: 非交互自动生成ssh密钥</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-meta">#!/bin/bash</span><br><span class="hljs-comment">#</span><br>rm rf ~/.ssh/*<br><br>ssh-keygen -t RSA -N <span class="hljs-string">&#x27;&#x27;</span> -f ~/.ssh/id_rsa<br><br></code></pre></td></tr></table></figure><h3 id="44-检测特定的软件是否已经安装"><a href="#44-检测特定的软件是否已经安装" class="headerlink" title="44: 检测特定的软件是否已经安装"></a>44: 检测特定的软件是否已经安装</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-meta">#!/bin/bash</span><br><span class="hljs-built_in">read</span> -p <span class="hljs-string">&quot;输入要检测的软件:&quot;</span> pack<br><br><span class="hljs-keyword">if</span> [ -z <span class="hljs-variable">$pack</span> ];<span class="hljs-keyword">then</span><br>  <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;不能为空&quot;</span><br>  <span class="hljs-built_in">exit</span> 1<br><span class="hljs-keyword">fi</span><br><br>rpm -q <span class="hljs-variable">$pack</span> &amp;&gt;/dev/null<br><span class="hljs-keyword">if</span> [ $? -eq 0 ];<span class="hljs-keyword">then</span><br>    <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;已安装&quot;</span><br>  <span class="hljs-keyword">else</span><br>    <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;没有安装&quot;</span><br>    <span class="hljs-built_in">exit</span> 1<br><span class="hljs-keyword">fi</span><br></code></pre></td></tr></table></figure><h3 id="45-监控http服务器的状态-测试返回码"><a href="#45-监控http服务器的状态-测试返回码" class="headerlink" title="45:监控http服务器的状态(测试返回码)"></a>45:监控http服务器的状态(测试返回码)</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-meta">#!/bin/bash</span><br><br>url=<span class="hljs-string">&quot;https://h5.haoqipei.com&quot;</span><br>sum=0<br><span class="hljs-keyword">while</span> <span class="hljs-literal">true</span>;<span class="hljs-keyword">do</span><br>sleep 10;<br>code=$(curl -m 5 -o /dev/null -s -w %&#123;http_code&#125; <span class="hljs-variable">$url</span>)<br><span class="hljs-keyword">if</span> [ <span class="hljs-variable">$code</span> -lt 200 ];<span class="hljs-keyword">then</span><br>  <span class="hljs-built_in">let</span> sum+=1<br>  <span class="hljs-keyword">if</span> [ <span class="hljs-variable">$sun</span> -gt 3 ];<span class="hljs-keyword">then</span><br>    <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;网络失联30s, 请检查 http 服务&quot;</span><br>    <span class="hljs-built_in">unset</span> sum<br>    <span class="hljs-built_in">exit</span> 1<br>  <span class="hljs-keyword">fi</span><br><span class="hljs-keyword">fi</span><br><br><span class="hljs-keyword">done</span><br><br><br></code></pre></td></tr></table></figure><h3 id="46-显示cpu-厂商信息"><a href="#46-显示cpu-厂商信息" class="headerlink" title="46: 显示cpu 厂商信息"></a>46: 显示cpu 厂商信息</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-meta">#!/bin/bash</span><br>awk <span class="hljs-string">&#x27;/vendor_id/&#123;print $3&#125;&#x27;</span> /proc/cpuinfo | uniq<br></code></pre></td></tr></table></figure><h3 id="47-删除某个目录大小为0-的文件"><a href="#47-删除某个目录大小为0-的文件" class="headerlink" title="47: 删除某个目录大小为0 的文件"></a>47: 删除某个目录大小为0 的文件</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-meta">#!/bin/bash</span><br>dir=/usr/share<br><br>find <span class="hljs-variable">$dir</span> -<span class="hljs-built_in">type</span> f -szie 0 -<span class="hljs-built_in">exec</span> rm -rf &#123;&#125; \;<br><br></code></pre></td></tr></table></figure><h3 id="48-查找linux-系统中的僵尸进程"><a href="#48-查找linux-系统中的僵尸进程" class="headerlink" title="48: 查找linux 系统中的僵尸进程"></a>48: 查找linux 系统中的僵尸进程</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-meta">#!/bin/bash</span><br>ps aux | awk <span class="hljs-string">&#x27;&#123;if($8 == &quot;Z&quot;)&#123;print $2,$11&#125;&#125;&#x27;</span><br><br></code></pre></td></tr></table></figure><h3 id="49-提示用户输入年份后测试判断是否为闰年"><a href="#49-提示用户输入年份后测试判断是否为闰年" class="headerlink" title="49: 提示用户输入年份后测试判断是否为闰年"></a>49: 提示用户输入年份后测试判断是否为闰年</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-meta">#!/bin/bash</span><br><span class="hljs-comment">#能被4整除 并且并100整除的年是闰年</span><br><span class="hljs-comment">#能被400整除的年也是闰年</span><br><br><span class="hljs-built_in">read</span> -p <span class="hljs-string">&quot;输入年份:&quot;</span> year<br><br><span class="hljs-keyword">if</span> [ <span class="hljs-string">&quot;<span class="hljs-variable">$year</span>&quot;</span> == <span class="hljs-string">&quot;&quot;</span> ];<span class="hljs-keyword">then</span><br>  <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;输入有效年份&quot;</span><br>  <span class="hljs-built_in">exit</span><br><span class="hljs-keyword">fi</span><br><span class="hljs-comment">#使用正则测试变量 year中是否包含大小写字母</span><br><br><span class="hljs-keyword">if</span> [[ <span class="hljs-string">&quot;<span class="hljs-variable">$year</span>&quot;</span> =~ [a-z] ]];<span class="hljs-keyword">then</span><br>  <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;输入的不是数字&quot;</span><br>  <span class="hljs-built_in">exit</span><br><span class="hljs-keyword">fi</span><br><br><span class="hljs-keyword">if</span> [ $[<span class="hljs-variable">$year</span> % 4] -eq 0 ] &amp;&amp; [ $[<span class="hljs-variable">$year</span> % 100] -ne 0 ];<span class="hljs-keyword">then</span><br>    <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;<span class="hljs-variable">$year</span>是闰年&quot;</span><br>  <span class="hljs-keyword">elif</span> [ $[year % 400] -eq 0];<span class="hljs-keyword">then</span><br>    <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;<span class="hljs-variable">$year</span>是闰年&quot;</span><br>  <span class="hljs-keyword">else</span><br>    <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;<span class="hljs-variable">$year</span>不是闰年&quot;</span><br><span class="hljs-keyword">fi</span><br><br></code></pre></td></tr></table></figure><h3 id="50-生成随机密码-urandom版本"><a href="#50-生成随机密码-urandom版本" class="headerlink" title="50:  生成随机密码, urandom版本"></a>50:  生成随机密码, urandom版本</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-meta">#!/bin/bash</span><br><span class="hljs-comment">#/dev/urandom 是linux 内置的随机设备文件</span><br><span class="hljs-comment"># cat /dev/urandom 查看文件内容.</span><br><span class="hljs-comment">#查看该文件后 发现内容有些太随机,包含很多特殊符号 我们需要的密码  不希望使用这样的符号,</span><br><span class="hljs-comment"># tr -dc &#x27;_A-Za-z9-9&#x27; &lt; /dev/urandom</span><br><span class="hljs-comment"># 该命令可以将随机文件中的其他字符删除, 仅保留大小写字母 数字 下划线, 但是内容还是太多,</span><br><span class="hljs-comment"># 我们可以继续吧优化好的内容 通过管道传递给 head 命令, 在大量数据中仅显示头10个字节,</span><br><span class="hljs-comment"># 注意A 前面有个下划线</span><br>tr -dc <span class="hljs-string">&#x27;_A-Za-z0-9&#x27;</span> &lt;/dev/urandom | head -c 10<br></code></pre></td></tr></table></figure><h3 id="51-随机生成密码"><a href="#51-随机生成密码" class="headerlink" title="51: 随机生成密码"></a>51: 随机生成密码</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-meta">#!/bin/bash</span><br><span class="hljs-comment">#uuid版本,16进制密码</span><br>uuidgen<br><br><span class="hljs-comment">#进程id版本 数字密码</span><br><span class="hljs-built_in">echo</span> $$<br><br></code></pre></td></tr></table></figure><h3 id="52-shell脚本的fork炸弹"><a href="#52-shell脚本的fork炸弹" class="headerlink" title="52: shell脚本的fork炸弹"></a>52: shell脚本的fork炸弹</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-meta">#!/bin/bash</span><br><br><span class="hljs-comment">#快速消耗计算机资源, 指使计算机死机,</span><br><span class="hljs-comment">#定义函数名为.(点) 函数中的递归调用自己并放入后台执行</span><br>.()&#123;<br>  .|.&amp;<br>&#125;;<br>.<br><br></code></pre></td></tr></table></figure><h3 id="53-批量下载有序文件"><a href="#53-批量下载有序文件" class="headerlink" title="53: 批量下载有序文件"></a>53: 批量下载有序文件</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-meta">#!/bin/bash</span><br>url=www.baidu.com<br><span class="hljs-built_in">type</span>=jpg<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> `seq 100`;<span class="hljs-keyword">do</span><br>  curl <span class="hljs-variable">$url</span>/<span class="hljs-variable">$i</span>.<span class="hljs-variable">$type</span> -o /tmp/<span class="hljs-variable">$i</span>.<span class="hljs-variable">$type</span><br>  sleep 2<br><span class="hljs-keyword">done</span><br></code></pre></td></tr></table></figure><h3 id="54-显示当前计算机中所有账户的用户名称"><a href="#54-显示当前计算机中所有账户的用户名称" class="headerlink" title="54: 显示当前计算机中所有账户的用户名称"></a>54: 显示当前计算机中所有账户的用户名称</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-meta">#!/bin/bash</span><br><span class="hljs-comment"># awk -F&#x27;:&#x27; &#x27;&#123;print $1&#125;&#x27; /etc/passwd</span><br><span class="hljs-comment"># cut -d&#x27;:&#x27; -f1 /etc/passwd</span><br><span class="hljs-comment"># sed &quot;s/:.*//&quot; /etc/passwd</span><br></code></pre></td></tr></table></figure><h3 id="55-制定目录路径-脚本自动将该目录使用tar命令打包备份到-data目录"><a href="#55-制定目录路径-脚本自动将该目录使用tar命令打包备份到-data目录" class="headerlink" title="55: 制定目录路径, 脚本自动将该目录使用tar命令打包备份到/data目录"></a>55: 制定目录路径, 脚本自动将该目录使用tar命令打包备份到/data目录</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-meta">#!/bin/bash</span><br><br><span class="hljs-built_in">read</span> -p <span class="hljs-string">&quot;输入要打包的目录路径(绝对路径):&quot;</span> dir<br><br><span class="hljs-keyword">if</span> [ ! -d <span class="hljs-variable">$dir</span> ];<span class="hljs-keyword">then</span><br>  <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;目录不存在&quot;</span> <br><span class="hljs-keyword">fi</span><br><br>tar zcvf /tmp/<span class="hljs-variable">$dir</span>.tar.gz <span class="hljs-variable">$dir</span><br><br></code></pre></td></tr></table></figure><h3 id="56-显示进度条-回旋镖版本"><a href="#56-显示进度条-回旋镖版本" class="headerlink" title="56: 显示进度条(回旋镖版本)"></a>56: 显示进度条(回旋镖版本)</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-meta">#!/bin/bash</span><br><br><span class="hljs-keyword">while</span> <span class="hljs-literal">true</span>;<span class="hljs-keyword">do</span><br>  clear<br>  <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> `seq 20`;<span class="hljs-keyword">do</span><br>    <span class="hljs-built_in">echo</span> -e <span class="hljs-string">&quot;\033[3;<span class="hljs-variable">$&#123;i&#125;</span>H*&quot;</span><br>    sleep 0.1<br>  <span class="hljs-keyword">done</span><br>  <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> &#123;20..1&#125;;<span class="hljs-keyword">do</span><br>    <span class="hljs-built_in">echo</span> -e <span class="hljs-string">&quot;\033[3;<span class="hljs-variable">$&#123;1&#125;</span>H*&quot;</span><br>    sleep 0.1<br>  <span class="hljs-keyword">done</span><br>  clear<br><span class="hljs-keyword">done</span><br></code></pre></td></tr></table></figure><h3 id="57-循环关闭局域网中所有主机"><a href="#57-循环关闭局域网中所有主机" class="headerlink" title="57: 循环关闭局域网中所有主机"></a>57: 循环关闭局域网中所有主机</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-meta">#!/bin/bash</span><br>ip=90<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> &#123;1..254&#125;;<span class="hljs-keyword">do</span><br>  <span class="hljs-keyword">if</span> [ <span class="hljs-variable">$i</span> -ne <span class="hljs-variable">$ip</span> ];<span class="hljs-keyword">then</span><br>    <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;正在关闭 192.168.249.<span class="hljs-variable">$i</span>...&quot;</span><br>    ssh 192.168.249.<span class="hljs-variable">$i</span> poweroff<br>  <span class="hljs-keyword">fi</span><br><span class="hljs-keyword">done</span><br></code></pre></td></tr></table></figure><h3 id="58-获取本机mac地址"><a href="#58-获取本机mac地址" class="headerlink" title="58: 获取本机mac地址"></a>58: 获取本机mac地址</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-meta">#!/bin/bash</span><br>ip a show ens33 | awk <span class="hljs-string">&#x27;/link\/ether^Cprint $2&#125;&#x27;</span><br></code></pre></td></tr></table></figure><h3 id="59-修改linux-系统里最大打开文件数量"><a href="#59-修改linux-系统里最大打开文件数量" class="headerlink" title="59: 修改linux 系统里最大打开文件数量"></a>59: 修改linux 系统里最大打开文件数量</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-meta">#!/bin/bash</span><br><span class="hljs-comment">#往/etc/secruity/limits.conf 文件的末尾追加两行配置参数, 修改最大打开文件数量为 65536</span><br>cat &gt;&gt; /etc/security/limits.conf &lt;&lt; <span class="hljs-string">EOF</span><br><span class="hljs-string">* soft nofile 65536</span><br><span class="hljs-string">* hard nofile 65536</span><br><span class="hljs-string">EOF</span><br></code></pre></td></tr></table></figure><h3 id="60-自动修改计划任务配置文件"><a href="#60-自动修改计划任务配置文件" class="headerlink" title="60: 自动修改计划任务配置文件"></a>60: 自动修改计划任务配置文件</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-meta">#!/bin/bash</span><br><span class="hljs-built_in">read</span> -p <span class="hljs-string">&quot;输入分钟信息(00-59):&quot;</span> min<br><span class="hljs-built_in">read</span> -p <span class="hljs-string">&quot;输入小时信息(00-24):&quot;</span> hour<br><span class="hljs-built_in">read</span> -p <span class="hljs-string">&quot;输入日期信息(01-31):&quot;</span> date<br><span class="hljs-built_in">read</span> -p <span class="hljs-string">&quot;输入月份信息(01-12):&quot;</span> month<br><span class="hljs-built_in">read</span> -p <span class="hljs-string">&quot;输入星期信息(00-06):&quot;</span> weak<br><span class="hljs-built_in">read</span> -p <span class="hljs-string">&quot;输入要执行的命令或者脚本:&quot;</span> program<br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;<span class="hljs-variable">$min</span> <span class="hljs-variable">$hour</span> <span class="hljs-variable">$date</span> <span class="hljs-variable">$month</span> <span class="hljs-variable">$weak</span> <span class="hljs-variable">$program</span>&quot;</span> &gt;&gt; /etc/crontab<br></code></pre></td></tr></table></figure><h3 id="61-找出-etc-passwd-中能登录的用户-并将对应在-etc-shadow-中第二列密码提出处理"><a href="#61-找出-etc-passwd-中能登录的用户-并将对应在-etc-shadow-中第二列密码提出处理" class="headerlink" title="61: 找出/etc/passwd 中能登录的用户, 并将对应在/etc/shadow 中第二列密码提出处理"></a>61: 找出/etc/passwd 中能登录的用户, 并将对应在/etc/shadow 中第二列密码提出处理</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-meta">#!/bin/bash</span><br><span class="hljs-meta">#!/bin/bash</span><br><span class="hljs-comment">#awk -v 把外部变量影射为内部变量 </span><br>user=`awk -F<span class="hljs-string">&#x27;:&#x27;</span> <span class="hljs-string">&#x27;&#123;print $1&#125;&#x27;</span>  /etc/passwd`<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-variable">$user</span>;<span class="hljs-keyword">do</span><br> <span class="hljs-comment"># awk -F: -v x=$i  &#x27;$1==x&#123;print $1,$2&#125;&#x27; /etc/shadow  #awk &#x27;&#x27; 单引号不识别变量 所以用赋值的方式 去条件里面判断</span><br>   awk -F<span class="hljs-string">&#x27;:&#x27;</span> <span class="hljs-string">&#x27;/$&#123;i&#125;/&#123;print $1,$2&#125;&#x27;</span> /etc/shadow        <span class="hljs-comment"># 这种方式不行, $i 不识别</span><br><span class="hljs-keyword">done</span><br></code></pre></td></tr></table></figure><h3 id="62-使用脚本循环创建-三位数的文本文件-111-999的文件"><a href="#62-使用脚本循环创建-三位数的文本文件-111-999的文件" class="headerlink" title="62: 使用脚本循环创建 三位数的文本文件 (111-999的文件)"></a>62: 使用脚本循环创建 三位数的文本文件 (111-999的文件)</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-meta">#!/bin/bash</span><br>mkdir -p /tmp/testnum<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> &#123;1..99&#125;;<span class="hljs-keyword">do</span><br>  <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> &#123;1..99&#125;;<span class="hljs-keyword">do</span><br>    <span class="hljs-keyword">for</span> k <span class="hljs-keyword">in</span> &#123;1..99&#125;;<span class="hljs-keyword">do</span><br>      touch /tmp/testnum/<span class="hljs-variable">$&#123;i&#125;</span><span class="hljs-variable">$&#123;j&#125;</span><span class="hljs-variable">$&#123;k&#125;</span>.txt<br>    <span class="hljs-keyword">done</span><br>  <span class="hljs-keyword">done</span><br><span class="hljs-keyword">done</span><br></code></pre></td></tr></table></figure><h3 id="63-统计-etc-passwd-中root-出现的次数"><a href="#63-统计-etc-passwd-中root-出现的次数" class="headerlink" title="63: 统计/etc/passwd 中root 出现的次数"></a>63: 统计/etc/passwd 中root 出现的次数</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-meta">#!/bin/bash</span><br><br><span class="hljs-comment">#awk -F&#x27;:&#x27; &#x27;&#123;i=1;while(i&lt;=NF)&#123;if($i~/root/)&#123;x++&#125;;i++&#125;&#125;END&#123;print &quot;root 出现次数为 x&quot;&#125;&#x27; /etc/passwd</span><br>sum=0<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> `awk -F<span class="hljs-string">&#x27;/&#x27;</span> <span class="hljs-string">&#x27;&#123;print $NF&#125;&#x27;</span> /etc/passwd`;<span class="hljs-keyword">do</span><br>  <span class="hljs-keyword">if</span> [ <span class="hljs-variable">$i</span> == <span class="hljs-string">&quot;nologin&quot;</span> ];<span class="hljs-keyword">then</span><br>      <span class="hljs-built_in">let</span> sum++<br>  <span class="hljs-keyword">fi</span><br><span class="hljs-keyword">done</span><br><span class="hljs-built_in">echo</span> <span class="hljs-variable">$sum</span><br><br></code></pre></td></tr></table></figure><h3 id="64-统计linux进程相关的数量信息"><a href="#64-统计linux进程相关的数量信息" class="headerlink" title="64: 统计linux进程相关的数量信息"></a>64: 统计linux进程相关的数量信息</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-meta">#!/bin/bash</span><br>running=0<br>sleeping=0<br>stoped=0<br>zombie=0<br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> /proc/[1-9]*;<span class="hljs-keyword">do</span><br> tatus=`awk <span class="hljs-string">&#x27;&#123;print $3&#125;&#x27;</span> <span class="hljs-variable">$i</span>/<span class="hljs-built_in">stat</span>`<br> <span class="hljs-keyword">case</span> <span class="hljs-variable">$tatus</span> <span class="hljs-keyword">in</span><br> R)<br>    running=$[running+1];;<br> T)<br>    stoped=$[stoped+1];;<br> S)<br>    sleeping=$[sleeping+1];;<br> Z)<br>    zombie=$[zombie+1];;<br> <span class="hljs-keyword">esac</span><br><span class="hljs-keyword">done</span><br><br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;运行的:<span class="hljs-variable">$running</span>  sleep的:<span class="hljs-variable">$sleeping</span> stop的:<span class="hljs-variable">$stoped</span> zeom的:<span class="hljs-variable">$zombie</span>&quot;</span><br><br></code></pre></td></tr></table></figure><h3 id="65-判断用户输入的数据类型"><a href="#65-判断用户输入的数据类型" class="headerlink" title="65: 判断用户输入的数据类型,"></a>65: 判断用户输入的数据类型,</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-meta">#!/bin/bash</span><br><span class="hljs-built_in">read</span> -p <span class="hljs-string">&quot;请输入一个字符:&quot;</span> key<br><span class="hljs-keyword">case</span> <span class="hljs-variable">$key</span> <span class="hljs-keyword">in</span><br>[a-z]|[A-Z])<br>  <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;输入的是一个字母&quot;</span>;;<br>[0-9])<br>  <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;输入的是一个数字&quot;</span>;;<br>*)<br>  <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;输入的是空格或功能键字符&quot;</span><br><span class="hljs-keyword">esac</span><br><br></code></pre></td></tr></table></figure><h3 id="66-打印斐波那契数列-该数列的特点是最后一个数字-永远都是前2个数字之和"><a href="#66-打印斐波那契数列-该数列的特点是最后一个数字-永远都是前2个数字之和" class="headerlink" title="66: 打印斐波那契数列 (该数列的特点是最后一个数字 永远都是前2个数字之和)"></a>66: 打印斐波那契数列 (该数列的特点是最后一个数字 永远都是前2个数字之和)</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-meta">#!/bin/bash</span><br><span class="hljs-comment">#斐波那契数列最后一个数字永远是前2个数字之和</span><br><span class="hljs-comment">#如: 0 1 1 2 3 5 8 13</span><br>list=(0 1)<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> `seq 2 11`;<span class="hljs-keyword">do</span><br>  list[<span class="hljs-variable">$i</span>]=`expr <span class="hljs-variable">$&#123;list[-1]&#125;</span> + <span class="hljs-variable">$&#123;list[-2]&#125;</span>`<br><span class="hljs-keyword">done</span><br><span class="hljs-built_in">echo</span> <span class="hljs-variable">$&#123;list[@]&#125;</span><br></code></pre></td></tr></table></figure><h3 id="67-判断用户输入的是yes还是no"><a href="#67-判断用户输入的是yes还是no" class="headerlink" title="67: 判断用户输入的是yes还是no"></a>67: 判断用户输入的是yes还是no</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-meta">#!/bin/bash</span><br><span class="hljs-built_in">read</span> -p <span class="hljs-string">&quot;输入yes或者no:&quot;</span> sure<br><br><span class="hljs-keyword">case</span> <span class="hljs-variable">$sure</span> <span class="hljs-keyword">in</span><br>yes|y|Y|yes)<br>  <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;输入的是yes&quot;</span>;;<br>no|NO|N|n)<br>  <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;输入的是no&quot;</span>;;<br>*)<br>  <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;error&quot;</span><br><span class="hljs-keyword">esac</span><br><br></code></pre></td></tr></table></figure><h3 id="68-显示本机上linux系统上所有的开发的端口列表"><a href="#68-显示本机上linux系统上所有的开发的端口列表" class="headerlink" title="68: 显示本机上linux系统上所有的开发的端口列表"></a>68: 显示本机上linux系统上所有的开发的端口列表</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-meta">#!/bin/bash</span><br>netstat -tlunp| awk <span class="hljs-string">&#x27;&#123;print $1,$4&#125;&#x27;</span>|awk -F<span class="hljs-string">&#x27;:&#x27;</span> <span class="hljs-string">&#x27;&#123;print &quot;协议&quot;$1,&quot;端口&quot;$NF&#125;&#x27;</span>| grep <span class="hljs-string">&quot;[0-9]&quot;</span>| uniq<br><br></code></pre></td></tr></table></figure><h3 id="69-将linux系统中UID-大于1000的用户都删除"><a href="#69-将linux系统中UID-大于1000的用户都删除" class="headerlink" title="69: 将linux系统中UID 大于1000的用户都删除"></a>69: 将linux系统中UID 大于1000的用户都删除</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-meta">#!/bin/bash</span><br>user=`awk -F<span class="hljs-string">&#x27;:&#x27;</span> <span class="hljs-string">&#x27;$3&gt;=1000&#123;print $1&#125;&#x27;</span> /etc/passwd`<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-variable">$user</span>;<span class="hljs-keyword">do</span><br>  userdel -r <span class="hljs-variable">$i</span><br><span class="hljs-keyword">done</span><br></code></pre></td></tr></table></figure><h3 id="70-使用脚本打印如下图像"><a href="#70-使用脚本打印如下图像" class="headerlink" title="70: 使用脚本打印如下图像"></a>70: 使用脚本打印如下图像</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-meta">#!/bin/bash</span><br><br><span class="hljs-comment">#第一个图像</span><br><br><span class="hljs-keyword">for</span>((i=1;i&lt;=9;i++));<span class="hljs-keyword">do</span><br>  <span class="hljs-keyword">for</span>((j=1;j&lt;=i;j++));<span class="hljs-keyword">do</span><br>    <span class="hljs-built_in">echo</span> -n <span class="hljs-variable">$i</span><br>  <span class="hljs-keyword">done</span><br>  <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;&quot;</span><br><span class="hljs-keyword">done</span><br><br><span class="hljs-built_in">read</span> -p <span class="hljs-string">&quot;按任意键继续&quot;</span> key<br><br><span class="hljs-keyword">for</span>((i=1;i&lt;=9;i++));<span class="hljs-keyword">do</span><br>  <span class="hljs-keyword">for</span>((j=1;j&lt;=i;j++));<span class="hljs-keyword">do</span><br>    <span class="hljs-built_in">echo</span> -n <span class="hljs-string">&quot;|&quot;</span><br>  <span class="hljs-keyword">done</span><br>  <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;_&quot;</span><br><span class="hljs-keyword">done</span><br><br><span class="hljs-built_in">read</span> -p <span class="hljs-string">&quot;按任意键继续&quot;</span> key<br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> &#123;1..10&#125;;<span class="hljs-keyword">do</span><br>  <span class="hljs-keyword">for</span>((j=1;j&lt;=i;j++));<span class="hljs-keyword">do</span><br>    <span class="hljs-built_in">echo</span> -n <span class="hljs-string">&quot;*&quot;</span><br>  <span class="hljs-keyword">done</span><br>  <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;&quot;</span><br><span class="hljs-keyword">done</span><br><span class="hljs-keyword">for</span>((i=10;i&gt;=1;i--));<span class="hljs-keyword">do</span><br>  <span class="hljs-keyword">for</span>((j=1;j&lt;=i;j++));<span class="hljs-keyword">do</span><br>    <span class="hljs-built_in">echo</span> -n <span class="hljs-string">&quot;*&quot;</span><br>  <span class="hljs-keyword">done</span><br>  <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;&quot;</span><br><span class="hljs-keyword">done</span><br><br></code></pre></td></tr></table></figure><h3 id="71-根据计算机当前时间-返回问候语-可以将脚本设置为开机自启"><a href="#71-根据计算机当前时间-返回问候语-可以将脚本设置为开机自启" class="headerlink" title="71: 根据计算机当前时间, 返回问候语, 可以将脚本设置为开机自启"></a>71: 根据计算机当前时间, 返回问候语, 可以将脚本设置为开机自启</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-meta">#!/bin/bash</span><br>tm=`date +%H`<br><br><span class="hljs-keyword">if</span> [ <span class="hljs-variable">$tm</span> -le 12 ];<span class="hljs-keyword">then</span><br>  msg=<span class="hljs-string">&quot;早上好&quot;</span><br><span class="hljs-keyword">elif</span> [ <span class="hljs-variable">$tm</span> -gt 12 -a <span class="hljs-variable">$tm</span> -le 18 ];<span class="hljs-keyword">then</span><br>  msg=<span class="hljs-string">&quot;中午好&quot;</span><br><span class="hljs-keyword">else</span><br>  msg=<span class="hljs-string">&quot;晚上好&quot;</span><br><span class="hljs-keyword">if</span><br><br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;当前时间是: <span class="hljs-subst">$(date +%F-%H:%M:%S)</span>&quot;</span><br><span class="hljs-built_in">echo</span> -e <span class="hljs-string">&quot;\033[34m<span class="hljs-variable">$msg</span>\033[0m&quot;</span><br><br></code></pre></td></tr></table></figure><h3 id="72-读取用户输入的账户名称-将账户名写入到数组保存"><a href="#72-读取用户输入的账户名称-将账户名写入到数组保存" class="headerlink" title="72: 读取用户输入的账户名称, 将账户名写入到数组保存"></a>72: 读取用户输入的账户名称, 将账户名写入到数组保存</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-meta">#!/bin/bash</span><br>i=0<br><span class="hljs-keyword">while</span> <span class="hljs-literal">true</span>;<span class="hljs-keyword">do</span><br>  <span class="hljs-built_in">read</span> -p <span class="hljs-string">&quot;输入用户名 保存到数组:&quot;</span> name<br>  <span class="hljs-keyword">if</span> [ <span class="hljs-variable">$name</span> == <span class="hljs-string">&quot;over&quot;</span> ];<span class="hljs-keyword">then</span><br>    <span class="hljs-built_in">break</span><br>  <span class="hljs-keyword">else</span><br>    name_arr[<span class="hljs-variable">$i</span>]=<span class="hljs-variable">$name</span><br>    <span class="hljs-built_in">let</span> i++<br>  <span class="hljs-keyword">fi</span><br><span class="hljs-keyword">done</span><br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;总账户数量为 <span class="hljs-variable">$&#123;#name_arr[*]&#125;</span>&quot;</span><br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;<span class="hljs-variable">$&#123;name_arr[*]&#125;</span>&quot;</span><br></code></pre></td></tr></table></figure><h3 id="73-判断文件或目录是否存在"><a href="#73-判断文件或目录是否存在" class="headerlink" title="73: 判断文件或目录是否存在"></a>73: 判断文件或目录是否存在</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-meta">#!/bin/bash</span><br><br><span class="hljs-built_in">read</span> -p <span class="hljs-string">&quot;输入目录或者文件:&quot;</span>  dir<br><br><span class="hljs-keyword">if</span> [ -f <span class="hljs-variable">$dir</span> ];<span class="hljs-keyword">then</span><br>  <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;该文件存在&quot;</span><br>  ls -l <span class="hljs-variable">$dir</span><br><span class="hljs-keyword">elif</span> [ -d <span class="hljs-variable">$dir</span> ];<span class="hljs-keyword">then</span><br>  <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;该目录存在&quot;</span><br>  ls -ld <span class="hljs-variable">$dir</span><br><span class="hljs-keyword">fi</span><br></code></pre></td></tr></table></figure><h3 id="74-打印各种时间格式"><a href="#74-打印各种时间格式" class="headerlink" title="74: 打印各种时间格式"></a>74: 打印各种时间格式</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-meta">#!/bin/bash</span><br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;显示星期简称(如: Sun)&quot;</span><br>date +%a<br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;显示星期全程(如: sunday)&quot;</span><br>date +%A<br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;显示月份简称(如: jan)&quot;</span><br>date +%b<br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;显示月份全称(如: january)&quot;</span><br>date +%B<br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;显示数字月份(如: 12)&quot;</span><br>date +%m<br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;显示当前分钟&quot;</span><br>date +%M<br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;显示当前数字日期&quot;</span><br>date +%d<br><span class="hljs-comment">#更多查百度吧</span><br></code></pre></td></tr></table></figure><h3 id="75-使用egrep-过滤mac地址"><a href="#75-使用egrep-过滤mac地址" class="headerlink" title="75: 使用egrep 过滤mac地址"></a>75: 使用egrep 过滤mac地址</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-meta">#!/bin/bash</span><br><br>ip a show ens33 | egrep -o <span class="hljs-string">&quot;[0-9a-fA-F]&#123;2&#125;(:[0-9a-fA-F]&#123;2&#125;)&#123;5&#125;&quot;</span><br><br></code></pre></td></tr></table></figure><h3 id="76-使用awk编写wc程序"><a href="#76-使用awk编写wc程序" class="headerlink" title="76: 使用awk编写wc程序"></a>76: 使用awk编写wc程序</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-meta">#!/bin/bash</span><br><span class="hljs-comment">#自定义变量chars 变量存储字符个数,自定义变量 words 变量存储单词个数</span><br><span class="hljs-comment">#awk 变量内置NR存储行数</span><br><span class="hljs-comment">#length()为awk内置函数, 用来统计每行的字符数量, 因为每行都会有一个隐藏的$, 所以每次统计后都+1</span><br><span class="hljs-comment">#awk程序会把文件结尾符$也统计在内,可以使用 cat -A 文件名, 查看隐藏字符</span><br>awk <span class="hljs-string">&#x27;&#123;chars+=length($0)+1;words+=NF&#125; END&#123;print NR,words,chars&#125;&#x27;</span> <span class="hljs-variable">$1</span><br><br></code></pre></td></tr></table></figure><h3 id=""><a href="#" class="headerlink" title=""></a></h3>]]></content>
      
      
      <categories>
          
          <category> shell </category>
          
      </categories>
      
      
        <tags>
            
            <tag> shell </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>费曼学习法</title>
      <link href="2022/03/15/%E8%B4%B9%E6%9B%BC%E5%AD%A6%E4%B9%A0%E6%B3%95/"/>
      <url>2022/03/15/%E8%B4%B9%E6%9B%BC%E5%AD%A6%E4%B9%A0%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<h3 id="什么是-费曼学习法"><a href="#什么是-费曼学习法" class="headerlink" title="什么是 费曼学习法"></a>什么是 费曼学习法</h3><blockquote><p> 这个学习方法出自一个著名的理论物理学家 理查德*费曼 , 所谓的“费曼学习法”简称就是 “以教促学” . <br/> 简单说就是：把你学的东西 教给别人，在这个过程中 你会更好的掌握和学习这门技能。</p></blockquote><h3 id="运用以及反馈"><a href="#运用以及反馈" class="headerlink" title="运用以及反馈"></a>运用以及反馈</h3><blockquote><p>在理想状况下， 如果你对某个领域的分支达到了“完全掌握”的程度，那么你就可以轻松的写出该领域的某个分支的“通俗性读物”如 博客 教程等等，并且能让外行人轻松的看懂。<br/> 反之,如果掌握的程度不够，可能会出现如下几种情况</p></blockquote><ul><li><code>完全不知道从何写起</code><blockquote><p>说明对这个领域还缺乏最基本的 “系统性” 了解. <br/> 建议从头学起, 吧入门读物 或者 学习教程重新看一遍</p></blockquote></li><li><code>在写通俗性读物的过程中，如博客等，会经常碰到“卡壳”</code><blockquote><p>说明你已经具备一定的系统性了解，“卡壳” 是因为你还没有完全“理顺”整个体系。<br> “卡壳”，没有理顺 也就是学习过程中某些环节的缺失，或者 对于某些环境理解不透彻，需要针对性强化这个环节</p></blockquote></li><li><code>虽然能够顺利的写出来， 但是外行人看不懂</code><blockquote><p>也就是，你还无法做到足够的“深入浅出”。<br> 如果外行看不懂你写的读物，你需要问对方，那个环节看不明白，那么这个环节就是你需要加强的环节。</p></blockquote></li></ul><h3 id="换位思考"><a href="#换位思考" class="headerlink" title="换位思考"></a>换位思考</h3><ul><li><p>为了实践这种学习方法，你需要吧自己的视角切换到“读者”视角，通过换位思考 了解自己描述的方式 或者 角度，久而久之就会强化“换位思考”的能力</p><h3 id="入门之后，如果根据分支安排自己的学习侧重点"><a href="#入门之后，如果根据分支安排自己的学习侧重点" class="headerlink" title="入门之后，如果根据分支安排自己的学习侧重点"></a>入门之后，如果根据分支安排自己的学习侧重点</h3><blockquote><p>某些技术领域比较复杂，在他的内部包含很多分支（支领域），还有一些领域，可能分支不多 但是每个分支都具有很大的深度。<br> 对于这种情况，如果想掌握全部 可能要花费大量时间和精力，根据情况可能要做出一些“取舍”。</p></blockquote></li><li><p>基础性</p><ul><li>用it行业来举例子，很多原理性的东西基本都是一成不变的，变化的只是应用层，把原理性的概念用不同的技术手段封装成了应用而已，所以他的依赖核心底层是不变的，基础原理 大于一切</li></ul></li><li><p>实用性</p><ul><li>如果某个领域，不是那么基础，但是实用性很强，那么也应该投入精力 学会并掌握，</li><li>如果在学习的时候只看实用性，而忽略了基础，表面上看 是节省了很多时间，但因为基本功的缺乏 ， 反而难以 在该领域达到足够高的level， 就是“欲速则不达”，而越是基础的东西，越又可能“跨领域”</li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> 学习方法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 费曼学习法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>configMap 使用方法</title>
      <link href="2022/03/15/configMap/"/>
      <url>2022/03/15/configMap/</url>
      
        <content type="html"><![CDATA[<h2 id="什么是configMap"><a href="#什么是configMap" class="headerlink" title="什么是configMap"></a>什么是configMap</h2><p> configmap 是将配置和应用程序分离的最佳实践, 这样可以使应用程序更好的被复用,通过不同的配置实现更加灵活的功能, 可以通过环境变量方式和volume挂载方式使用.</p><h2 id="使用configMap"><a href="#使用configMap" class="headerlink" title="使用configMap"></a>使用configMap</h2><p>  通过yaml文件创建 , 示例 : cm-appvars.yaml</p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs bash">apiVersion: v1<br>kind: ConfigMap<br>metadata:<br>  name: cm-appvars<br>data:<br>  appv1: app1var<br>  appv2: /var/data<br></code></pre></td></tr></table></figure><p>  创建configMap</p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">kubectl create -f cm-appvars.yaml <br></code></pre></td></tr></table></figure><p>通过命令行创建<br>  不使用yaml文件, 直接通过 <code>kubectl create configmap</code> 创建 可以使用参数 <code>--from-file</code> <code>--from-literal</code> 指定内容, 并且可以在一行命令中指定多个参数</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">#在目录下使用 --from-file 目录下的每个文件名 都会被创建成key 内容为 value</span><br><span class="hljs-comment">#指定文件为单文件, 文件名字为key</span><br>kubectl crate configmap appv1 --from-file=appfile<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">#--from-literal 以指定内容创建</span><br>kubectl create configmap appv1 --from-literal=appv1=app1var --from-literal=appv2=/var/data<br></code></pre></td></tr></table></figure><h2 id="获取configMap内容"><a href="#获取configMap内容" class="headerlink" title="获取configMap内容"></a>获取configMap内容</h2><p>获取方式有两种</p><ul><li>通过环境变量获取内容</li><li>通过vloume挂载的方式将configmap挂载到容器指定的内部文件或目录进行读取</li></ul><p>通过环境变量获取</p><ul><li><p>指定字段</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs bash">apiVersion: v1<br>kind: pod<br>metadata:<br>  name: test-pod<br>spec:<br>  containers:<br>  - name: <span class="hljs-built_in">test</span><br>    image: busybox<br>    <span class="hljs-built_in">command</span>: [ <span class="hljs-string">&quot;/bin/bash&quot;</span>,<span class="hljs-string">&quot;-C&quot;</span>,<span class="hljs-string">&quot;env|grep app&quot;</span> ]<br>    env:<br>    - name: appv1  <span class="hljs-comment">#定义环境变量的名字</span><br>      valueForm: <br>        configMapKeyRef:<br>          name: cm-appvars  <span class="hljs-comment">#环境变量取指来自 cm-appvars</span><br>          key: appv1   <span class="hljs-comment"># cm-appvars的key</span><br>    - name: appv2 <span class="hljs-comment">#定义环境变量名字</span><br>      valueFrom:<br>        configMapKeyRef:<br>          name: cm-appvars <span class="hljs-comment">#环境变量取指来自 cm-appvars</span><br>          key: appv2       <span class="hljs-comment"># cm-appvars的key</span><br></code></pre></td></tr></table></figure></li><li><p>envFrom 将configmap中的所有key-value 自动生成环境变量</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs bash">        apiVersion: v1<br>    kind: pod<br>    metadata:<br>      name: test-pod<br>    spec:<br>      containers:<br>      - name: <span class="hljs-built_in">test</span><br>        image: busybox<br>        <span class="hljs-built_in">command</span>: [ <span class="hljs-string">&quot;/bin/bash&quot;</span>,<span class="hljs-string">&quot;-C&quot;</span>,<span class="hljs-string">&quot;env|grep app&quot;</span> ]<br>        envFrom:<br>        - configMapRef:<br>          name: cm-appvars <span class="hljs-comment">#根据cm-appvars中的所有key-value 生成变量</span><br>    ```   <br><br>通过vloume挂载方式获取<br>  * items参数<br>   <br>    ```bash<br>    xxxxxxx<br>    spec:<br>    containres:<br>    - name: <span class="hljs-built_in">test</span><br>      image: busybox<br>      <span class="hljs-built_in">command</span>: [ <span class="hljs-string">&quot;/bin/bash&quot;</span>,<span class="hljs-string">&quot;-C&quot;</span>,<span class="hljs-string">&quot;env|grep app&quot;</span> ]<br>      volumeMount:<br>      - name: serverconfig  <span class="hljs-comment">#引用vloume的名称</span><br>        mountPath: /config  <span class="hljs-comment">#挂载到容器config下面</span><br>    volumes:<br>    - name: serverconfig  <span class="hljs-comment">#定义vloume的名称</span><br>      configMap:  <br>        name: cm-appvars <span class="hljs-comment">#引用那个map</span><br>        items:<br>        - key: appv1<br>          path: alias-appv1  <span class="hljs-comment">#将appv1 挂载为alias-appv1</span><br>        - key: appv2<br>          path: alias-appv2  <span class="hljs-comment">#将appv2 挂载为alias-appv2</span><br><br>    <span class="hljs-comment">## 会生成 alias-appv2   alias-appv2 等文件</span><br></code></pre></td></tr></table></figure></li><li><p>不指定items, 则为每一个itesm生成一个文件名为key的文件 </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs bash">  volumeMount:<br>  - name: serverconfig  <span class="hljs-comment">#引用vloume的名称</span><br>    mountPath: /config  <span class="hljs-comment">#挂载到容器config下面</span><br>volumes:<br>- name: serverconfig  <span class="hljs-comment">#定义vloume的名称</span><br>  configMap:  <br>    name: cm-appvars <span class="hljs-comment">#引用那个map</span><br><br><span class="hljs-comment">## 会生成 appv1  appv2 等文件</span><br></code></pre></td></tr></table></figure></li></ul><h2 id="使用configMap的限制条件"><a href="#使用configMap的限制条件" class="headerlink" title="使用configMap的限制条件"></a>使用configMap的限制条件</h2><ul><li>configMap必须在pod之前创建, pod才能引用它</li><li>如果pod使用envForm 来引用变量, 则无效的环境变量(比如数字开头)将会被忽略, 并在事件中被记录为 InvalidVariableNames.</li><li>configMap受命名中间影响,只有处于相同namespace下才能被引用</li><li>configMap 无法用于静态pod</li></ul>]]></content>
      
      
      <categories>
          
          <category> k8s </category>
          
      </categories>
      
      
        <tags>
            
            <tag> configMap </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>简单理解RESTful RESTapi</title>
      <link href="2022/03/15/%E7%AE%80%E5%8D%95%E7%90%86%E8%A7%A3RESTful/"/>
      <url>2022/03/15/%E7%AE%80%E5%8D%95%E7%90%86%E8%A7%A3RESTful/</url>
      
        <content type="html"><![CDATA[<h2 id="什么是REST"><a href="#什么是REST" class="headerlink" title="什么是REST"></a>什么是REST</h2><ul><li>REST – REpresentational State Transfer 直接翻译：表现层状态转移</li><li>REST 描述的是在网络中client 和 server的一种交互形式, REST 本身并没有什么实用性, 而在于 如何设计RESTful api (REST 风格的接口)</li></ul><h2 id="如何理解"><a href="#如何理解" class="headerlink" title="如何理解"></a>如何理解</h2><h3 id="用-URL-定位资源-用http-动词-POST-GET-DELETE-PUSH-DETC-来描述操作"><a href="#用-URL-定位资源-用http-动词-POST-GET-DELETE-PUSH-DETC-来描述操作" class="headerlink" title="用 URL 定位资源, 用http 动词 (POST, GET, DELETE ,PUSH DETC) 来描述操作"></a>用 URL 定位资源, 用http 动词 (POST, GET, DELETE ,PUSH DETC) 来描述操作</h3><pre><code> * 例 http://www.xxx.com/api/username  http请求方式 GET , 说明用get方式来获取用户姓名 * 例 http://www.xxx.com/api/adduser   htto请求方式 POST, 说明用POST方式来添加用户</code></pre><hr><pre><code>* 看Url就知道要什么* 看http method就知道干什么* 看http status code就知道结果如何</code></pre>]]></content>
      
      
      <categories>
          
          <category> 规范 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> REST </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>linux 面试参考</title>
      <link href="2022/03/15/linux%E9%9D%A2%E8%AF%95%E5%8F%82%E8%80%83%E9%A2%98/"/>
      <url>2022/03/15/linux%E9%9D%A2%E8%AF%95%E5%8F%82%E8%80%83%E9%A2%98/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>nginx通过x_forwarded_for实现黑白名单访问策略</title>
      <link href="2022/03/15/nginx%20%E9%80%9A%E8%BF%87x_forwarded_for%E5%AE%9E%E7%8E%B0%E9%BB%91%E7%99%BD%E5%90%8D%E5%8D%95%E8%AE%BF%E9%97%AE/"/>
      <url>2022/03/15/nginx%20%E9%80%9A%E8%BF%87x_forwarded_for%E5%AE%9E%E7%8E%B0%E9%BB%91%E7%99%BD%E5%90%8D%E5%8D%95%E8%AE%BF%E9%97%AE/</url>
      
        <content type="html"><![CDATA[<h3 id="nginx-通过负载均衡-防火墙-过来之后-remote-addr-的地址是防火墙的地址-客户端的真实地址是在-x-forwarded-for中的-这样nginx默认的-deny-和-allow-就不生效了-我们需要在每个域名中判断一个-x-forwarded-for中是否有我们要拒绝的ip地址-如果有就返回403"><a href="#nginx-通过负载均衡-防火墙-过来之后-remote-addr-的地址是防火墙的地址-客户端的真实地址是在-x-forwarded-for中的-这样nginx默认的-deny-和-allow-就不生效了-我们需要在每个域名中判断一个-x-forwarded-for中是否有我们要拒绝的ip地址-如果有就返回403" class="headerlink" title="nginx 通过负载均衡,防火墙 过来之后, remote_addr 的地址是防火墙的地址, 客户端的真实地址是在 x_forwarded_for中的, 这样nginx默认的 deny 和 allow 就不生效了, 我们需要在每个域名中判断一个 x_forwarded_for中是否有我们要拒绝的ip地址, 如果有就返回403."></a>nginx 通过负载均衡,防火墙 过来之后, remote_addr 的地址是防火墙的地址, 客户端的真实地址是在 x_forwarded_for中的, 这样nginx默认的 deny 和 allow 就不生效了, 我们需要在每个域名中判断一个 x_forwarded_for中是否有我们要拒绝的ip地址, 如果有就返回403.</h3><h3 id="定义一个map-拒绝的ip地址列表"><a href="#定义一个map-拒绝的ip地址列表" class="headerlink" title="定义一个map 拒绝的ip地址列表"></a>定义一个map 拒绝的ip地址列表</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs bash"> vim x_forwarded_for_deny.conf<br><br> map <span class="hljs-variable">$http_x_forwarded_for</span> <span class="hljs-variable">$allowed</span> &#123;<br>    default allow;<br>    <span class="hljs-comment">#~s*192.168.0.100$ deny;   # 拒绝一个IP地址</span><br>    <span class="hljs-comment">#~s*192.168.0.d+$ deny;    #  拒绝一个网段IP地址</span><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="每个域名中的location中添加如下判断"><a href="#每个域名中的location中添加如下判断" class="headerlink" title="每个域名中的location中添加如下判断"></a>每个域名中的location中添加如下判断</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs bash">server &#123;<br>    listen       80;<br>    server_name  ....;<br>    location / &#123;<br>        <span class="hljs-keyword">if</span> ( <span class="hljs-variable">$allowed</span> = <span class="hljs-string">&quot;deny&quot;</span> ) &#123; <span class="hljs-built_in">return</span> 403; &#125;<br>        proxy_pass    .....;<br>   &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> nginx </category>
          
      </categories>
      
      
        <tags>
            
            <tag> nginx </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>promethues 配置文件动态管理</title>
      <link href="2022/03/15/promethues%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E5%8A%A8%E6%80%81%E7%AE%A1%E7%90%86/"/>
      <url>2022/03/15/promethues%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E5%8A%A8%E6%80%81%E7%AE%A1%E7%90%86/</url>
      
        <content type="html"><![CDATA[<h2 id="promethues-yaml-动态加载配置文件"><a href="#promethues-yaml-动态加载配置文件" class="headerlink" title="promethues.yaml 动态加载配置文件"></a>promethues.yaml 动态加载配置文件</h2><ul><li><p>static_configs</p><ul><li><p>静态配置</p></li><li><p>static_configs 参数</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs bash"> <span class="hljs-comment"># 服务端监控_状态码404</span><br>- job_name: http_404_status<br>  metrics_path: /probe<br>  params:<br>    module: [http_404]<br>  static_configs:<br>    - targets: [<span class="hljs-string">&#x27;http://172.16.6.2:8800&#x27;</span>]<br>      labels:<br>        host: 172.16.6.2<br>        instance: wl-02-pro:admin:8800<br>    - targets: [<span class="hljs-string">&#x27;http://172.16.2.2:8299&#x27;</span>]<br>      labels:<br>        host: 172.16.2.2<br>        instance: wl-base:base:8299<br></code></pre></td></tr></table></figure></li></ul></li><li><p>file_sd_configs</p><ul><li><p>动态加载</p></li><li><p>file_sd_configs 参数</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs bash">  <span class="hljs-comment"># 服务端监控_状态码404</span><br>- job_name: http_404_status<br>  metrics_path: /probe<br>  params:<br>    module: [http_404]<br>  file_sd_configs:<br>    - files:<br>      - ./targets.json<br>      refresh_interval: 5m<br></code></pre></td></tr></table></figure></li></ul></li></ul><h2 id="curl刷新配置文件"><a href="#curl刷新配置文件" class="headerlink" title="curl刷新配置文件"></a>curl刷新配置文件</h2><ul><li><p>curl -X POST <a href="http://172.16.8.32:9090/-/reload">http://172.16.8.32:9090/-/reload</a></p></li><li><p>调用curl方法,前提Prometheus启动 加入 –web.enable-lifecycle</p></li><li><p>示例:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker run  -itd   -p 9090:9090 --name  prometheus -v /data/prometheus_config:/etc/prometheus -v /data/prometheus_rules:/prometheus_rules prom/prometheus --config.file=<span class="hljs-string">&quot;/etc/prometheus/prometheus.yml&quot;</span>  --web.enable-lifecycle<br></code></pre></td></tr></table></figure></li></ul><h2 id="json-文件示例如下"><a href="#json-文件示例如下" class="headerlink" title="json 文件示例如下"></a>json 文件示例如下</h2><pre><code><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs bash">[   <br>    &#123;<br>      <span class="hljs-string">&quot;targets&quot;</span>: [<br>        <span class="hljs-string">&quot;172.16.6.3:8294&quot;</span>,<br>        <span class="hljs-string">&quot;172.16.6.9:8294&quot;</span><br>      ],<br>      <span class="hljs-string">&quot;labels&quot;</span>: &#123;<br>        <span class="hljs-string">&quot;host&quot;</span>: <span class="hljs-string">&quot;172.16.6.3&quot;</span>,<br>        <span class="hljs-string">&quot;instance&quot;</span>: <span class="hljs-string">&quot;logis01:logistics:8294&quot;</span><br>      &#125;<br>    &#125;,<br>    &#123;<br>      <span class="hljs-string">&quot;targets&quot;</span>: [<br>        <span class="hljs-string">&quot;172.16.6.3:8294&quot;</span>,<br>        <span class="hljs-string">&quot;172.16.6.9:8294&quot;</span><br>      ],<br>      <span class="hljs-string">&quot;labels&quot;</span>: &#123;<br>        <span class="hljs-string">&quot;host&quot;</span>: <span class="hljs-string">&quot;172.16.6.3&quot;</span>,<br>        <span class="hljs-string">&quot;instance&quot;</span>: <span class="hljs-string">&quot;wl-ucenter:logistics:8294&quot;</span><br>      &#125;<br>    &#125;<br>]<br></code></pre></td></tr></table></figure></code></pre>]]></content>
      
      
      <categories>
          
          <category> Prometheus </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Prometheus </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>日志采集工具对比</title>
      <link href="2022/03/15/%E6%97%A5%E5%BF%97%E9%87%87%E9%9B%86%E5%B7%A5%E5%85%B7Logstash,Filebate,fluentd,logagent,logtil,rsyslog,syslog-ng%E5%AF%B9%E6%AF%94/"/>
      <url>2022/03/15/%E6%97%A5%E5%BF%97%E9%87%87%E9%9B%86%E5%B7%A5%E5%85%B7Logstash,Filebate,fluentd,logagent,logtil,rsyslog,syslog-ng%E5%AF%B9%E6%AF%94/</url>
      
        <content type="html"><![CDATA[<h2 id="Logstash"><a href="#Logstash" class="headerlink" title="Logstash"></a>Logstash</h2><ul><li>优势: Logstash 主要的点就是他的灵活性,这还只要因为他的插件,然后他清楚的文档和已经直白的配置格式让他可以在多种场景下应用,这样的良性循环可以让我们在网上找到很多资源,几乎可以处理任何问题.</li><li>劣势: Logstash 的致命问题是他性能和资源占用(默认堆大小为1G) , 尽管他的性能在最近几年已经有了很大的提升,但是与他的替代者相比还是要慢很多,</li></ul><h2 id="filebeat"><a href="#filebeat" class="headerlink" title="filebeat"></a>filebeat</h2><ul><li><h2 id="fluentd"><a href="#fluentd" class="headerlink" title="fluentd"></a>fluentd</h2></li></ul>]]></content>
      
      
      <categories>
          
          <category> 日志采集 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 日志采集 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>centos7 yum升级内核</title>
      <link href="2022/03/15/linux%E5%8D%87%E7%BA%A7%E5%86%85%E6%A0%B8/"/>
      <url>2022/03/15/linux%E5%8D%87%E7%BA%A7%E5%86%85%E6%A0%B8/</url>
      
        <content type="html"><![CDATA[<h4 id="编译内核的方式暂不说明"><a href="#编译内核的方式暂不说明" class="headerlink" title="编译内核的方式暂不说明"></a>编译内核的方式暂不说明</h4><ul><li><p>内核官网</p><ul><li><a href="https://www.kernel.org/">https://www.kernel.org/</a></li></ul></li><li><p>查看当前内核版本</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">uanme -sr<br></code></pre></td></tr></table></figure></li><li><p>导入key</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">rpm --import https://www.elrepo.org/RPM-GPG-KEY-elrepo.org<br></code></pre></td></tr></table></figure></li><li><p>安装epel源(对应版本)</p></li><li><p>elep官网: <a href="http://elrepo.org/tiki/tiki-index.php">http://elrepo.org/tiki/tiki-index.php</a></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">yum install https://www.elrepo.org/elrepo-release-7.el7.elrepo.noarch.rpm<br></code></pre></td></tr></table></figure></li><li><p>查看epel源中的内核版本</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">yum --disablerepo=<span class="hljs-string">&quot;*&quot;</span> --enablerepo=<span class="hljs-string">&quot;elrepo-kernel&quot;</span> list available<br></code></pre></td></tr></table></figure></li><li><p>安装内核</p><ul><li>安装最新的主线稳定内核(ml=mainline) <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">yum --enablerepo=elrepo-kernel install kernel-ml-devel kernel-ml<br></code></pre></td></tr></table></figure></li><li>安装最新的长时间维护内核(lt=lgng-term) <figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">yum <span class="hljs-attribute">--enablerepo</span>=elrepo-kernel install kernel-lt<br></code></pre></td></tr></table></figure></li></ul></li><li><p>设置GRUB 默认的内核版本</p><ul><li>修改文件<ul><li>打开并编辑<code>/etc/default/grub</code> 修改 <code>GRUB_DEFAULT=0</code> , 意思是GRUB 初始化页面的第一个内核作为默认内核 <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs bash">GRUB_TIMEOUT=5<br>GRUB_DISTRIBUTOR=<span class="hljs-string">&quot;<span class="hljs-subst">$(sed &#x27;s, release .*$,,g&#x27; /etc/system-release)</span>&quot;</span><br>GRUB_DEFAULT=0<br>GRUB_DISABLE_SUBMENU=<span class="hljs-literal">true</span><br>GRUB_TERMINAL_OUTPUT=<span class="hljs-string">&quot;console&quot;</span><br>GRUB_CMDLINE_LINUX=<span class="hljs-string">&quot;crashkernel=auto rd.lvm.lv=centos/root rd.lvm.lv=centos/swap rhgb quiet&quot;</span><br>GRUB_DISABLE_RECOVERY=<span class="hljs-string">&quot;true&quot;</span><br></code></pre></td></tr></table></figure></li><li>重新创建内核配置 <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">grub2-mkconfig -o /boot/grub2/grub.cfg<br></code></pre></td></tr></table></figure></li></ul></li><li>或者 <code>grub2-set-default 0</code> 选择内核版本顺序 默认第一个</li></ul></li><li><p>重启服务器</p><ul><li><code>reboot</code></li></ul></li><li><p>验证</p><ul><li><code>uname -r</code></li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> linux-kernel </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>centos rename 重命名用法</title>
      <link href="2022/03/15/centos%20rename%20%E7%94%A8%E6%B3%95/"/>
      <url>2022/03/15/centos%20rename%20%E7%94%A8%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<h2 id="centos-rename-重命名用法"><a href="#centos-rename-重命名用法" class="headerlink" title="centos rename 重命名用法"></a>centos rename 重命名用法</h2><h3 id="操作系统-Centos7"><a href="#操作系统-Centos7" class="headerlink" title="操作系统 Centos7"></a>操作系统 Centos7</h3><h3 id="1-rename-命令批量改文件名"><a href="#1-rename-命令批量改文件名" class="headerlink" title="1. rename 命令批量改文件名"></a>1. rename 命令批量改文件名</h3><h3 id="C版本："><a href="#C版本：" class="headerlink" title="C版本："></a>C版本：</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">rename 原字符串 新字符串 文件名<br>rename .jpg .png *  <br></code></pre></td></tr></table></figure><h3 id="2-Perl版本：支持正则表达式"><a href="#2-Perl版本：支持正则表达式" class="headerlink" title="2. Perl版本：支持正则表达式"></a>2. Perl版本：支持正则表达式</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">rename ‘s/原字符串/新字符串/’ 文件名<br>rename ‘s/$/\.bak/’ *               <span class="hljs-comment"># 把所有文件加扩展名 .bak</span><br></code></pre></td></tr></table></figure><p><strong>其中 Centos 默认是 C 版本, Ubuntu 默认是 Perl 版本，Centos 需要自己安装 Perl 版本命令是 prename</strong></p><h2 id="批量修改内容"><a href="#批量修改内容" class="headerlink" title="批量修改内容"></a>批量修改内容</h2><ul><li><p>替换当前目录下 所有fat成dev</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sed -i <span class="hljs-string">&quot;s@fat@dev@g&quot;</span> ./*<br></code></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      <categories>
          
          <category> linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 批量重命名 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LVM 操作简要</title>
      <link href="2022/03/15/LVM/"/>
      <url>2022/03/15/LVM/</url>
      
        <content type="html"><![CDATA[<h2 id="LVM-操作简要"><a href="#LVM-操作简要" class="headerlink" title="LVM 操作简要"></a>LVM 操作简要</h2><ul><li><p>lvm安装</p><ul><li>yum install lvm2</li><li>如果安装不上 先更新yum update 简历缓存 yum makecache 然后在安装</li></ul></li><li><p>磁盘分区</p><ul><li>fdisk -l 查看磁盘情况</li><li>fdisk /dev/sdx 选择要分区的磁盘</li><li>然后 n 创建新分区，输入 p 选择主分区， 回车回车 默认选择分区1 全部大小</li><li>然后 t 更改分区类型， 输入 8e ， 是linux lvm的分区类型， 可是使用 l 查看所有的分区类型</li><li>然后 w 保存 更改</li></ul></li><li><p>开始创建 pv（物理卷）</p><ul><li>pvcreate /dev/sdx 如果有多个磁盘 可以 pvcreate /dev/sd{a,b,c,d}1 ,全部创建成 pv物理磁盘</li><li>然后 使用pvs 查看pv 情况，pvdisplay 查看详细信息</li></ul></li><li><p>创建vg （卷组）</p><ul><li>vgcreate vgname(卷组的名字) /dev/sdx #要把那些磁盘设置成一个卷组</li><li>完成以后使用 vgs 查看分组情况，vgdisplay 查看详细情况</li></ul></li><li><p>创建lv （分区）</p><ul><li>lvcreate -L 100M -n lv1 vgname   # -L 指定分区大小，-n 分区名字  后面跟vg名字</li><li>然后 lvs 或者 lvdisplay 查看分区情况</li></ul></li><li><p>格式化分区 创建文件系统</p><ul><li>mkfs.xfs /dev/mapper/myvg-lv1 </li><li>lvm的分区信息会 保存在 /dev/mapper 下面 名字是vg-lv</li><li>vg的分区信息保存在的 /dev/vgname 下面</li></ul></li><li><p>挂在分区 开始使用</p><ul><li>mount /tmp/lv1 /dev/mapper/vgname-lv1</li><li>可以设置开机自启， 编辑 vim /etc/fstab 文件</li></ul></li></ul><hr><ul><li><p>扩容或缩容lv</p><ul><li>首先卸载 挂的lv分区 ， umount /tmp/lv1</li><li>lvresize -L 200M /dev/mapper/vgname-lv1   # -L 指定扩容的大小 后面跟那个分区即可</li><li>扩容之后 lvs 查看情况， 没问题重新挂载即可</li></ul></li><li><p>删除lv</p><ul><li>lvremove /dev/mapper/vgname-lv</li></ul></li><li><p>扩容pv</p><ul><li>pvresize -v /dev/vdb1  # -v pv绑定的磁盘</li></ul></li><li><p>扩容vg</p><ul><li>vgextend vgname /dev/sdx  # vgxten 后面跟要扩容的卷组 + 那个pv要扩容 即可</li></ul></li><li><p>缩容vg</p><ul><li>pvremove /dev/sdc1 移除这个磁盘上面的PE </li><li>pvs 查看是否还占有 PE</li><li>然后 vgreduce myvg /dev/sdc1  </li></ul></li></ul><hr><h2 id="场景"><a href="#场景" class="headerlink" title="场景:"></a>场景:</h2><ul><li>虚拟机热扩容磁盘20G到60G , 宿主机执行命令:  growpart /dev/xxx 1  #扩容 /dev/xxx 的第一个分区, 分区编号可以指定</li><li>扩容之后 lsblk -l 可以看到 分区已经被扩容, 这个时候pv 的大小不会变化, 文件系统也没有变化</li><li>使用 pvresize -v /dev/xxx1 pv绑定的分区,来进行重新调整pv的大小, 使用pvs 查看 调整后的容量</li><li>使用 vgs 查看 vgs大小, 这时候扩容lv , lvextend -l +524287 /dev/ucap/ucap , 也可以使用 lvextend -l +100%FREE /dev/ucap/ucap 扩容全部容量</li><li>扩容文件系统 , lv扩容之后 文件系统不会自动扩容, df -TH 可以查看, xfs 文件系统使用 xfs_growfs /dev/ucap/ucap , ext文件系统使用 resize2fs  /dev/ucap/ucap 扩容</li></ul>]]></content>
      
      
      <categories>
          
          <category> lvm </category>
          
      </categories>
      
      
        <tags>
            
            <tag> lvm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>gitlab-ansible-jenkins 安装</title>
      <link href="2022/03/15/%E8%87%AA%E5%8A%A8%E9%83%A8%E7%BD%B2/"/>
      <url>2022/03/15/%E8%87%AA%E5%8A%A8%E9%83%A8%E7%BD%B2/</url>
      
        <content type="html"><![CDATA[<h3 id="交付-版本控制-持续集成工具-部署工具-持续交付"><a href="#交付-版本控制-持续集成工具-部署工具-持续交付" class="headerlink" title="交付 + [ 版本控制 - 持续集成工具 - 部署工具 ] = 持续交付"></a>交付 + [ 版本控制 - 持续集成工具 - 部署工具 ] = 持续交付</h3><h3 id="版本控制系统"><a href="#版本控制系统" class="headerlink" title="版本控制系统"></a>版本控制系统</h3><ul><li>gitlab github</li></ul><h3 id="持续集成工具"><a href="#持续集成工具" class="headerlink" title="持续集成工具"></a>持续集成工具</h3><ul><li>Jenkins</li></ul><h3 id="部署工具"><a href="#部署工具" class="headerlink" title="部署工具"></a>部署工具</h3><ul><li>Ansible Saltstack Chef</li></ul><hr><h2 id="Gitlab"><a href="#Gitlab" class="headerlink" title="Gitlab"></a>Gitlab</h2><ul><li>Gitlab是一个开源分布式版本控制系统</li><li>开发语言 Ruby</li><li>功能: 管理项目源代码,版本控制,代码复用与查找</li></ul><h2 id="Gitlab安装"><a href="#Gitlab安装" class="headerlink" title="Gitlab安装"></a>Gitlab安装</h2><ul><li><p>依赖安装</p><ul><li>关闭firewalld 关闭selinux</li><li>安装依赖 : yum -y install policycoreutils openssh-server openssh-clients postfix</li><li>开启邮件服务: systemctl enable postfix &amp;&amp; systemctl start postfix</li></ul></li><li><p>gitlab-ce安装</p><ul><li>shell方式安装 :<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">curl -s https://packages.gitlab.com/install/repositories/gitlab/gitlab-ce/script.rpm.sh | sudo bash<br></code></pre></td></tr></table></figure></li><li>源方式安装:</br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">[gitlab-ce] name=Gitlab CE Repository<br>baseurl=https://mirrors.tuna.tsinghua.edu.cn/gitlab-ce/yum/el<span class="hljs-variable">$releasever</span>/<br>gpgcheck=0<br>enabled=1`<br></code></pre></td></tr></table></figure></li><li>yum makecache #清空软件包缓存</li><li>yum install gitlab-ce #安装</li><li>gitlab-ctl reconfigure #配置gitlab,时间稍长 看配置情况 内存小 时间越长</li><li>gitlab-ctl restart #重启gitlab</li><li>安装之后 插件配置文件在/opt/gitlab/xxx  配置文件: /etc/gitlab/gitlab.rb<h4 id="关于windows-git-Bash-Here-重新切换用户的方法"><a href="#关于windows-git-Bash-Here-重新切换用户的方法" class="headerlink" title="关于windows git Bash Here 重新切换用户的方法"></a>关于windows git Bash Here 重新切换用户的方法</h4></li><li>git config –system –unset credential.helper</li><li>上面方法不行的话删除 .gitconfig 文件中的credential 所有选项 即可解决<h3 id="安装Ansible"><a href="#安装Ansible" class="headerlink" title="安装Ansible"></a>安装Ansible</h3></li><li>安装方式有源码安装 和 yum安装 因为考虑到ansible的库有可能和别的程序的库冲突 所以选择重新安装python ,一般环境会自带python2.7 所以现在重新安装python3.6, 安装python时 编译需要安装 gcc gcc-c++ 以及 openssl* 等依赖,</li><li>python 编译命令  ./configure –prefix=/usr/local/ –with-ensurepip=install –enable-shared LDFLAGS=”-Wl,-rpath /usr/local/lib”</li><li>python安装之后 用pip安装 virtualenv (virtualenv是python的一个虚拟环境 可以虚线一个独立的环境 使各个程序独立的运行互不干扰,所以这里利用virtualenv), pip install virtualenv</li><li>然后 建立新用户 useradd deploy ,切换到新用户下面, su - deploy , 然后 建立虚拟环境, virtualenv -p /usr/local/bin/python.3.6 .py3-a2.5-env  , 这个.py3-a2.5-env 是一个新的实例 用来集成ansible /usr/local 这个是python的安装位置,</li><li>然后进入.py3-a2.5-env : git clone <a href="https://github.com/ansible/ansible.git">https://github.com/ansible/ansible.git</a> 下载ansible的源代码</li><li>加载这个环境 : source /home/deploy/.py3-a2.5-env/bin/activate   </li><li>在这个环境下面安装 ansible的依赖环境 : pip install paramiko PyYAML jinja2 (依赖必须在虚拟环境加载之后在安装)</li><li>移动ansible的源代码到 .py3-a2.5-env 下面 : mv ansible .py3-a2.5-env/</li><li>进入ansible目录 并且切换ansible版本为2.5 : git checkout stable-2.5</li><li>加载ansible : source /home/deploy/.py3-a2.5-env/ansible/hacking/env-setup -q</li><li>验证是否安装完成 : ansible –version<h3 id="Ansible-playboos的编写规则"><a href="#Ansible-playboos的编写规则" class="headerlink" title="Ansible playboos的编写规则"></a>Ansible playboos的编写规则</h3></li><li>ansible 文件目录结构<br><img src="https://cdn.jsdelivr.net/gh/natsu-ten/images/img/ansible%E7%9B%AE%E5%BD%95%E7%BB%93%E6%9E%84.jpg" alt="avatar"></li><li>ansible 变量配置说明<br><img src="https://cdn.jsdelivr.net/gh/natsu-ten/images/img/evn%E7%BB%93%E6%9E%84.jpg" alt="avatar"></li><li>任务主文件格式<br><img src="https://cdn.jsdelivr.net/gh/natsu-ten/images/img/%E4%B8%BB%E6%96%87%E4%BB%B6%E7%BB%93%E6%9E%84.jpg" alt="avatar"></li><li>入口文件结构<br><img src="https://cdn.jsdelivr.net/gh/natsu-ten/images/img/%E5%85%A5%E5%8F%A3%E6%96%87%E4%BB%B6%E7%BB%93%E6%9E%84.jpg" alt="avatar"></li><li>ssh配置<br><img src="https://cdn.jsdelivr.net/gh/natsu-ten/images/img/%E5%85%8D%E5%AF%86%E9%92%A5%E7%99%BB%E5%BD%95.jpg" alt="avatar"></li><li>执行<br><img src="https://cdn.jsdelivr.net/gh/natsu-ten/images/img/%E6%89%A7%E8%A1%8C.jpg" alt="avatar"></li></ul></li></ul><h3 id="Ansible-playbooks-常用模块"><a href="#Ansible-playbooks-常用模块" class="headerlink" title="Ansible playbooks 常用模块"></a>Ansible playbooks 常用模块</h3><ul><li><img src="https://cdn.jsdelivr.net/gh/natsu-ten/images/img/playbooks%E5%B8%B8%E7%94%A8%E6%A8%A1%E5%9D%97.jpg" alt="avatar"></li></ul><h3 id="jenkins安装"><a href="#jenkins安装" class="headerlink" title="jenkins安装"></a>jenkins安装</h3><ul><li>yum install java : 安装jave环境</li><li>sudo wget -O /etc/yum.repos.d/jenkins.repo <a href="https://pkg.jenkins.io/redhat-stable/jenkins.repo">https://pkg.jenkins.io/redhat-stable/jenkins.repo</a></li><li>sudo rpm –import <a href="https://pkg.jenkins.io/redhat-stable/jenkins.io.key">https://pkg.jenkins.io/redhat-stable/jenkins.io.key</a></li><li>yum install jenkins</li><li>安装之后 修改配置文件, vim /etcsysconfig/jenkins</li><li>修改用户名,或者更改默认端口,如果修改了用户名 还需要修改安装目录属主<ul><li>chown -R root:root /var/lib/jenkins</li><li>chown -R root:root /var/log/jenkins</li></ul></li><li>然后查看8080端口是否启动, lsof -i :8080</li><li>浏览器访问 xxxx:8080 ,首页有个文件 主机查看文件 里面的内容就是默认密码,登录即可安装成功<h3 id="Freestyle-Job-和-Pipeline-Job的区别"><a href="#Freestyle-Job-和-Pipeline-Job的区别" class="headerlink" title="Freestyle Job 和 Pipeline Job的区别"></a>Freestyle Job 和 Pipeline Job的区别</h3></li><li>Freestyle Job<ul><li>需要在页面添加模块配置项与参数完成配置</li><li>每一个job仅能实现一个开发功能</li><li>无法将配置代码化,不利于job配置迁移与版本控制</li><li>逻辑相对简单, 无须额外学习成本</li></ul></li><li>Pipline job<ul><li>所有模块 参数配置都可以体现为一个pipline脚本</li><li>可以定义多个stage构造一个管道工作集</li><li>所有配置代码化 方便job配置迁移与版本控制</li><li>需要pipline脚本语法脚本</li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> 安装教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CI/CD </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>php四种排序算法</title>
      <link href="2022/03/15/php%E5%9B%9B%E7%A7%8D%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/"/>
      <url>2022/03/15/php%E5%9B%9B%E7%A7%8D%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<h2 id="冒泡排序"><a href="#冒泡排序" class="headerlink" title="冒泡排序"></a>冒泡排序</h2><ul><li>思路: 就像冒泡一样, 每次从数组里面冒出一个最大的排在最后面;</li><li>例如:<blockquote><p>1,3,2 //第一次就是3<br>1,2,3 //第二次就是2</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-variable">$arr</span> = [1,4,6,8,9,2,3,5,7,10,17,11];<br><span class="hljs-keyword">function</span> getpaopao(<span class="hljs-variable">$arr</span>)&#123;<br>  <span class="hljs-variable">$len</span> = count(<span class="hljs-variable">$arr</span>);<br>  <span class="hljs-keyword">for</span>(<span class="hljs-variable">$i</span>=1;<span class="hljs-variable">$i</span>&lt;<span class="hljs-variable">$len</span>;<span class="hljs-variable">$i</span>++&gt;)&#123;<br>     <span class="hljs-keyword">for</span>(<span class="hljs-variable">$k</span>=0;<span class="hljs-variable">$k</span>&lt;<span class="hljs-variable">$len</span>;<span class="hljs-variable">$k</span>++&gt;)&#123;<br>       <span class="hljs-keyword">if</span>(<span class="hljs-variable">$arr</span>[<span class="hljs-variable">$k</span>] &gt; <span class="hljs-variable">$arr</span>[<span class="hljs-variable">$k</span>+1])&#123;<br>         <span class="hljs-variable">$tmp</span> = <span class="hljs-variable">$arr</span>[<span class="hljs-variable">$k</span>+1];<br>         <span class="hljs-variable">$arr</span>[<span class="hljs-variable">$k</span>+1] = <span class="hljs-variable">$arr</span>[<span class="hljs-variable">$k</span>];<br>         <span class="hljs-variable">$arr</span>[<span class="hljs-variable">$k</span>] = <span class="hljs-variable">$tmp</span>;<br>       &#125;<br>     &#125;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="选择排序"><a href="#选择排序" class="headerlink" title="选择排序"></a>选择排序</h2></li><li>思路: 每次选择一个元素,放在指定的位置<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-variable">$arr</span> = [1,4,6,8,9,2,3,5,7,10,17,11];<br><span class="hljs-keyword">function</span> select(<span class="hljs-variable">$arr</span>)&#123;<br>  <span class="hljs-variable">$len</span> = conut(<span class="hljs-variable">$arr</span>);<br>  <span class="hljs-keyword">for</span>(<span class="hljs-variable">$i</span>=1;<span class="hljs-variable">$i</span>&lt;<span class="hljs-variable">$len</span>;<span class="hljs-variable">$i</span>++)&#123;<br>    <span class="hljs-variable">$p</span> = <span class="hljs-variable">$i</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-variable">$j</span>=1;<span class="hljs-variable">$j</span>&lt;<span class="hljs-variable">$len</span>;<span class="hljs-variable">$j</span>++)&#123;<br>      <span class="hljs-keyword">if</span>(<span class="hljs-variable">$arr</span>[<span class="hljs-variable">$p</span>] &gt; <span class="hljs-variable">$arr</span>[<span class="hljs-variable">$j</span>])&#123;<br>        <span class="hljs-variable">$p</span> = <span class="hljs-variable">$j</span>;<br>      &#125;<br>    &#125;<br>    <span class="hljs-keyword">if</span>(<span class="hljs-variable">$p</span>!=<span class="hljs-variable">$j</span>)&#123;<br>      <span class="hljs-variable">$tmp</span> = <span class="hljs-variable">$arr</span>[<span class="hljs-variable">$p</span>];<br>      <span class="hljs-variable">$arr</span>[<span class="hljs-variable">$p</span>] = <span class="hljs-variable">$arr</span>[<span class="hljs-variable">$i</span>];<br>      <span class="hljs-variable">$arr</span>[<span class="hljs-variable">$i</span>] = <span class="hljs-variable">$tmp</span>;<br>    &#125;<br>  &#125;<br>  <span class="hljs-built_in">return</span> <span class="hljs-variable">$arr</span>;<br>&#125;<br>var_dump(select(<span class="hljs-variable">$arr</span>));<br></code></pre></td></tr></table></figure><h2 id="插入排序"><a href="#插入排序" class="headerlink" title="插入排序"></a>插入排序</h2></li><li>思路: 将要排序的元素插入到假定排序好的数组的指定位置<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-variable">$arr</span> = [1,4,6,8,9,2,3,5,7,10,17,11];<br><span class="hljs-keyword">function</span> sore(<span class="hljs-variable">$arr</span>)&#123;<br>  <span class="hljs-variable">$len</span> = count(<span class="hljs-variable">$arr</span>);<br>  <span class="hljs-keyword">for</span>(<span class="hljs-variable">$i</span>=1;<span class="hljs-variable">$i</span>&lt;<span class="hljs-variable">$len</span>;<span class="hljs-variable">$i</span>++)&#123;<br>    <span class="hljs-variable">$tmp</span> = <span class="hljs-variable">$arr</span>[<span class="hljs-variable">$i</span>];<br>    <span class="hljs-keyword">for</span>(<span class="hljs-variable">$j</span>=<span class="hljs-variable">$i</span>-1;<span class="hljs-variable">$j</span>&gt;=0;<span class="hljs-variable">$j</span>--)&#123;<br>      <span class="hljs-keyword">if</span>(<span class="hljs-variable">$tmp</span> &lt; <span class="hljs-variable">$arr</span>[<span class="hljs-variable">$j</span>])&#123;<br>        <span class="hljs-variable">$arr</span>[<span class="hljs-variable">$j</span>+1] = <span class="hljs-variable">$arr</span>[<span class="hljs-variable">$j</span>];<br>        <span class="hljs-variable">$arr</span>[<span class="hljs-variable">$j</span>] = <span class="hljs-variable">$tmp</span>;<br>      &#125;<span class="hljs-keyword">else</span>&#123;<br>        <span class="hljs-built_in">break</span>;<br>      &#125;<br>    &#125;<br>  &#125;<br>  reture <span class="hljs-variable">$arr</span>;<br>&#125;<br>var_dump(sore(<span class="hljs-variable">$arr</span>));<br></code></pre></td></tr></table></figure><h2 id="快速排序"><a href="#快速排序" class="headerlink" title="快速排序"></a>快速排序</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-variable">$arr</span> = [1,4,6,8,9,2,3,5,7,10,17,11];<br><span class="hljs-keyword">function</span> quick_sort(<span class="hljs-variable">$arr</span>)&#123;<br>  //判断参数是否是一个数组<br>  <span class="hljs-keyword">if</span>(!is_array(<span class="hljs-variable">$arr</span>)) <span class="hljs-built_in">return</span> <span class="hljs-literal">false</span>;<br>  //递归出口: 数组长度为1,直接返回数组<br>  <span class="hljs-variable">$length</span>=count(<span class="hljs-variable">$arr</span>);<br>  <span class="hljs-keyword">if</span>(<span class="hljs-variable">$length</span>&lt;=1&gt;) <span class="hljs-built_in">return</span> <span class="hljs-variable">$arr</span><br>  //数组元素有多个,则定义两个空数组<br>  <span class="hljs-variable">$left</span>=<span class="hljs-variable">$right</span>=array();<br>  //使用<span class="hljs-keyword">for</span>循环进行遍历,把第一个元素当作比较的对象<br>  <span class="hljs-keyword">for</span>(<span class="hljs-variable">$i</span>=1;<span class="hljs-variable">$i</span>&lt;<span class="hljs-variable">$length</span>;<span class="hljs-variable">$i</span>++)&#123;<br>    //判断当前元素的大小<br>    <span class="hljs-keyword">if</span>(<span class="hljs-variable">$arr</span>[<span class="hljs-variable">$i</span>]&lt;<span class="hljs-variable">$arr</span>[0])&#123;<br>      <span class="hljs-variable">$left</span>[]=<span class="hljs-variable">$arr</span>[<span class="hljs-variable">$i</span>];<br>    &#125;<span class="hljs-keyword">else</span>&#123;<br>      <span class="hljs-variable">$right</span>[]=<span class="hljs-variable">$arr</span>[<span class="hljs-variable">$i</span>];<br>    &#125;<br>  &#125;<br>  //递归调用<br>  <span class="hljs-variable">$left</span>=quick_sort(<span class="hljs-variable">$left</span>);<br>  <span class="hljs-variable">$right</span>=quick_sort(<span class="hljs-variable">$right</span>);<br>  //将所有结果合并<br>  reture array_merge(<span class="hljs-variable">$left</span>,array(<span class="hljs-variable">$arr</span>[0]),<span class="hljs-variable">$right</span>);<br>&#125;<br>var_dump(quick_sort(<span class="hljs-variable">$arr</span>));<br></code></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      <categories>
          
          <category> 排序 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PHP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mac OS下 MAMP与系统自带php共存</title>
      <link href="2022/03/15/Mac%20OS%E4%B8%8B%20MAMP%E4%B8%8E%E7%B3%BB%E7%BB%9F%E8%87%AA%E5%B8%A6php%E5%85%B1%E5%AD%98/"/>
      <url>2022/03/15/Mac%20OS%E4%B8%8B%20MAMP%E4%B8%8E%E7%B3%BB%E7%BB%9F%E8%87%AA%E5%B8%A6php%E5%85%B1%E5%AD%98/</url>
      
        <content type="html"><![CDATA[<h2 id="准备知识"><a href="#准备知识" class="headerlink" title="准备知识"></a>准备知识</h2><blockquote><ul><li>/etc/profile | /etc/profile.d/*.sh: 为全局交互式登录的shell提供默认配置</li><li>/etc/bashrc | /etc/bashrc.d/*.sh: 为全局非交互式登录的shell提供默认配置  </li><li>~/.bash_profile: 为交互式登录的当前用户提供默认shell配置</li><li>~/.bashrc: 为非交互式登录的当前用户提供默认shell配置</li></ul></blockquote><blockquote><ul><li>查看命令路径: <code>which</code></li><li>查看当前环境变量: <code>echo $PATH</code></li></ul></blockquote><h2 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h2><p> <strong>删除系统自带的php可能会有意想向不到的问题,所以更改默认php路径到mamp路径下即可</strong></p><h2 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h2><ol><li>修改当前用户的 <code>.bash_profile</code></li><li>添加或修改  <figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs vim">PATH=<span class="hljs-string">&quot;/Applications/MAMP/bin/php/php版本/bin:$PATH&quot;</span><br>export PATH  <br></code></pre></td></tr></table></figure></li><li><code>source .bash_profile</code> 使配置文件重新生效</li></ol><h2 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h2><p><code>which php</code> , 查看是否修改成功</p>]]></content>
      
      
      <categories>
          
          <category> 安装教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Mac </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>linux下挂载win目录</title>
      <link href="2022/03/15/linux%E4%B8%8B%E6%8C%82%E8%BD%BDwin%E7%9B%AE%E5%BD%95/"/>
      <url>2022/03/15/linux%E4%B8%8B%E6%8C%82%E8%BD%BDwin%E7%9B%AE%E5%BD%95/</url>
      
        <content type="html"><![CDATA[<h2 id="windows设置共享目录"><a href="#windows设置共享目录" class="headerlink" title="windows设置共享目录"></a>windows设置共享目录</h2><ul><li><p><strong><code>共享注意事项</code></strong></p><ol><li><code>网络共享中心 | [启用]公用文件共享 | [关闭]密码保护的共享</code></li><li><code>关闭windows防火墙</code></li><li><code>如果用来宾账户,记得启动guest用户</code></li><li><code>建议添加 Everyone 用户</code></li></ol><h2 id="linux下使用mount命令挂载即可"><a href="#linux下使用mount命令挂载即可" class="headerlink" title="linux下使用mount命令挂载即可"></a>linux下使用mount命令挂载即可</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ mount -t cifs -o username=username(用户名),password=（密码）//192.168.1.1/f /tmp/win<br><br>$ 例: mount -t cifs -o username=Everyone //192.168.249.75/ftp /tmp/win<br></code></pre></td></tr></table></figure></li><li><p><code>/tmp/win</code> 目标目录 需提前创建 <code>mkidr -p /tmp/win</code></p></li><li><p>//192.168.249.75/ftp ftp: 共享的目录</p></li><li><p>-t : 指定挂载文件类型</p></li><li><p>cifs : 挂载通用网际文件系统</p><h2 id="取消挂载"><a href="#取消挂载" class="headerlink" title="取消挂载"></a>取消挂载</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">umount /tmp/win<br></code></pre></td></tr></table></figure></li></ul><h2 id="samba方式"><a href="#samba方式" class="headerlink" title="samba方式"></a>samba方式</h2><ul><li>smbclient命令不存在,使用 <code>yum  provides smbclient</code> 查看smbclient在那个包, yum install samba-client安装即可</li><li>smbclient -L 192.168.1.1 -U username 查看当前ip下这个用户的共享目录；</li><li>也可以使用samba链接命令： smblicent //192.168.2.2/f -U username</li></ul>]]></content>
      
      
      <categories>
          
          <category> linux-win </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ubuntu下安装微信开发者工具</title>
      <link href="2022/03/15/Ubuntu%20%E4%B8%8B%E5%AE%89%E8%A3%85%E5%BE%AE%E4%BF%A1%E5%BC%80%E5%8F%91%E8%80%85%E5%B7%A5%E5%85%B7/"/>
      <url>2022/03/15/Ubuntu%20%E4%B8%8B%E5%AE%89%E8%A3%85%E5%BE%AE%E4%BF%A1%E5%BC%80%E5%8F%91%E8%80%85%E5%B7%A5%E5%85%B7/</url>
      
        <content type="html"><![CDATA[<h2 id="linux下安装微信开发者工具"><a href="#linux下安装微信开发者工具" class="headerlink" title="linux下安装微信开发者工具"></a>linux下安装微信开发者工具</h2><h2 id="下载nwjs-sdk"><a href="#下载nwjs-sdk" class="headerlink" title="下载nwjs-sdk"></a>下载nwjs-sdk</h2><ul><li>网址: <a href="http://dl.nwjs.io/">http://dl.nwjs.io</a><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ wget -c http://dl.nwjs.io/v0.15.3(版本号)/nwjs-sdk-v0.15.3-linux-x64.tar.gz<br></code></pre></td></tr></table></figure><h2 id="解压nwjs-sdk"><a href="#解压nwjs-sdk" class="headerlink" title="解压nwjs-sdk"></a>解压nwjs-sdk</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ tar -zxvf nwjs-sdk-v0.15.3-linux-x64.tar.gz<br></code></pre></td></tr></table></figure></li></ul><ol><li><p><strong>然后复制windows微信开发者工具安装目录下面 <code>package.nw</code> 目录里面的文件到 刚刚解压的目录下面(nwjs-sdk-v0.15.3-linux-x64)</strong></p></li><li><p><strong>然后运行nw即可!</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ ./nw<br></code></pre></td></tr></table></figure></li></ol>]]></content>
      
      
      <categories>
          
          <category> 安装教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ubuntu </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HEXO + live2D 添加看板娘</title>
      <link href="2022/03/15/hexo+live2D/"/>
      <url>2022/03/15/hexo+live2D/</url>
      
        <content type="html"><![CDATA[<h2 id="添加live2d看板娘"><a href="#添加live2d看板娘" class="headerlink" title="添加live2d看板娘"></a>添加live2d看板娘</h2><ul><li><p><strong>插件:</strong> hexo-helper-live2d</p></li><li><p><strong>github仓库:</strong> <a href="https://github.com/EYHN/hexo-helper-live2d">https://github.com/EYHN/hexo-helper-live2d</a></p></li><li><p><strong>模型库:</strong> <a href="https://pan.baidu.com/s/1IQxiyalER1RchJmR0En6pQ">https://pan.baidu.com/s/1IQxiyalER1RchJmR0En6pQ</a>  提取码：ev1w  (失效的话 留言联系博主补档)</p></li><li><p><strong>效果图:</strong><br><img src="https://cdn.jsdelivr.net/gh/natsu-ten/images/img/live2d.png" alt="效果图"></p></li></ul><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><ul><li><p>安装插件: </p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-string">npm</span> <span class="hljs-string">install</span> <span class="hljs-string">--save</span> <span class="hljs-string">hexo-helper-live2d</span><br></code></pre></td></tr></table></figure><p>安装完成后,可以看到根目录的<code>package.json</code>文件里面,已经有了<code>hexo-helper-live2d</code>依赖</p></li><li><p>安装模型</p><ul><li><p>模型下载到上面的百度网盘,下载后解压如下图<br><img src="https://cdn.jsdelivr.net/gh/natsu-ten/images/img/live2d_dir.png"></p></li><li><p>打开其中一个目录,到model.1024目录里面可以看到模型分解图,选择自己喜欢的模型,例如<code>79type_1402/destroy</code> , 然后复制到hexo跟目录下面的 <code>live2d_models</code> 这个文件夹里面,没有新建一个即可.</p></li><li><p>修改<code>model.json</code>文件为 <code>dirname.model.json</code> 例如:destroy目录下面的<code>model.json</code> , 修改为 <code>destroy.model.json</code></p></li></ul></li><li><p>配置</p><ul><li>在hexo根目录下面的配置文件<code>_config.yml</code>添加如下内容:<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">## live2d</span><br>live2d:<br>  <span class="hljs-built_in">enable</span>: <span class="hljs-literal">true</span> <span class="hljs-comment"># 是否开启live2d</span><br>  scriptFrom: <span class="hljs-built_in">local</span> <span class="hljs-comment"># 脚本从本地引入</span><br>  pluginRootPath: live2dw/ <span class="hljs-comment"># 插件在站点上的根目录(相对路径)</span><br>  pluginJsPath: lib/ <span class="hljs-comment"># 脚本文件相对与插件根目录路径</span><br>  pluginModelPath: assets/ <span class="hljs-comment"># 模型文件相对与插件根目录路径</span><br>  tagMode: <span class="hljs-literal">false</span> <span class="hljs-comment"># 标签模式, 是否仅替换 live2d tag标签而非插入到所有页面中</span><br>  debug: <span class="hljs-literal">false</span> <span class="hljs-comment"># 调试, 是否在控制台输出日志</span><br>  model:<br>      use: destroy <span class="hljs-comment"># 填写放进live2d_models文件夹中的模型文件夹名字</span><br>      scale: 1 <span class="hljs-comment"># canvas 模型与canvas的缩放</span><br>  display:<br>      width: 320 <span class="hljs-comment"># 宽度</span><br>      height: 650 <span class="hljs-comment"># 高度</span><br>      position: left <span class="hljs-comment"># 显示位置</span><br>      hOffset: 0 <span class="hljs-comment">#水平偏移</span><br>      vOffset: -20 <span class="hljs-comment">#垂直偏移</span><br>  mobile:<br>      show: <span class="hljs-literal">true</span> <span class="hljs-comment"># 手机端是否显示</span><br>      scale: 0.5 <span class="hljs-comment"># 移动设备上的缩放</span><br></code></pre></td></tr></table></figure></li></ul></li><li><p>即可看到效果</p></li></ul><h2 id="补充"><a href="#补充" class="headerlink" title="补充"></a>补充</h2><ul><li>添加动画一般都会比较耗内存，请自行选择是否添加。</li><li>魔改版：在网页中添加Live2D看板娘，基于next主题。<ul><li>github：<a href="https://github.com/stevenjoezhang/live2d-widget">https://github.com/stevenjoezhang/live2d-widget</a></li></ul></li><li>魔改2：<a href="https://www.fghrsh.net/post/123.html">https://www.fghrsh.net/post/123.html</a></li></ul><h2 id="取消看板娘"><a href="#取消看板娘" class="headerlink" title="取消看板娘"></a>取消看板娘</h2><ul><li>将配置中的enable设置成false即可。</li></ul><h2 id="卸载看板娘"><a href="#卸载看板娘" class="headerlink" title="卸载看板娘"></a>卸载看板娘</h2><ul><li>卸载live2d插件：<code>npm uninstall hexo-helper-live2d</code></li><li>删除<code>live2d_models</code>目录</li><li>删除<code>_config.yml</code>下的配置信息即可。</li></ul><p>【参考】<a href="https://blog.lete114.top/article/6d70fe9c.html">https://blog.lete114.top/article/6d70fe9c.html</a></p><p>【参考】<a href="https://blog.csdn.net/weixin_43868299/article/details/108949274">https://blog.csdn.net/weixin_43868299/article/details/108949274</a></p>]]></content>
      
      
      <categories>
          
          <category> hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ACM + Confd 管理配置文件</title>
      <link href="2022/03/15/ACM+Confd%20%E7%AE%A1%E7%90%86%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6/"/>
      <url>2022/03/15/ACM+Confd%20%E7%AE%A1%E7%90%86%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6/</url>
      
        <content type="html"><![CDATA[<h2 id="ACM-confd-管理配置文件"><a href="#ACM-confd-管理配置文件" class="headerlink" title="ACM + confd 管理配置文件"></a>ACM + confd 管理配置文件</h2><blockquote><p>confd 是一款开源的配置管理工具， 通过将存储于etcd，redis zookeeper 等后端存储系统的数据于配置模板结合起来使用，可实现保持配置处于最新状态的目的， 现在将阿里云的 ACM 作为后端，配合confd 实现无侵入式 的配置，实现 自动推送 监听等功能！</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/natsu-ten/images/img/confd+ACM.jpeg" alt="ACM结果图"></p><h3 id="ACM配置"><a href="#ACM配置" class="headerlink" title="ACM配置"></a>ACM配置</h3><p><img src="https://cdn.jsdelivr.net/gh/natsu-ten/images/img/ACM.png" alt="ACM"></p><ul><li><p>配置列表</p><ul><li>命名空间<ul><li>每个命名空间相当于一个大的分组,拥有自己的<code>&quot;命名空间ID&quot;</code> , 启动服务的时候需要指定链接的命名空间</li></ul></li><li>Endpoint<ul><li>服务访问的地址</li></ul></li><li>AccessKey/SecretKey<ul><li>登录需要的key</li></ul></li><li>创建配置<ul><li>Data ID<ul><li>Data ID在一个Group下是唯一的。相当于 一个单独的应用id</li></ul></li><li>Group<ul><li> 配置分组,全局唯一, <code>启动服务时需要指定分组</code></li></ul></li><li>配置内容和格式 根据格式自行选择</li><li>其余功能,看字面意思即可理解</li></ul></li></ul><h3 id="confd-安装"><a href="#confd-安装" class="headerlink" title="confd 安装"></a>confd 安装</h3></li></ul><ol><li><p>confd 的构建依赖于 Go 1.10 或更高版本。</p></li><li><p>创建docker容器,并进入容器,下载源码包</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">mkdir -p <span class="hljs-variable">$GOPATH</span>/src/github.com/kelseyhightower <br><span class="hljs-built_in">cd</span> <span class="hljs-variable">$GOPATH</span>/src/github.com/kelseyhightower <br>wget https://github.com/nacos-group/nacos-confd/archive/v0.19.2.tar.gz<br></code></pre></td></tr></table></figure></li><li><p>解压下载的 confd 源码。并重命名为 confd</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">tar -xvf v0.19.2.tar.gz<br>mv nacos-confd-0.19.2 confd<br></code></pre></td></tr></table></figure></li><li><p>编译</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cd</span> confd<br>make<br>-------<br>如果编译报错用 : mkdir -p bin; go build -o bin/confd .<br></code></pre></td></tr></table></figure></li><li><p>编译好之后,复制 二进制文件 到想要运行的目录即可</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">mv bin/confd /etc/confd<br></code></pre></td></tr></table></figure></li><li><p>confd  –verion 查看是否成功 </p></li><li><p><strong><code>confd 官方文档: https://github.com/kelseyhightower/confd/tree/master/docs</code></strong></p></li></ol><h3 id="confd配合ACM配置"><a href="#confd配合ACM配置" class="headerlink" title="confd配合ACM配置"></a>confd配合ACM配置</h3><ol><li><p>创建 confd 所需的目录用来存放模板资源配置文件和模板文件。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">mkdir -p /etc/confd/&#123;conf.d,templates&#125;<br></code></pre></td></tr></table></figure></li><li><p>在 conf.d 目录下创建 TOML 格式的 confd 模板资源配置文件。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">vim /etc/confd/conf.d/tomcat-admin.toml<br></code></pre></td></tr></table></figure><ul><li>配置参数<ul><li>src 参数指定 confd 模板文件</li><li>dest 参数指定生成的配置文件</li><li>keys 参数指定将模板渲染成配置文件所需的配置内容</li><li>mode 文件权限</li><li>reload_cmd 运行重启命令, 可以运行自定义的脚本  </li><li>check_cmd 同上</li><li><code>模板见下面示例</code></li></ul></li></ul></li><li><p>在 templates 目录下创建 confd 模板文件。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">vim /etc/confd/templates/tomcat-admin.tmpl<br></code></pre></td></tr></table></figure><p>在该模板文件中添加以下内容。其含义为通过 getv 从 ACM 获取 Data ID 为 tomcat-admin 的配置内容</p><blockquote><p>说明 在模板中必须将 ACM 的 Data ID 中的 .  转换为 / 格式，即以斜线（/）代替句点（.）并在开头增加一个斜线。</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">value = &#123;&#123;getv <span class="hljs-string">&quot;/tomcat-admin&quot;</span>&#125;&#125;<br></code></pre></td></tr></table></figure></li></ol><p>4 启动confd</p><ul><li><blockquote><p>说明 请将代码中的 {endpoint}、{namespace}、{accessKey}、{secretKey} 分别替换为 ACM 控制台上命名空间详情对话框内的 End Point、命名空间 ID、AccessKey、SecretKey。</p></blockquote></li><li><pre><code class="bash">confd -backend nacos -endpoint &#123;endpoint&#125;:8080 -namespace &#123;namespace&#125; -accessKey &#123;accessKey&#125; -secretKey &#123;secretKey&#125;<figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs dts">  * 查看<span class="hljs-meta-keyword">/usr/</span>loca<span class="hljs-meta-keyword">/tomcat-admini/</span>conf/server.xml 目录下有没有生成 dataid 里面配置的内容<br><br><br><span class="hljs-meta">## 开启confd监听</span><br>如果按照上述方法操作，confd 生成一次配置文件后就会退出。只要在 confd 启动命令中添加 -watch 参数即可监听后端系统（在本示例中为 ACM）的配置变更，一旦配置内容发生变化，confd 就会重新生成配置文件。<br>* 以监听模式启动<br>  ```bash<br>  confd -watch -backend nacos -<span class="hljs-class">endpoint </span>&#123;endpoint&#125;:<span class="hljs-number">8080</span> -<span class="hljs-class">namespace </span>&#123;namespace&#125; -<span class="hljs-class">accessKey </span>&#123;accessKey&#125; -<span class="hljs-class">secretKey </span>&#123;secretKey&#125;<br></code></pre></td></tr></table></figure></code></pre></li></ul><hr><h2 id="配置内容参考"><a href="#配置内容参考" class="headerlink" title="配置内容参考"></a>配置内容参考</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-meta">#!/bin/bash</span><br><br><span class="hljs-comment">## config param</span><br>endpoint=addr-sz-internal.edas.aliyun.com<br>namespace=acee06c8-xxxxx-xxxxxxxxxx-xxxxxxxxxxxx<br>accessKey=LTxxxxxxxxxxxxxx<br>secretKey=Kxxxxxxxxxxxxxx<br><span class="hljs-comment">#dataId=myapp.database.url</span><br>group=tomcat<br><br><span class="hljs-function"><span class="hljs-title">start</span></span> () &#123;<br>    <span class="hljs-comment">#以tomcat用户运行并监听confd</span><br>    nohup sudo -u tomcat /etc/confd/bin/confd -watch -backend nacos -endpoint <span class="hljs-variable">$endpoint</span>:8080 -namespace <span class="hljs-variable">$namespace</span> -group <span class="hljs-variable">$group</span> -accessKey <span class="hljs-variable">$accessKey</span> -secretKey <span class="hljs-variable">$secretKey</span> &gt;/dev/null 2&gt;&amp;1 &amp;<br>    <span class="hljs-keyword">if</span> [[ $? == 0 ]];<span class="hljs-keyword">then</span><br>      <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;启动成功&quot;</span><br>    <span class="hljs-keyword">fi</span><br>&#125;<br><br><span class="hljs-function"><span class="hljs-title">stop</span></span> () &#123;<br>    killall confd<br>    <span class="hljs-keyword">if</span> [[ $? == 0 ]];<span class="hljs-keyword">then</span><br>      <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;停止成功&quot;</span><br>    <span class="hljs-keyword">fi</span><br>&#125;<br><br><span class="hljs-function"><span class="hljs-title">restart</span></span> ()&#123;<br>    stop<br>    start<br>&#125;<br><br><span class="hljs-keyword">case</span> <span class="hljs-string">&quot;<span class="hljs-variable">$1</span>&quot;</span> <span class="hljs-keyword">in</span><br>start)<br>    start<br>;;<br>stop)<br>    stop<br>;;<br>restart)<br>    restart<br>;;<br>*)<br>    <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;参数:start|stop|restart&quot;</span><br><span class="hljs-keyword">esac</span><br><br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs bash">[template]<br>src = <span class="hljs-string">&quot;tomcat-admin.tmpl&quot;</span><br>dest = <span class="hljs-string">&quot;/usr/local/tomcat-admin/conf/server.xml&quot;</span><br>mode = <span class="hljs-string">&quot;0775&quot;</span><br>keys = [<br><span class="hljs-string">&quot;/tomcat-admin&quot;</span>,<br>]<br>reload_cmd = <span class="hljs-string">&quot;/etc/confd/dos2unix.sh /usr/local/tomcat-admin/conf/server.xml&quot;</span><br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-meta">#! /bin/bash</span><br>dos2unix -q <span class="hljs-variable">$1</span><br></code></pre></td></tr></table></figure><p><code>发现问题:  ACM配置管理编辑器,换行符是windows编码格式, 在linux里面用vim打开 会发现^M </code></p><p><code>解决办法:  dos2unix -q file   转换为inux编码格式, 可以将脚本写到 reload_cmd 里面, 如 reload_cmd = dos2nuix.sh fiel</code></p>]]></content>
      
      
      <categories>
          
          <category> 安装教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ACM - CONFD </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>bash中文速查表</title>
      <link href="2022/03/15/bash%E4%B8%AD%E6%96%87%E9%80%9F%E6%9F%A5%E8%A1%A8/"/>
      <url>2022/03/15/bash%E4%B8%AD%E6%96%87%E9%80%9F%E6%9F%A5%E8%A1%A8/</url>
      
        <content type="html"><![CDATA[<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br><span class="line">426</span><br><span class="line">427</span><br><span class="line">428</span><br><span class="line">429</span><br><span class="line">430</span><br><span class="line">431</span><br><span class="line">432</span><br><span class="line">433</span><br><span class="line">434</span><br><span class="line">435</span><br><span class="line">436</span><br><span class="line">437</span><br><span class="line">438</span><br><span class="line">439</span><br><span class="line">440</span><br><span class="line">441</span><br><span class="line">442</span><br><span class="line">443</span><br><span class="line">444</span><br><span class="line">445</span><br><span class="line">446</span><br><span class="line">447</span><br><span class="line">448</span><br><span class="line">449</span><br><span class="line">450</span><br><span class="line">451</span><br><span class="line">452</span><br><span class="line">453</span><br><span class="line">454</span><br><span class="line">455</span><br><span class="line">456</span><br><span class="line">457</span><br><span class="line">458</span><br><span class="line">459</span><br><span class="line">460</span><br><span class="line">461</span><br><span class="line">462</span><br><span class="line">463</span><br><span class="line">464</span><br><span class="line">465</span><br><span class="line">466</span><br><span class="line">467</span><br><span class="line">468</span><br><span class="line">469</span><br><span class="line">470</span><br><span class="line">471</span><br><span class="line">472</span><br><span class="line">473</span><br><span class="line">474</span><br><span class="line">475</span><br><span class="line">476</span><br><span class="line">477</span><br><span class="line">478</span><br><span class="line">479</span><br><span class="line">480</span><br><span class="line">481</span><br><span class="line">482</span><br><span class="line">483</span><br><span class="line">484</span><br><span class="line">485</span><br><span class="line">486</span><br><span class="line">487</span><br><span class="line">488</span><br><span class="line">489</span><br><span class="line">490</span><br><span class="line">491</span><br><span class="line">492</span><br><span class="line">493</span><br><span class="line">494</span><br><span class="line">495</span><br><span class="line">496</span><br><span class="line">497</span><br><span class="line">498</span><br><span class="line">499</span><br><span class="line">500</span><br><span class="line">501</span><br><span class="line">502</span><br><span class="line">503</span><br><span class="line">504</span><br><span class="line">505</span><br><span class="line">506</span><br><span class="line">507</span><br><span class="line">508</span><br><span class="line">509</span><br><span class="line">510</span><br><span class="line">511</span><br><span class="line">512</span><br><span class="line">513</span><br><span class="line">514</span><br><span class="line">515</span><br><span class="line">516</span><br><span class="line">517</span><br><span class="line">518</span><br><span class="line">519</span><br><span class="line">520</span><br><span class="line">521</span><br><span class="line">522</span><br><span class="line">523</span><br><span class="line">524</span><br><span class="line">525</span><br><span class="line">526</span><br><span class="line">527</span><br><span class="line">528</span><br><span class="line">529</span><br><span class="line">530</span><br><span class="line">531</span><br><span class="line">532</span><br><span class="line">533</span><br><span class="line">534</span><br><span class="line">535</span><br><span class="line">536</span><br><span class="line">537</span><br><span class="line">538</span><br><span class="line">539</span><br><span class="line">540</span><br><span class="line">541</span><br><span class="line">542</span><br><span class="line">543</span><br><span class="line">544</span><br><span class="line">545</span><br><span class="line">546</span><br><span class="line">547</span><br><span class="line">548</span><br><span class="line">549</span><br><span class="line">550</span><br><span class="line">551</span><br><span class="line">552</span><br><span class="line">553</span><br><span class="line">554</span><br><span class="line">555</span><br><span class="line">556</span><br><span class="line">557</span><br><span class="line">558</span><br><span class="line">559</span><br><span class="line">560</span><br><span class="line">561</span><br><span class="line">562</span><br><span class="line">563</span><br><span class="line">564</span><br><span class="line">565</span><br><span class="line">566</span><br><span class="line">567</span><br><span class="line">568</span><br><span class="line">569</span><br><span class="line">570</span><br><span class="line">571</span><br><span class="line">572</span><br><span class="line">573</span><br><span class="line">574</span><br><span class="line">575</span><br><span class="line">576</span><br><span class="line">577</span><br><span class="line">578</span><br><span class="line">579</span><br><span class="line">580</span><br><span class="line">581</span><br><span class="line">582</span><br><span class="line">583</span><br><span class="line">584</span><br><span class="line">585</span><br><span class="line">586</span><br><span class="line">587</span><br><span class="line">588</span><br><span class="line">589</span><br><span class="line">590</span><br><span class="line">591</span><br><span class="line">592</span><br><span class="line">593</span><br><span class="line">594</span><br><span class="line">595</span><br><span class="line">596</span><br><span class="line">597</span><br><span class="line">598</span><br><span class="line">599</span><br><span class="line">600</span><br><span class="line">601</span><br><span class="line">602</span><br><span class="line">603</span><br><span class="line">604</span><br><span class="line">605</span><br><span class="line">606</span><br><span class="line">607</span><br><span class="line">608</span><br><span class="line">609</span><br><span class="line">610</span><br><span class="line">611</span><br><span class="line">612</span><br><span class="line">613</span><br><span class="line">614</span><br><span class="line">615</span><br><span class="line">616</span><br><span class="line">617</span><br><span class="line">618</span><br><span class="line">619</span><br><span class="line">620</span><br><span class="line">621</span><br><span class="line">622</span><br><span class="line">623</span><br><span class="line">624</span><br><span class="line">625</span><br><span class="line">626</span><br><span class="line">627</span><br><span class="line">628</span><br><span class="line">629</span><br><span class="line">630</span><br><span class="line">631</span><br><span class="line">632</span><br><span class="line">633</span><br><span class="line">634</span><br><span class="line">635</span><br><span class="line">636</span><br><span class="line">637</span><br><span class="line">638</span><br><span class="line">639</span><br><span class="line">640</span><br><span class="line">641</span><br><span class="line">642</span><br><span class="line">643</span><br><span class="line">644</span><br><span class="line">645</span><br><span class="line">646</span><br><span class="line">647</span><br><span class="line">648</span><br><span class="line">649</span><br><span class="line">650</span><br><span class="line">651</span><br><span class="line">652</span><br><span class="line">653</span><br><span class="line">654</span><br><span class="line">655</span><br><span class="line">656</span><br><span class="line">657</span><br><span class="line">658</span><br><span class="line">659</span><br><span class="line">660</span><br><span class="line">661</span><br><span class="line">662</span><br><span class="line">663</span><br><span class="line">664</span><br><span class="line">665</span><br><span class="line">666</span><br><span class="line">667</span><br><span class="line">668</span><br><span class="line">669</span><br><span class="line">670</span><br><span class="line">671</span><br><span class="line">672</span><br><span class="line">673</span><br><span class="line">674</span><br><span class="line">675</span><br><span class="line">676</span><br><span class="line">677</span><br><span class="line">678</span><br><span class="line">679</span><br><span class="line">680</span><br><span class="line">681</span><br><span class="line">682</span><br><span class="line">683</span><br><span class="line">684</span><br><span class="line">685</span><br><span class="line">686</span><br><span class="line">687</span><br><span class="line">688</span><br><span class="line">689</span><br><span class="line">690</span><br><span class="line">691</span><br><span class="line">692</span><br><span class="line">693</span><br><span class="line">694</span><br><span class="line">695</span><br><span class="line">696</span><br><span class="line">697</span><br><span class="line">698</span><br><span class="line">699</span><br><span class="line">700</span><br><span class="line">701</span><br><span class="line">702</span><br><span class="line">703</span><br><span class="line">704</span><br><span class="line">705</span><br><span class="line">706</span><br><span class="line">707</span><br><span class="line">708</span><br><span class="line">709</span><br><span class="line">710</span><br><span class="line">711</span><br><span class="line">712</span><br><span class="line">713</span><br><span class="line">714</span><br><span class="line">715</span><br><span class="line">716</span><br><span class="line">717</span><br><span class="line">718</span><br><span class="line">719</span><br><span class="line">720</span><br><span class="line">721</span><br><span class="line">722</span><br><span class="line">723</span><br><span class="line">724</span><br><span class="line">725</span><br><span class="line">726</span><br><span class="line">727</span><br><span class="line">728</span><br><span class="line">729</span><br><span class="line">730</span><br><span class="line">731</span><br><span class="line">732</span><br><span class="line">733</span><br><span class="line">734</span><br><span class="line">735</span><br><span class="line">736</span><br><span class="line">737</span><br><span class="line">738</span><br><span class="line">739</span><br><span class="line">740</span><br><span class="line">741</span><br><span class="line">742</span><br><span class="line">743</span><br><span class="line">744</span><br><span class="line">745</span><br><span class="line">746</span><br><span class="line">747</span><br><span class="line">748</span><br><span class="line">749</span><br><span class="line">750</span><br><span class="line">751</span><br><span class="line">752</span><br><span class="line">753</span><br><span class="line">754</span><br><span class="line">755</span><br><span class="line">756</span><br><span class="line">757</span><br><span class="line">758</span><br><span class="line">759</span><br><span class="line">760</span><br><span class="line">761</span><br><span class="line">762</span><br><span class="line">763</span><br><span class="line">764</span><br><span class="line">765</span><br><span class="line">766</span><br><span class="line">767</span><br><span class="line">768</span><br><span class="line">769</span><br><span class="line">770</span><br><span class="line">771</span><br><span class="line">772</span><br><span class="line">773</span><br><span class="line">774</span><br><span class="line">775</span><br><span class="line">776</span><br><span class="line">777</span><br><span class="line">778</span><br><span class="line">779</span><br><span class="line">780</span><br><span class="line">781</span><br><span class="line">782</span><br><span class="line">783</span><br><span class="line">784</span><br><span class="line">785</span><br><span class="line">786</span><br><span class="line">787</span><br><span class="line">788</span><br><span class="line">789</span><br><span class="line">790</span><br><span class="line">791</span><br><span class="line">792</span><br><span class="line">793</span><br><span class="line">794</span><br><span class="line">795</span><br><span class="line">796</span><br><span class="line">797</span><br><span class="line">798</span><br><span class="line">799</span><br><span class="line">800</span><br><span class="line">801</span><br><span class="line">802</span><br><span class="line">803</span><br><span class="line">804</span><br><span class="line">805</span><br><span class="line">806</span><br><span class="line">807</span><br><span class="line">808</span><br><span class="line">809</span><br><span class="line">810</span><br><span class="line">811</span><br><span class="line">812</span><br><span class="line">813</span><br><span class="line">814</span><br><span class="line">815</span><br><span class="line">816</span><br><span class="line">817</span><br><span class="line">818</span><br><span class="line">819</span><br><span class="line">820</span><br><span class="line">821</span><br><span class="line">822</span><br><span class="line">823</span><br><span class="line">824</span><br><span class="line">825</span><br><span class="line">826</span><br><span class="line">827</span><br><span class="line">828</span><br><span class="line">829</span><br><span class="line">830</span><br><span class="line">831</span><br><span class="line">832</span><br><span class="line">833</span><br><span class="line">834</span><br><span class="line">835</span><br><span class="line">836</span><br><span class="line">837</span><br><span class="line">838</span><br><span class="line">839</span><br><span class="line">840</span><br><span class="line">841</span><br><span class="line">842</span><br><span class="line">843</span><br><span class="line">844</span><br><span class="line">845</span><br><span class="line">846</span><br><span class="line">847</span><br><span class="line">848</span><br><span class="line">849</span><br><span class="line">850</span><br><span class="line">851</span><br><span class="line">852</span><br><span class="line">853</span><br><span class="line">854</span><br><span class="line">855</span><br><span class="line">856</span><br><span class="line">857</span><br><span class="line">858</span><br><span class="line">859</span><br><span class="line">860</span><br><span class="line">861</span><br><span class="line">862</span><br><span class="line">863</span><br><span class="line">864</span><br><span class="line">865</span><br><span class="line">866</span><br><span class="line">867</span><br><span class="line">868</span><br><span class="line">869</span><br><span class="line">870</span><br><span class="line">871</span><br><span class="line">872</span><br><span class="line">873</span><br><span class="line">874</span><br><span class="line">875</span><br><span class="line">876</span><br><span class="line">877</span><br><span class="line">878</span><br><span class="line">879</span><br><span class="line">880</span><br><span class="line">881</span><br><span class="line">882</span><br><span class="line">883</span><br><span class="line">884</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">##############################################################################</span><br><span class="hljs-comment"># BASH CHEATSHEET (中文速查表)  -  by skywind (created on 2018/02/14)</span><br><span class="hljs-comment"># Version: 47, Last Modified: 2019/09/24 17:58</span><br><span class="hljs-comment"># https://github.com/skywind3000/awesome-cheatsheets</span><br><span class="hljs-comment">##############################################################################</span><br><br><br><span class="hljs-comment">##############################################################################</span><br><span class="hljs-comment"># 常用快捷键（默认使用 Emacs 键位）</span><br><span class="hljs-comment">##############################################################################</span><br><br>CTRL+A              <span class="hljs-comment"># 移动到行首，同 &lt;Home&gt;</span><br>CTRL+B              <span class="hljs-comment"># 向后移动，同 &lt;Left&gt;</span><br>CTRL+C              <span class="hljs-comment"># 结束当前命令</span><br>CTRL+D              <span class="hljs-comment"># 删除光标前的字符，同 &lt;Delete&gt; ，或者没有内容时，退出会话</span><br>CTRL+E              <span class="hljs-comment"># 移动到行末，同 &lt;End&gt;</span><br>CTRL+F              <span class="hljs-comment"># 向前移动，同 &lt;Right&gt;</span><br>CTRL+G              <span class="hljs-comment"># 退出当前编辑（比如正在 CTRL+R 搜索历史时）</span><br>CTRL+H              <span class="hljs-comment"># 删除光标左边的字符，同 &lt;Backspace&gt;</span><br>CTRL+K              <span class="hljs-comment"># 删除光标位置到行末的内容</span><br>CTRL+L              <span class="hljs-comment"># 清屏并重新显示</span><br>CTRL+N              <span class="hljs-comment"># 移动到命令历史的下一行，同 &lt;Down&gt;</span><br>CTRL+O              <span class="hljs-comment"># 类似回车，但是会显示下一行历史</span><br>CTRL+P              <span class="hljs-comment"># 移动到命令历史的上一行，同 &lt;Up&gt;</span><br>CTRL+R              <span class="hljs-comment"># 历史命令反向搜索，使用 CTRL+G 退出搜索</span><br>CTRL+S              <span class="hljs-comment"># 历史命令正向搜索，使用 CTRL+G 退出搜索</span><br>CTRL+T              <span class="hljs-comment"># 交换前后两个字符</span><br>CTRL+U              <span class="hljs-comment"># 删除字符到行首</span><br>CTRL+V              <span class="hljs-comment"># 输入字符字面量，先按 CTRL+V 再按任意键</span><br>CTRL+W              <span class="hljs-comment"># 删除光标左边的一个单词</span><br>CTRL+X              <span class="hljs-comment"># 列出可能的补全</span><br>CTRL+Y              <span class="hljs-comment"># 粘贴前面 CTRL+u/k/w 删除过的内容</span><br>CTRL+Z              <span class="hljs-comment"># 暂停前台进程返回 bash，需要时可用 fg 将其切换回前台</span><br>CTRL+_              <span class="hljs-comment"># 撤销（undo），有的终端将 CTRL+_ 映射为 CTRL+/ 或 CTRL+7</span><br><br>ALT+b               <span class="hljs-comment"># 向后（左边）移动一个单词</span><br>ALT+d               <span class="hljs-comment"># 删除光标后（右边）一个单词</span><br>ALT+f               <span class="hljs-comment"># 向前（右边）移动一个单词</span><br>ALT+t               <span class="hljs-comment"># 交换字符</span><br>ALT+BACKSPACE       <span class="hljs-comment"># 删除光标前面一个单词，类似 CTRL+W，但不影响剪贴板</span><br><br>CTRL+X CTRL+X       <span class="hljs-comment"># 连续按两次 CTRL+X，光标在当前位置和行首来回跳转 </span><br>CTRL+X CTRL+E       <span class="hljs-comment"># 用你指定的编辑器，编辑当前命令</span><br><br><br><span class="hljs-comment">##############################################################################</span><br><span class="hljs-comment"># BASH 基本操作</span><br><span class="hljs-comment">##############################################################################</span><br><br><span class="hljs-built_in">exit</span>                <span class="hljs-comment"># 退出当前登陆</span><br>env                 <span class="hljs-comment"># 显示环境变量</span><br><span class="hljs-built_in">echo</span> <span class="hljs-variable">$SHELL</span>         <span class="hljs-comment"># 显示你在使用什么 SHELL</span><br><br>bash                <span class="hljs-comment"># 使用 bash，用 exit 返回</span><br><span class="hljs-built_in">which</span> bash          <span class="hljs-comment"># 搜索 $PATH，查找哪个程序对应命令 bash</span><br>whereis bash        <span class="hljs-comment"># 搜索可执行，头文件和帮助信息的位置，使用系统内建数据库</span><br>whatis bash         <span class="hljs-comment"># 查看某个命令的解释，一句话告诉你这是干什么的</span><br><br>clear               <span class="hljs-comment"># 清初屏幕内容</span><br>reset               <span class="hljs-comment"># 重置终端（当你不小心 cat 了一个二进制，终端状态乱掉时使用）</span><br><br><br><span class="hljs-comment">##############################################################################</span><br><span class="hljs-comment"># 目录操作</span><br><span class="hljs-comment">##############################################################################</span><br><br><span class="hljs-built_in">cd</span>                  <span class="hljs-comment"># 返回自己 $HOME 目录</span><br><span class="hljs-built_in">cd</span> &#123;dirname&#125;        <span class="hljs-comment"># 进入目录</span><br><span class="hljs-built_in">pwd</span>                 <span class="hljs-comment"># 显示当前所在目录</span><br>mkdir &#123;dirname&#125;     <span class="hljs-comment"># 创建目录</span><br>mkdir -p &#123;dirname&#125;  <span class="hljs-comment"># 递归创建目录</span><br><span class="hljs-built_in">pushd</span> &#123;dirname&#125;     <span class="hljs-comment"># 目录压栈并进入新目录</span><br><span class="hljs-built_in">popd</span>                <span class="hljs-comment"># 弹出并进入栈顶的目录</span><br><span class="hljs-built_in">dirs</span> -v             <span class="hljs-comment"># 列出当前目录栈</span><br><span class="hljs-built_in">cd</span> -                <span class="hljs-comment"># 回到之前的目录</span><br><span class="hljs-built_in">cd</span> -&#123;N&#125;             <span class="hljs-comment"># 切换到目录栈中的第 N个目录，比如 cd -2 将切换到第二个</span><br><br><br><span class="hljs-comment">##############################################################################</span><br><span class="hljs-comment"># 文件操作</span><br><span class="hljs-comment">##############################################################################</span><br><br>ls                  <span class="hljs-comment"># 显示当前目录内容，后面可接目录名：ls &#123;dir&#125; 显示指定目录</span><br>ls -l               <span class="hljs-comment"># 列表方式显示目录内容，包括文件日期，大小，权限等信息</span><br>ls -1               <span class="hljs-comment"># 列表方式显示目录内容，只显示文件名称，减号后面是数字 1</span><br>ls -a               <span class="hljs-comment"># 显示所有文件和目录，包括隐藏文件（.开头的文件/目录名）</span><br>ln -s &#123;fn&#125; &#123;link&#125;   <span class="hljs-comment"># 给指定文件创建一个软链接</span><br>cp &#123;src&#125; &#123;dest&#125;     <span class="hljs-comment"># 拷贝文件，cp -r dir1 dir2 可以递归拷贝（目录）</span><br>rm &#123;fn&#125;             <span class="hljs-comment"># 删除文件，rm -r 递归删除目录，rm -f 强制删除</span><br>mv &#123;src&#125; &#123;dest&#125;     <span class="hljs-comment"># 移动文件，如果 dest 是目录，则移动，是文件名则覆盖</span><br>touch &#123;fn&#125;          <span class="hljs-comment"># 创建或者更新一下制定文件</span><br>cat &#123;fn&#125;            <span class="hljs-comment"># 输出文件原始内容</span><br>any_cmd &gt; &#123;fn&#125;      <span class="hljs-comment"># 执行任意命令并将标准输出重定向到指定文件</span><br>more &#123;fn&#125;           <span class="hljs-comment"># 逐屏显示某文件内容，空格翻页，q 退出</span><br>less &#123;fn&#125;           <span class="hljs-comment"># 更高级点的 more，更多操作，q 退出</span><br>head &#123;fn&#125;           <span class="hljs-comment"># 显示文件头部数行，可用 head -3 abc.txt 显示头三行</span><br>tail &#123;fn&#125;           <span class="hljs-comment"># 显示文件尾部数行，可用 tail -3 abc.txt 显示尾部三行</span><br>tail -f &#123;fn&#125;        <span class="hljs-comment"># 持续显示文件尾部数据，可用于监控日志</span><br>nano &#123;fn&#125;           <span class="hljs-comment"># 使用 nano 编辑器编辑文件</span><br>vim &#123;fn&#125;            <span class="hljs-comment"># 使用 vim 编辑文件</span><br>diff &#123;f1&#125; &#123;f2&#125;      <span class="hljs-comment"># 比较两个文件的内容</span><br>wc &#123;fn&#125;             <span class="hljs-comment"># 统计文件有多少行，多少个单词</span><br>chmod 644 &#123;fn&#125;      <span class="hljs-comment"># 修改文件权限为 644，可以接 -R 对目录循环改权限</span><br>chgrp group &#123;fn&#125;    <span class="hljs-comment"># 修改文件所属的用户组</span><br>chown user1 &#123;fn&#125;    <span class="hljs-comment"># 修改文件所有人为 user1, chown user1:group1 fn 可以修改组</span><br>file &#123;fn&#125;           <span class="hljs-comment"># 检测文件的类型和编码</span><br>basename &#123;fn&#125;       <span class="hljs-comment"># 查看文件的名字（不包括路径）</span><br>dirname &#123;fn&#125;        <span class="hljs-comment"># 查看文件的路径（不包括名字）</span><br>grep &#123;pat&#125; &#123;fn&#125;     <span class="hljs-comment"># 在文件中查找出现过 pat 的内容</span><br>grep -r &#123;pat&#125; .     <span class="hljs-comment"># 在当前目录下递归查找所有出现过 pat 的文件内容</span><br><span class="hljs-built_in">stat</span> &#123;fn&#125;           <span class="hljs-comment"># 显示文件的详细信息</span><br><br><br><span class="hljs-comment">##############################################################################</span><br><span class="hljs-comment"># 用户管理</span><br><span class="hljs-comment">##############################################################################</span><br><br>whoami              <span class="hljs-comment"># 显示我的用户名</span><br>who                 <span class="hljs-comment"># 显示已登陆用户信息，w / who / users 内容略有不同</span><br>w                   <span class="hljs-comment"># 显示已登陆用户信息，w / who / users 内容略有不同</span><br>users               <span class="hljs-comment"># 显示已登陆用户信息，w / who / users 内容略有不同</span><br>passwd              <span class="hljs-comment"># 修改密码，passwd &#123;user&#125; 可以用于 root 修改别人密码</span><br>finger &#123;user&#125;       <span class="hljs-comment"># 显示某用户信息，包括 id, 名字, 登陆状态等</span><br>adduser &#123;user&#125;      <span class="hljs-comment"># 添加用户</span><br>deluser &#123;user&#125;      <span class="hljs-comment"># 删除用户</span><br>w                   <span class="hljs-comment"># 查看谁在线</span><br>su                  <span class="hljs-comment"># 切换到 root 用户</span><br>su -                <span class="hljs-comment"># 切换到 root 用户并登陆（执行登陆脚本）</span><br>su &#123;user&#125;           <span class="hljs-comment"># 切换到某用户</span><br>su -&#123;user&#125;          <span class="hljs-comment"># 切换到某用户并登陆（执行登陆脚本）</span><br>id &#123;user&#125;           <span class="hljs-comment"># 查看用户的 uid，gid 以及所属其他用户组</span><br>id -u &#123;user&#125;        <span class="hljs-comment"># 打印用户 uid</span><br>id -g &#123;user&#125;        <span class="hljs-comment"># 打印用户 gid</span><br>write &#123;user&#125;        <span class="hljs-comment"># 向某用户发送一句消息</span><br>last                <span class="hljs-comment"># 显示最近用户登陆列表</span><br>last &#123;user&#125;         <span class="hljs-comment"># 显示登陆记录</span><br>lastb               <span class="hljs-comment"># 显示失败登陆记录</span><br>lastlog             <span class="hljs-comment"># 显示所有用户的最近登陆记录</span><br>sudo &#123;<span class="hljs-built_in">command</span>&#125;      <span class="hljs-comment"># 以 root 权限执行某命令</span><br><br><br><span class="hljs-comment">##############################################################################</span><br><span class="hljs-comment"># 进程管理</span><br><span class="hljs-comment">##############################################################################</span><br><br>ps                        <span class="hljs-comment"># 查看当前会话进程</span><br>ps ax                     <span class="hljs-comment"># 查看所有进程，类似 ps -e</span><br>ps aux                    <span class="hljs-comment"># 查看所有进程详细信息，类似 ps -ef</span><br>ps auxww                  <span class="hljs-comment"># 查看所有进程，并且显示进程的完整启动命令</span><br>ps -u &#123;user&#125;              <span class="hljs-comment"># 查看某用户进程</span><br>ps axjf                   <span class="hljs-comment"># 列出进程树</span><br>ps xjf -u &#123;user&#125;          <span class="hljs-comment"># 列出某用户的进程树</span><br>ps -eo pid,user,<span class="hljs-built_in">command</span>   <span class="hljs-comment"># 按用户指定的格式查看进程</span><br>ps aux | grep httpd       <span class="hljs-comment"># 查看名为 httpd 的所有进程</span><br>ps --ppid &#123;pid&#125;           <span class="hljs-comment"># 查看父进程为 pid 的所有进程</span><br>pstree                    <span class="hljs-comment"># 树形列出所有进程，pstree 默认一般不带，需安装</span><br>pstree &#123;user&#125;             <span class="hljs-comment"># 进程树列出某用户的进程</span><br>pstree -u                 <span class="hljs-comment"># 树形列出所有进程以及所属用户</span><br>pgrep &#123;procname&#125;          <span class="hljs-comment"># 搜索名字匹配的进程的 pid，比如 pgrep apache2</span><br><br><span class="hljs-built_in">kill</span> &#123;pid&#125;                <span class="hljs-comment"># 结束进程</span><br><span class="hljs-built_in">kill</span> -9 &#123;pid&#125;             <span class="hljs-comment"># 强制结束进程，9/SIGKILL 是强制不可捕获结束信号</span><br><span class="hljs-built_in">kill</span> -KILL &#123;pid&#125;          <span class="hljs-comment"># 强制执行进程，kill -9 的另外一种写法</span><br><span class="hljs-built_in">kill</span> -l                   <span class="hljs-comment"># 查看所有信号</span><br><span class="hljs-built_in">kill</span> -l TERM              <span class="hljs-comment"># 查看 TERM 信号的编号</span><br>killall &#123;procname&#125;        <span class="hljs-comment"># 按名称结束所有进程</span><br>pkill &#123;procname&#125;          <span class="hljs-comment"># 按名称结束进程，除名称外还可以有其他参数</span><br><br>top                       <span class="hljs-comment"># 查看最活跃的进程</span><br>top -u &#123;user&#125;             <span class="hljs-comment"># 查看某用户最活跃的进程</span><br><br>any_command &amp;             <span class="hljs-comment"># 在后台运行某命令，也可用 CTRL+Z 将当前进程挂到后台</span><br><span class="hljs-built_in">jobs</span>                      <span class="hljs-comment"># 查看所有后台进程（jobs）</span><br><span class="hljs-built_in">bg</span>                        <span class="hljs-comment"># 查看后台进程，并切换过去</span><br><span class="hljs-built_in">fg</span>                        <span class="hljs-comment"># 切换后台进程到前台</span><br><span class="hljs-built_in">fg</span> &#123;job&#125;                  <span class="hljs-comment"># 切换特定后台进程到前台</span><br><br><span class="hljs-built_in">trap</span> cmd sig1 sig2        <span class="hljs-comment"># 在脚本中设置信号处理命令</span><br><span class="hljs-built_in">trap</span> <span class="hljs-string">&quot;&quot;</span> sig1 sig2         <span class="hljs-comment"># 在脚本中屏蔽某信号</span><br><span class="hljs-built_in">trap</span> - sig1 sig2          <span class="hljs-comment"># 恢复默认信号处理行为</span><br><br>nohup &#123;<span class="hljs-built_in">command</span>&#125;           <span class="hljs-comment"># 长期运行某程序，在你退出登陆都保持它运行</span><br>nohup &#123;<span class="hljs-built_in">command</span>&#125; &amp;         <span class="hljs-comment"># 在后台长期运行某程序</span><br><span class="hljs-built_in">disown</span> &#123;PID|JID&#125;          <span class="hljs-comment"># 将进程从后台任务列表（jobs）移除</span><br><br><span class="hljs-built_in">wait</span>                      <span class="hljs-comment"># 等待所有后台进程任务结束</span><br><br><br><span class="hljs-comment">##############################################################################</span><br><span class="hljs-comment"># 常用命令：SSH / 系统信息 / 网络</span><br><span class="hljs-comment">##############################################################################</span><br><br>ssh user@host             <span class="hljs-comment"># 以用户 user 登陆到远程主机 host</span><br>ssh -p &#123;port&#125; user@host   <span class="hljs-comment"># 指定端口登陆主机</span><br>ssh-copy-id user@host     <span class="hljs-comment"># 拷贝你的 ssh key 到远程主机，避免重复输入密码</span><br>scp &#123;fn&#125; user@host:path   <span class="hljs-comment"># 拷贝文件到远程主机</span><br>scp user@host:path dest   <span class="hljs-comment"># 从远程主机拷贝文件回来</span><br>scp -P &#123;port&#125; ...         <span class="hljs-comment"># 指定端口远程拷贝文件</span><br><br>uname -a                  <span class="hljs-comment"># 查看内核版本等信息</span><br>man &#123;<span class="hljs-built_in">help</span>&#125;                <span class="hljs-comment"># 查看帮助</span><br>man -k &#123;keyword&#125;          <span class="hljs-comment"># 查看哪些帮助文档里包含了该关键字</span><br>info &#123;<span class="hljs-built_in">help</span>&#125;               <span class="hljs-comment"># 查看 info pages，比 man 更强的帮助系统</span><br>uptime                    <span class="hljs-comment"># 查看系统启动时间</span><br>date                      <span class="hljs-comment"># 显示日期</span><br>cal                       <span class="hljs-comment"># 显示日历</span><br>vmstat                    <span class="hljs-comment"># 显示内存和 CPU 使用情况</span><br>vmstat 10                 <span class="hljs-comment"># 每 10 秒打印一行内存和 CPU情况，CTRL+C 退出</span><br>free                      <span class="hljs-comment"># 显示内存和交换区使用情况</span><br>df                        <span class="hljs-comment"># 显示磁盘使用情况</span><br>du                        <span class="hljs-comment"># 显示当前目录占用，du . --max-depth=2 可以指定深度</span><br>uname                     <span class="hljs-comment"># 显示系统版本号</span><br>hostname                  <span class="hljs-comment"># 显示主机名称</span><br>showkey -a                <span class="hljs-comment"># 查看终端发送的按键编码</span><br><br>ping &#123;host&#125;               <span class="hljs-comment"># ping 远程主机并显示结果，CTRL+C 退出</span><br>ping -c N &#123;host&#125;          <span class="hljs-comment"># ping 远程主机 N 次</span><br>traceroute &#123;host&#125;         <span class="hljs-comment"># 侦测路由连通情况</span><br>mtr &#123;host&#125;                <span class="hljs-comment"># 高级版本 traceroute</span><br>host &#123;domain&#125;             <span class="hljs-comment"># DNS 查询，&#123;domain&#125; 前面可加 -a 查看详细信息</span><br>whois &#123;domain&#125;            <span class="hljs-comment"># 取得域名 whois 信息</span><br>dig &#123;domain&#125;              <span class="hljs-comment"># 取得域名 dns 信息</span><br>route -n                  <span class="hljs-comment"># 查看路由表</span><br>netstat -a                <span class="hljs-comment"># 列出所有端口</span><br>netstat -an               <span class="hljs-comment"># 查看所有连接信息，不解析域名</span><br>netstat -anp              <span class="hljs-comment"># 查看所有连接信息，包含进程信息（需要 sudo）</span><br>netstat -l                <span class="hljs-comment"># 查看所有监听的端口</span><br>netstat -t                <span class="hljs-comment"># 查看所有 TCP 链接</span><br>netstat -lntu             <span class="hljs-comment"># 显示所有正在监听的 TCP 和 UDP 信息</span><br>netstat -lntup            <span class="hljs-comment"># 显示所有正在监听的 socket 及进程信息</span><br>netstat -i                <span class="hljs-comment"># 显示网卡信息</span><br>netstat -rn               <span class="hljs-comment"># 显示当前系统路由表，同 route -n</span><br>ss -an                    <span class="hljs-comment"># 比 netstat -an 更快速更详细</span><br>ss -s                     <span class="hljs-comment"># 统计 TCP 的 established, wait 等</span><br><br>wget &#123;url&#125;                <span class="hljs-comment"># 下载文件，可加 --no-check-certificate 忽略 ssl 验证</span><br>wget -qO- &#123;url&#125;           <span class="hljs-comment"># 下载文件并输出到标准输出（不保存）</span><br>curl -sL &#123;url&#125;            <span class="hljs-comment"># 同 wget -qO- &#123;url&#125; 没有 wget 的时候使用</span><br><br>sz &#123;file&#125;                 <span class="hljs-comment"># 发送文件到终端，zmodem 协议</span><br>rz                        <span class="hljs-comment"># 接收终端发送过来的文件</span><br><br><br><span class="hljs-comment">##############################################################################</span><br><span class="hljs-comment"># 变量操作</span><br><span class="hljs-comment">##############################################################################</span><br><br>varname=value             <span class="hljs-comment"># 定义变量</span><br>varname=value <span class="hljs-built_in">command</span>     <span class="hljs-comment"># 定义子进程变量并执行子进程</span><br><span class="hljs-built_in">echo</span> <span class="hljs-variable">$varname</span>             <span class="hljs-comment"># 查看变量内容</span><br><span class="hljs-built_in">echo</span> $$                   <span class="hljs-comment"># 查看当前 shell 的进程号</span><br><span class="hljs-built_in">echo</span> $!                   <span class="hljs-comment"># 查看最近调用的后台任务进程号</span><br><span class="hljs-built_in">echo</span> $?                   <span class="hljs-comment"># 查看最近一条命令的返回码</span><br><span class="hljs-built_in">export</span> VARNAME=value      <span class="hljs-comment"># 设置环境变量（将会影响到子进程）</span><br><br>array[0]=valA             <span class="hljs-comment"># 定义数组</span><br>array[1]=valB<br>array[2]=valC<br>array=([0]=valA [1]=valB [2]=valC)   <span class="hljs-comment"># 另一种方式</span><br>array=(valA valB valC)               <span class="hljs-comment"># 另一种方式</span><br><br><span class="hljs-variable">$&#123;array[i]&#125;</span>               <span class="hljs-comment"># 取得数组中的元素</span><br><span class="hljs-variable">$&#123;#array[@]&#125;</span>              <span class="hljs-comment"># 取得数组的长度</span><br><span class="hljs-variable">$&#123;#array[i]&#125;</span>              <span class="hljs-comment"># 取得数组中某个变量的长度</span><br><br><span class="hljs-built_in">declare</span> -a                <span class="hljs-comment"># 查看所有数组</span><br><span class="hljs-built_in">declare</span> -f                <span class="hljs-comment"># 查看所有函数</span><br><span class="hljs-built_in">declare</span> -F                <span class="hljs-comment"># 查看所有函数，仅显示函数名</span><br><span class="hljs-built_in">declare</span> -i                <span class="hljs-comment"># 查看所有整数</span><br><span class="hljs-built_in">declare</span> -r                <span class="hljs-comment"># 查看所有只读变量</span><br><span class="hljs-built_in">declare</span> -x                <span class="hljs-comment"># 查看所有被导出成环境变量的东西</span><br><span class="hljs-built_in">declare</span> -p varname        <span class="hljs-comment"># 输出变量是怎么定义的（类型+值）</span><br><br><span class="hljs-variable">$&#123;varname:-word&#125;</span>          <span class="hljs-comment"># 如果变量不为空则返回变量，否则返回 word</span><br><span class="hljs-variable">$&#123;varname:=word&#125;</span>          <span class="hljs-comment"># 如果变量不为空则返回变量，否则赋值成 word 并返回</span><br><span class="hljs-variable">$&#123;varname:?message&#125;</span>       <span class="hljs-comment"># 如果变量不为空则返回变量，否则打印错误信息并退出</span><br><span class="hljs-variable">$&#123;varname:+word&#125;</span>          <span class="hljs-comment"># 如果变量不为空则返回 word，否则返回 null</span><br><span class="hljs-variable">$&#123;varname:offset:len&#125;</span>     <span class="hljs-comment"># 取得字符串的子字符串</span><br><br><span class="hljs-variable">$&#123;variable#pattern&#125;</span>       <span class="hljs-comment"># 如果变量头部匹配 pattern，则删除最小匹配部分返回剩下的</span><br><span class="hljs-variable">$&#123;variable##pattern&#125;</span>      <span class="hljs-comment"># 如果变量头部匹配 pattern，则删除最大匹配部分返回剩下的</span><br><span class="hljs-variable">$&#123;variable%pattern&#125;</span>       <span class="hljs-comment"># 如果变量尾部匹配 pattern，则删除最小匹配部分返回剩下的</span><br><span class="hljs-variable">$&#123;variable%%pattern&#125;</span>      <span class="hljs-comment"># 如果变量尾部匹配 pattern，则删除最大匹配部分返回剩下的</span><br><span class="hljs-variable">$&#123;variable/pattern/str&#125;</span>   <span class="hljs-comment"># 将变量中第一个匹配 pattern 的替换成 str，并返回</span><br><span class="hljs-variable">$&#123;variable//pattern/str&#125;</span>  <span class="hljs-comment"># 将变量中所有匹配 pattern 的地方替换成 str 并返回</span><br><br><span class="hljs-variable">$&#123;#varname&#125;</span>               <span class="hljs-comment"># 返回字符串长度</span><br><br>*(patternlist)            <span class="hljs-comment"># 零次或者多次匹配</span><br>+(patternlist)            <span class="hljs-comment"># 一次或者多次匹配</span><br>?(patternlist)            <span class="hljs-comment"># 零次或者一次匹配</span><br>@(patternlist)            <span class="hljs-comment"># 单词匹配</span><br>!(patternlist)            <span class="hljs-comment"># 不匹配</span><br><br>array=(<span class="hljs-variable">$text</span>)             <span class="hljs-comment"># 按空格分隔 text 成数组，并赋值给变量</span><br>IFS=<span class="hljs-string">&quot;/&quot;</span> array=(<span class="hljs-variable">$text</span>)     <span class="hljs-comment"># 按斜杆分隔字符串 text 成数组，并赋值给变量</span><br>text=<span class="hljs-string">&quot;<span class="hljs-variable">$&#123;array[*]&#125;</span>&quot;</span>        <span class="hljs-comment"># 用空格链接数组并赋值给变量</span><br>text=$(IFS=/; <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;<span class="hljs-variable">$&#123;array[*]&#125;</span>&quot;</span>)  <span class="hljs-comment"># 用斜杠链接数组并赋值给变量</span><br><br>A=( foo bar <span class="hljs-string">&quot;a  b c&quot;</span> 42 ) <span class="hljs-comment"># 数组定义</span><br>B=(<span class="hljs-string">&quot;<span class="hljs-variable">$&#123;A[@]:1:2&#125;</span>&quot;</span>)         <span class="hljs-comment"># 数组切片：B=( bar &quot;a  b c&quot; )</span><br>C=(<span class="hljs-string">&quot;<span class="hljs-variable">$&#123;A[@]:1&#125;</span>&quot;</span>)           <span class="hljs-comment"># 数组切片：C=( bar &quot;a  b c&quot; 42 )</span><br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;<span class="hljs-variable">$&#123;B[@]&#125;</span>&quot;</span>            <span class="hljs-comment"># bar a  b c</span><br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;<span class="hljs-variable">$&#123;B[1]&#125;</span>&quot;</span>            <span class="hljs-comment"># a  b c</span><br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;<span class="hljs-variable">$&#123;C[@]&#125;</span>&quot;</span>            <span class="hljs-comment"># bar a  b c 42</span><br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;<span class="hljs-variable">$&#123;C[@]: -2:2&#125;</span>&quot;</span>      <span class="hljs-comment"># a  b c 42  减号前的空格是必须的</span><br><br>$(UNIX <span class="hljs-built_in">command</span>)           <span class="hljs-comment"># 运行命令，并将标准输出内容捕获并返回</span><br>varname=$(id -u user)     <span class="hljs-comment"># 将用户名为 user 的 uid 赋值给 varname 变量</span><br><br>num=$(expr 1 + 2)         <span class="hljs-comment"># 兼容 posix sh 的计算，使用 expr 命令计算结果</span><br>num=$(expr <span class="hljs-variable">$num</span> + 1)      <span class="hljs-comment"># 数字自增</span><br>expr 2 \* \( 2 + 3 \)     <span class="hljs-comment"># 兼容 posix sh 的复杂计算，输出 10</span><br><br>num=$((<span class="hljs-number">1</span> + <span class="hljs-number">2</span>))            <span class="hljs-comment"># 计算 1+2 赋值给 num，使用 bash 独有的 $((..)) 计算</span><br>num=$((<span class="hljs-variable">$num</span> + <span class="hljs-number">1</span>))         <span class="hljs-comment"># 变量递增</span><br>num=$((num + <span class="hljs-number">1</span>))          <span class="hljs-comment"># 变量递增，双括号内的 $ 可以省略</span><br>num=$((<span class="hljs-number">1</span> + (<span class="hljs-number">2</span> + <span class="hljs-number">3</span>) * <span class="hljs-number">2</span>))  <span class="hljs-comment"># 复杂计算</span><br><br><br><span class="hljs-comment">##############################################################################</span><br><span class="hljs-comment"># 事件指示符</span><br><span class="hljs-comment">##############################################################################</span><br><br>!!                  <span class="hljs-comment"># 上一条命令</span><br>!^                  <span class="hljs-comment"># 上一条命令的第一个单词</span><br>!:n                 <span class="hljs-comment"># 上一条命令的第n个单词</span><br>!:n-$               <span class="hljs-comment"># 上一条命令的第n个单词到最后一个单词</span><br>!$                  <span class="hljs-comment"># 上一条命令的最后一个单词</span><br>!-n:$               <span class="hljs-comment"># 上n条命令的最后一个单词</span><br>!string             <span class="hljs-comment"># 最近一条包含string的命令</span><br>!^string1^string2   <span class="hljs-comment"># 最近一条包含string1的命令, 快速替换string1为string2</span><br>!<span class="hljs-comment">#                  # 本条命令之前所有的输入内容</span><br>!<span class="hljs-comment">#:n                # 本条命令之前的第n个单词, 快速备份cp /etc/passwd !#:1.bak</span><br><br><br><span class="hljs-comment">##############################################################################</span><br><span class="hljs-comment"># 函数</span><br><span class="hljs-comment">##############################################################################</span><br><br><span class="hljs-comment"># 定义一个新函数</span><br><span class="hljs-keyword">function</span> <span class="hljs-function"><span class="hljs-title">myfunc</span></span>() &#123;<br>    <span class="hljs-comment"># $1 代表第一个参数，$N 代表第 N 个参数</span><br>    <span class="hljs-comment"># $# 代表参数个数</span><br>    <span class="hljs-comment"># $0 代表被调用者自身的名字</span><br>    <span class="hljs-comment"># $@ 代表所有参数，类型是个数组，想传递所有参数给其他命令用 cmd &quot;$@&quot; </span><br>    <span class="hljs-comment"># $* 空格链接起来的所有参数，类型是字符串</span><br>    &#123;shell commands ...&#125;<br>&#125;<br><br>myfunc                    <span class="hljs-comment"># 调用函数 myfunc </span><br>myfunc arg1 arg2 arg3     <span class="hljs-comment"># 带参数的函数调用</span><br>myfunc <span class="hljs-string">&quot;<span class="hljs-variable">$@</span>&quot;</span>               <span class="hljs-comment"># 将所有参数传递给函数</span><br>myfunc <span class="hljs-string">&quot;<span class="hljs-variable">$&#123;array[@]&#125;</span>&quot;</span>      <span class="hljs-comment"># 将一个数组当作多个参数传递给函数</span><br><span class="hljs-built_in">shift</span>                     <span class="hljs-comment"># 参数左移</span><br><br><span class="hljs-built_in">unset</span> -f myfunc           <span class="hljs-comment"># 删除函数</span><br><span class="hljs-built_in">declare</span> -f                <span class="hljs-comment"># 列出函数定义</span><br><br><br><span class="hljs-comment">##############################################################################</span><br><span class="hljs-comment"># 条件判断（兼容 posix sh 的条件判断）：man test</span><br><span class="hljs-comment">##############################################################################</span><br><br>statement1 &amp;&amp; statement2  <span class="hljs-comment"># and 操作符</span><br>statement1 || statement2  <span class="hljs-comment"># or 操作符</span><br><br>exp1 -a exp2              <span class="hljs-comment"># exp1 和 exp2 同时为真时返回真（POSIX XSI扩展）</span><br>exp1 -o exp2              <span class="hljs-comment"># exp1 和 exp2 有一个为真就返回真（POSIX XSI扩展）</span><br>( expression )            <span class="hljs-comment"># 如果 expression 为真时返回真，输入注意括号前反斜杆</span><br>! expression              <span class="hljs-comment"># 如果 expression 为假那返回真</span><br><br>str1 = str2               <span class="hljs-comment"># 判断字符串相等，如 [ &quot;$x&quot; = &quot;$y&quot; ] &amp;&amp; echo yes</span><br>str1 != str2              <span class="hljs-comment"># 判断字符串不等，如 [ &quot;$x&quot; != &quot;$y&quot; ] &amp;&amp; echo yes</span><br>str1 &lt; str2               <span class="hljs-comment"># 字符串小于，如 [ &quot;$x&quot; \&lt; &quot;$y&quot; ] &amp;&amp; echo yes</span><br>str2 &gt; str2               <span class="hljs-comment"># 字符串大于，注意 &lt; 或 &gt; 是字面量，输入时要加反斜杆</span><br>-n str1                   <span class="hljs-comment"># 判断字符串不为空（长度大于零）</span><br>-z str1                   <span class="hljs-comment"># 判断字符串为空（长度等于零）</span><br><br>-a file                   <span class="hljs-comment"># 判断文件存在，如 [ -a /tmp/abc ] &amp;&amp; echo &quot;exists&quot;</span><br>-d file                   <span class="hljs-comment"># 判断文件存在，且该文件是一个目录</span><br>-e file                   <span class="hljs-comment"># 判断文件存在，和 -a 等价</span><br>-f file                   <span class="hljs-comment"># 判断文件存在，且该文件是一个普通文件（非目录等）</span><br>-r file                   <span class="hljs-comment"># 判断文件存在，且可读</span><br>-s file                   <span class="hljs-comment"># 判断文件存在，且尺寸大于0</span><br>-w file                   <span class="hljs-comment"># 判断文件存在，且可写</span><br>-x file                   <span class="hljs-comment"># 判断文件存在，且执行</span><br>-N file                   <span class="hljs-comment"># 文件上次修改过后还没有读取过</span><br>-O file                   <span class="hljs-comment"># 文件存在且属于当前用户</span><br>-G file                   <span class="hljs-comment"># 文件存在且匹配你的用户组</span><br>file1 -nt file2           <span class="hljs-comment"># 文件1 比 文件2 新</span><br>file1 -ot file2           <span class="hljs-comment"># 文件1 比 文件2 旧</span><br><br>num1 -eq num2             <span class="hljs-comment"># 数字判断：num1 == num2</span><br>num1 -ne num2             <span class="hljs-comment"># 数字判断：num1 != num2</span><br>num1 -lt num2             <span class="hljs-comment"># 数字判断：num1 &lt; num2</span><br>num1 -le num2             <span class="hljs-comment"># 数字判断：num1 &lt;= num2</span><br>num1 -gt num2             <span class="hljs-comment"># 数字判断：num1 &gt; num2</span><br>num1 -ge num2             <span class="hljs-comment"># 数字判断：num1 &gt;= num2</span><br><br><br><span class="hljs-comment">##############################################################################</span><br><span class="hljs-comment"># 分支控制：if 和经典 test，兼容 posix sh 的条件判断语句</span><br><span class="hljs-comment">##############################################################################</span><br><br><span class="hljs-built_in">test</span> &#123;expression&#125;         <span class="hljs-comment"># 判断条件为真的话 test 程序返回0 否则非零</span><br>[ expression ]            <span class="hljs-comment"># 判断条件为真的话返回0 否则非零</span><br><br><span class="hljs-built_in">test</span> <span class="hljs-string">&quot;abc&quot;</span> = <span class="hljs-string">&quot;def&quot;</span>        <span class="hljs-comment"># 查看返回值 echo $? 显示 1，因为条件为假</span><br><span class="hljs-built_in">test</span> <span class="hljs-string">&quot;abc&quot;</span> != <span class="hljs-string">&quot;def&quot;</span>       <span class="hljs-comment"># 查看返回值 echo $? 显示 0，因为条件为真</span><br><br><span class="hljs-built_in">test</span> -a /tmp; <span class="hljs-built_in">echo</span> $?     <span class="hljs-comment"># 调用 test 判断 /tmp 是否存在，并打印 test 的返回值</span><br>[ -a /tmp ]; <span class="hljs-built_in">echo</span> $?      <span class="hljs-comment"># 和上面完全等价，/tmp 肯定是存在的，所以输出是 0</span><br><br><span class="hljs-built_in">test</span> cond &amp;&amp; cmd1         <span class="hljs-comment"># 判断条件为真时执行 cmd1</span><br>[ cond ] &amp;&amp; cmd1          <span class="hljs-comment"># 和上面完全等价</span><br>[ cond ] &amp;&amp; cmd1 || cmd2  <span class="hljs-comment"># 条件为真执行 cmd1 否则执行 cmd2</span><br><br><span class="hljs-comment"># 判断 /etc/passwd 文件是否存在</span><br><span class="hljs-comment"># 经典的 if 语句就是判断后面的命令返回值为0的话，认为条件为真，否则为假</span><br><span class="hljs-keyword">if</span> <span class="hljs-built_in">test</span> -e /etc/passwd; <span class="hljs-keyword">then</span><br>    <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;alright it exists ... &quot;</span><br><span class="hljs-keyword">else</span><br>    <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;it doesn&#x27;t exist ... &quot;</span><br><span class="hljs-keyword">fi</span><br><br><span class="hljs-comment"># 和上面完全等价，[ 是个和 test 一样的可执行程序，但最后一个参数必须为 ]</span><br><span class="hljs-comment"># 这个名字为 &quot;[&quot; 的可执行程序一般就在 /bin 或 /usr/bin 下面，比 test 优雅些</span><br><span class="hljs-keyword">if</span> [ -e /etc/passwd ]; <span class="hljs-keyword">then</span>   <br>    <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;alright it exists ... &quot;</span><br><span class="hljs-keyword">else</span><br>    <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;it doesn&#x27;t exist ... &quot;</span><br><span class="hljs-keyword">fi</span><br><br><span class="hljs-comment"># 和上面两个完全等价，其实到 bash 时代 [ 已经是内部命令了，用 enable 可以看到</span><br>[ -e /etc/passwd ] &amp;&amp; <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;alright it exists&quot;</span> || <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;it doesn&#x27;t exist&quot;</span><br><br><span class="hljs-comment"># 判断变量的值</span><br><span class="hljs-keyword">if</span> [ <span class="hljs-string">&quot;<span class="hljs-variable">$varname</span>&quot;</span> = <span class="hljs-string">&quot;foo&quot;</span> ]; <span class="hljs-keyword">then</span><br>    <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;this is foo&quot;</span><br><span class="hljs-keyword">elif</span> [ <span class="hljs-string">&quot;<span class="hljs-variable">$varname</span>&quot;</span> = <span class="hljs-string">&quot;bar&quot;</span> ]; <span class="hljs-keyword">then</span><br>    <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;this is bar&quot;</span><br><span class="hljs-keyword">else</span><br>    <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;neither&quot;</span><br><span class="hljs-keyword">fi</span><br><br><span class="hljs-comment"># 复杂条件判断，注意 || 和 &amp;&amp; 是完全兼容 POSIX 的推荐写法</span><br><span class="hljs-keyword">if</span> [ <span class="hljs-variable">$x</span> -gt 10 ] &amp;&amp; [ <span class="hljs-variable">$x</span> -lt 20 ]; <span class="hljs-keyword">then</span><br>    <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;yes, between 10 and 20&quot;</span><br><span class="hljs-keyword">fi</span><br><br><span class="hljs-comment"># 可以用 &amp;&amp; 命令连接符来做和上面完全等价的事情</span><br>[ <span class="hljs-variable">$x</span> -gt 10 ] &amp;&amp; [ <span class="hljs-variable">$x</span> -lt 20 ] &amp;&amp; <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;yes, between 10 and 20&quot;</span><br><br><span class="hljs-comment"># 小括号和 -a -o 是 POSIX XSI 扩展写法，小括号是字面量，输入时前面要加反斜杆</span><br><span class="hljs-keyword">if</span> [ \( <span class="hljs-variable">$x</span> -gt 10 \) -a \( <span class="hljs-variable">$x</span> -lt 20 \) ]; <span class="hljs-keyword">then</span><br>    <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;yes, between 10 and 20&quot;</span><br><span class="hljs-keyword">fi</span><br><br><span class="hljs-comment"># 同样可以用 &amp;&amp; 命令连接符来做和上面完全等价的事情</span><br>[ \( <span class="hljs-variable">$x</span> -gt 10 \) -a \( <span class="hljs-variable">$x</span> -lt 20 \) ] &amp;&amp; <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;yes, between 10 and 20&quot;</span><br><br><br><span class="hljs-comment"># 判断程序存在的话就执行</span><br>[ -x /bin/ls ] &amp;&amp; /bin/ls -l<br><br><span class="hljs-comment"># 如果不考虑兼容 posix sh 和 dash 这些的话，可用 bash 独有的 ((..)) 和 [[..]]:</span><br>https://www.ibm.com/developerworks/library/l-bash-test/index.html<br><br><br><span class="hljs-comment">##############################################################################</span><br><span class="hljs-comment"># 流程控制：while / for / case / until </span><br><span class="hljs-comment">##############################################################################</span><br><br><span class="hljs-comment"># while 循环</span><br><span class="hljs-keyword">while</span> condition; <span class="hljs-keyword">do</span><br>    statements<br><span class="hljs-keyword">done</span><br><br>i=1<br><span class="hljs-keyword">while</span> [ <span class="hljs-variable">$i</span> -le 10 ]; <span class="hljs-keyword">do</span><br>    <span class="hljs-built_in">echo</span> <span class="hljs-variable">$i</span>; <br>    i=$(expr <span class="hljs-variable">$i</span> + 1)<br><span class="hljs-keyword">done</span><br><br><span class="hljs-comment"># for 循环：上面的 while 语句等价</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> &#123;1..10&#125;; <span class="hljs-keyword">do</span><br>    <span class="hljs-built_in">echo</span> <span class="hljs-variable">$i</span><br><span class="hljs-keyword">done</span><br><br><span class="hljs-keyword">for</span> name [<span class="hljs-keyword">in</span> list]; <span class="hljs-keyword">do</span><br>    statements<br><span class="hljs-keyword">done</span><br><br><span class="hljs-comment"># for 列举某目录下面的所有文件</span><br><span class="hljs-keyword">for</span> f <span class="hljs-keyword">in</span> /home/*; <span class="hljs-keyword">do</span> <br>    <span class="hljs-built_in">echo</span> <span class="hljs-variable">$f</span><br><span class="hljs-keyword">done</span><br><br><span class="hljs-comment"># bash 独有的 (( .. )) 语句，更接近 C 语言，但是不兼容 posix sh</span><br><span class="hljs-keyword">for</span> (( initialisation ; ending condition ; update )); <span class="hljs-keyword">do</span><br>    statements<br><span class="hljs-keyword">done</span><br><br><span class="hljs-comment"># 和上面的写法等价</span><br><span class="hljs-keyword">for</span> ((i = 0; i &lt; 10; i++)); <span class="hljs-keyword">do</span> <span class="hljs-built_in">echo</span> <span class="hljs-variable">$i</span>; <span class="hljs-keyword">done</span><br><br><span class="hljs-comment"># case 判断</span><br><span class="hljs-keyword">case</span> expression <span class="hljs-keyword">in</span> <br>    pattern1 )<br>        statements ;;<br>    pattern2 )<br>        statements ;;<br>    * )<br>        otherwise ;;<br><span class="hljs-keyword">esac</span><br><br><span class="hljs-comment"># until 语句</span><br>until condition; <span class="hljs-keyword">do</span><br>    statements<br><span class="hljs-keyword">done</span><br><br><span class="hljs-comment"># select 语句</span><br>select name [<span class="hljs-keyword">in</span> list]; <span class="hljs-keyword">do</span><br>  statements that can use <span class="hljs-variable">$name</span><br><span class="hljs-keyword">done</span><br><br><br><span class="hljs-comment">##############################################################################</span><br><span class="hljs-comment"># 命令处理</span><br><span class="hljs-comment">##############################################################################</span><br><br><span class="hljs-built_in">command</span> ls                         <span class="hljs-comment"># 忽略 alias 直接执行程序或者内建命令 ls</span><br><span class="hljs-built_in">builtin</span> <span class="hljs-built_in">cd</span>                         <span class="hljs-comment"># 忽略 alias 直接运行内建的 cd 命令</span><br><span class="hljs-built_in">enable</span>                             <span class="hljs-comment"># 列出所有 bash 内置命令，或禁止某命令</span><br><span class="hljs-built_in">help</span> &#123;builtin_command&#125;             <span class="hljs-comment"># 查看内置命令的帮助（仅限 bash 内置命令）</span><br><br><span class="hljs-built_in">eval</span> <span class="hljs-variable">$script</span>                       <span class="hljs-comment"># 对 script 变量中的字符串求值（执行）</span><br><br><br><span class="hljs-comment">##############################################################################</span><br><span class="hljs-comment"># 输出/输入 重定向</span><br><span class="hljs-comment">##############################################################################</span><br><br>cmd1 | cmd2                        <span class="hljs-comment"># 管道，cmd1 的标准输出接到 cmd2 的标准输入</span><br>&lt; file                             <span class="hljs-comment"># 将文件内容重定向为命令的标准输入</span><br>&gt; file                             <span class="hljs-comment"># 将命令的标准输出重定向到文件，会覆盖文件</span><br>&gt;&gt; file                            <span class="hljs-comment"># 将命令的标准输出重定向到文件，追加不覆盖</span><br>&gt;| file                            <span class="hljs-comment"># 强制输出到文件，即便设置过：set -o noclobber</span><br>n&gt;| file                           <span class="hljs-comment"># 强制将文件描述符 n的输出重定向到文件</span><br>&lt;&gt; file                            <span class="hljs-comment"># 同时使用该文件作为标准输入和标准输出</span><br>n&lt;&gt; file                           <span class="hljs-comment"># 同时使用文件作为文件描述符 n 的输出和输入</span><br>n&gt; file                            <span class="hljs-comment"># 重定向文件描述符 n 的输出到文件</span><br>n&lt; file                            <span class="hljs-comment"># 重定向文件描述符 n 的输入为文件内容</span><br>n&gt;&amp;                                <span class="hljs-comment"># 将标准输出 dup/合并 到文件描述符 n</span><br>n&lt;&amp;                                <span class="hljs-comment"># 将标准输入 dump/合并 定向为描述符 n</span><br>n&gt;&amp;m                               <span class="hljs-comment"># 文件描述符 n 被作为描述符 m 的副本，输出用</span><br>n&lt;&amp;m                               <span class="hljs-comment"># 文件描述符 n 被作为描述符 m 的副本，输入用</span><br>&amp;&gt;file                             <span class="hljs-comment"># 将标准输出和标准错误重定向到文件</span><br>&lt;&amp;-                                <span class="hljs-comment"># 关闭标准输入</span><br>&gt;&amp;-                                <span class="hljs-comment"># 关闭标准输出</span><br>n&gt;&amp;-                               <span class="hljs-comment"># 关闭作为输出的文件描述符 n</span><br>n&lt;&amp;-                               <span class="hljs-comment"># 关闭作为输入的文件描述符 n</span><br>diff &lt;(cmd1) &lt;(cmd2)               <span class="hljs-comment"># 比较两个命令的输出</span><br><br><br><span class="hljs-comment">##############################################################################</span><br><span class="hljs-comment"># 文本处理 - cut</span><br><span class="hljs-comment">##############################################################################</span><br><br>cut -c 1-16                        <span class="hljs-comment"># 截取每行头16个字符</span><br>cut -c 1-16 file                   <span class="hljs-comment"># 截取指定文件中每行头 16个字符</span><br>cut -c3-                           <span class="hljs-comment"># 截取每行从第三个字符开始到行末的内容</span><br>cut -d<span class="hljs-string">&#x27;:&#x27;</span> -f5                      <span class="hljs-comment"># 截取用冒号分隔的第五列内容</span><br>cut -d<span class="hljs-string">&#x27;;&#x27;</span> -f2,10                   <span class="hljs-comment"># 截取用分号分隔的第二和第十列内容</span><br>cut -d<span class="hljs-string">&#x27; &#x27;</span> -f3-7                    <span class="hljs-comment"># 截取空格分隔的三到七列</span><br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;hello&quot;</span> | cut -c1-3           <span class="hljs-comment"># 显示 hel</span><br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;hello sir&quot;</span> | cut -d<span class="hljs-string">&#x27; &#x27;</span> -f2   <span class="hljs-comment"># 显示 sir</span><br>ps | tr -s <span class="hljs-string">&quot; &quot;</span> | cut -d <span class="hljs-string">&quot; &quot;</span> -f 2,3,4  <span class="hljs-comment"># cut 搭配 tr 压缩字符</span><br><br><br><span class="hljs-comment">##############################################################################</span><br><span class="hljs-comment"># 文本处理 - awk / sed </span><br><span class="hljs-comment">##############################################################################</span><br><br>awk <span class="hljs-string">&#x27;&#123;print $5&#125;&#x27;</span> file              <span class="hljs-comment"># 打印文件中以空格分隔的第五列</span><br>awk -F <span class="hljs-string">&#x27;,&#x27;</span> <span class="hljs-string">&#x27;&#123;print $5&#125;&#x27;</span> file       <span class="hljs-comment"># 打印文件中以逗号分隔的第五列</span><br>awk <span class="hljs-string">&#x27;/str/ &#123;print $2&#125;&#x27;</span> file        <span class="hljs-comment"># 打印文件中包含 str 的所有行的第二列</span><br>awk -F <span class="hljs-string">&#x27;,&#x27;</span> <span class="hljs-string">&#x27;&#123;print $NF&#125;&#x27;</span> file      <span class="hljs-comment"># 打印逗号分隔的文件中的每行最后一列 </span><br>awk <span class="hljs-string">&#x27;&#123;s+=$1&#125; END &#123;print s&#125;&#x27;</span> file   <span class="hljs-comment"># 计算所有第一列的合</span><br>awk <span class="hljs-string">&#x27;NR%3==1&#x27;</span> file                 <span class="hljs-comment"># 从第一行开始，每隔三行打印一行</span><br><br>sed <span class="hljs-string">&#x27;s/find/replace/&#x27;</span> file         <span class="hljs-comment"># 替换文件中首次出现的字符串并输出结果 </span><br>sed <span class="hljs-string">&#x27;10s/find/replace/&#x27;</span> file       <span class="hljs-comment"># 替换文件第 10 行内容</span><br>sed <span class="hljs-string">&#x27;10,20s/find/replace/&#x27;</span> file    <span class="hljs-comment"># 替换文件中 10-20 行内容</span><br>sed -r <span class="hljs-string">&#x27;s/regex/replace/g&#x27;</span> file    <span class="hljs-comment"># 替换文件中所有出现的字符串</span><br>sed -i <span class="hljs-string">&#x27;s/find/replace/g&#x27;</span> file     <span class="hljs-comment"># 替换文件中所有出现的字符并且覆盖文件</span><br>sed -i <span class="hljs-string">&#x27;/find/i\newline&#x27;</span> file      <span class="hljs-comment"># 在文件的匹配文本前插入行</span><br>sed -i <span class="hljs-string">&#x27;/find/a\newline&#x27;</span> file      <span class="hljs-comment"># 在文件的匹配文本后插入行</span><br>sed <span class="hljs-string">&#x27;/line/s/find/replace/&#x27;</span> file   <span class="hljs-comment"># 先搜索行特征再执行替换</span><br>sed -e <span class="hljs-string">&#x27;s/f/r/&#x27;</span> -e <span class="hljs-string">&#x27;s/f/r&#x27;</span> file    <span class="hljs-comment"># 执行多次替换</span><br>sed <span class="hljs-string">&#x27;s#find#replace#&#x27;</span> file         <span class="hljs-comment"># 使用 # 替换 / 来避免 pattern 中有斜杆</span><br>sed -i -r <span class="hljs-string">&#x27;s/^\s+//g&#x27;</span> file         <span class="hljs-comment"># 删除文件每行头部空格</span><br>sed <span class="hljs-string">&#x27;/^$/d&#x27;</span> file                   <span class="hljs-comment"># 删除文件空行并打印</span><br>sed -i <span class="hljs-string">&#x27;s/\s\+$//&#x27;</span> file            <span class="hljs-comment"># 删除文件每行末尾多余空格</span><br>sed -n <span class="hljs-string">&#x27;2p&#x27;</span> file                   <span class="hljs-comment"># 打印文件第二行</span><br>sed -n <span class="hljs-string">&#x27;2,5p&#x27;</span> file                 <span class="hljs-comment"># 打印文件第二到第五行</span><br><br><br><span class="hljs-comment">##############################################################################</span><br><span class="hljs-comment"># 排序 - sort</span><br><span class="hljs-comment">##############################################################################</span><br><br>sort file                          <span class="hljs-comment"># 排序文件</span><br>sort -r file                       <span class="hljs-comment"># 反向排序（降序）</span><br>sort -n file                       <span class="hljs-comment"># 使用数字而不是字符串进行比较</span><br>sort -t: -k 3n /etc/passwd         <span class="hljs-comment"># 按 passwd 文件的第三列进行排序</span><br>sort -u file                       <span class="hljs-comment"># 去重排序</span><br><br><br><span class="hljs-comment">##############################################################################</span><br><span class="hljs-comment"># 快速跳转 - https://github.com/rupa/z</span><br><span class="hljs-comment">##############################################################################</span><br><br><span class="hljs-built_in">source</span> /path/to/z.sh               <span class="hljs-comment"># .bashrc 中初始化 z.sh</span><br>z                                  <span class="hljs-comment"># 列出所有历史路径以及他们的权重</span><br>z foo                              <span class="hljs-comment"># 跳到历史路径中匹配 foo 的权重最大的目录</span><br>z foo bar                          <span class="hljs-comment"># 跳到历史路径中匹配 foo 和 bar 权重最大的目录</span><br>z -l foo                           <span class="hljs-comment"># 列出所有历史路径中匹配 foo 的目录及权重</span><br>z -r foo                           <span class="hljs-comment"># 按照最高访问次数优先进行匹配跳转</span><br>z -t foo                           <span class="hljs-comment"># 按照最近访问优先进行匹配跳转</span><br><br><br><span class="hljs-comment">##############################################################################</span><br><span class="hljs-comment"># 键盘绑定</span><br><span class="hljs-comment">##############################################################################</span><br><br><span class="hljs-built_in">bind</span> <span class="hljs-string">&#x27;&quot;\eh&quot;:&quot;\C-b&quot;&#x27;</span>                <span class="hljs-comment"># 绑定 ALT+h 为光标左移，同 CTRL+b / &lt;Left&gt;</span><br><span class="hljs-built_in">bind</span> <span class="hljs-string">&#x27;&quot;\el&quot;:&quot;\C-f&quot;&#x27;</span>                <span class="hljs-comment"># 绑定 ALT+l 为光标右移，同 CTRL+f / &lt;Right&gt;</span><br><span class="hljs-built_in">bind</span> <span class="hljs-string">&#x27;&quot;\ej&quot;:&quot;\C-n&quot;&#x27;</span>                <span class="hljs-comment"># 绑定 ALT+j 为下条历史，同 CTRL+n / &lt;Down&gt;</span><br><span class="hljs-built_in">bind</span> <span class="hljs-string">&#x27;&quot;\ek&quot;:&quot;\C-p&quot;&#x27;</span>                <span class="hljs-comment"># 绑定 ALT+k 为上条历史，同 CTRL+p / &lt;Up&gt;</span><br><span class="hljs-built_in">bind</span> <span class="hljs-string">&#x27;&quot;\eH&quot;:&quot;\eb&quot;&#x27;</span>                 <span class="hljs-comment"># 绑定 ALT+H 为光标左移一个单词，同 ALT-b </span><br><span class="hljs-built_in">bind</span> <span class="hljs-string">&#x27;&quot;\eL&quot;:&quot;\ef&quot;&#x27;</span>                 <span class="hljs-comment"># 绑定 ALT+L 为光标右移一个单词，同 ALT-f </span><br><span class="hljs-built_in">bind</span> <span class="hljs-string">&#x27;&quot;\eJ&quot;:&quot;\C-a&quot;&#x27;</span>                <span class="hljs-comment"># 绑定 ALT+J 为移动到行首，同 CTRL+a / &lt;Home&gt;</span><br><span class="hljs-built_in">bind</span> <span class="hljs-string">&#x27;&quot;\eK&quot;:&quot;\C-e&quot;&#x27;</span>                <span class="hljs-comment"># 绑定 ALT+K 为移动到行末，同 CTRL+e / &lt;End&gt;</span><br><span class="hljs-built_in">bind</span> <span class="hljs-string">&#x27;&quot;\e;&quot;:&quot;ls -l\n&quot;&#x27;</span>             <span class="hljs-comment"># 绑定 ALT+; 为执行 ls -l 命令</span><br><br><br><span class="hljs-comment">##############################################################################</span><br><span class="hljs-comment"># 网络管理：ip / ifconfig / nmap ...</span><br><span class="hljs-comment">##############################################################################</span><br><br>ip a                               <span class="hljs-comment"># 显示所有网络地址，同 ip address</span><br>ip a show eth1                     <span class="hljs-comment"># 显示网卡 IP 地址</span><br>ip a add 172.16.1.23/24 dev eth1   <span class="hljs-comment"># 添加网卡 IP 地址</span><br>ip a del 172.16.1.23/24 dev eth1   <span class="hljs-comment"># 删除网卡 IP 地址</span><br>ip link show dev eth0              <span class="hljs-comment"># 显示网卡设备属性</span><br>ip link <span class="hljs-built_in">set</span> eth1 up                <span class="hljs-comment"># 激活网卡</span><br>ip link <span class="hljs-built_in">set</span> eth1 down              <span class="hljs-comment"># 关闭网卡</span><br>ip link <span class="hljs-built_in">set</span> eth1 address &#123;mac&#125;     <span class="hljs-comment"># 修改 MAC 地址</span><br>ip neighbour                       <span class="hljs-comment"># 查看 ARP 缓存</span><br>ip route                           <span class="hljs-comment"># 查看路由表</span><br>ip route add 10.1.0.0/24 via 10.0.0.253 dev eth0    <span class="hljs-comment"># 添加静态路由</span><br>ip route del 10.1.0.0/24           <span class="hljs-comment"># 删除静态路由</span><br><br>ifconfig                           <span class="hljs-comment"># 显示所有网卡和接口信息</span><br>ifconfig -a                        <span class="hljs-comment"># 显示所有网卡（包括开机没启动的）信息</span><br>ifconfig eth0                      <span class="hljs-comment"># 指定设备显示信息</span><br>ifconfig eth0 up                   <span class="hljs-comment"># 激活网卡</span><br>ifconfig eth0 down                 <span class="hljs-comment"># 关闭网卡</span><br>ifconfig eth0 192.168.120.56       <span class="hljs-comment"># 给网卡配置 IP 地址</span><br>ifconfig eth0 10.0.0.8 netmask 255.255.255.0 up     <span class="hljs-comment"># 配置 IP 并启动</span><br>ifconfig eth0 hw ether 00:aa:bb:cc:dd:ee            <span class="hljs-comment"># 修改 MAC 地址</span><br><br>nmap 10.0.0.12                     <span class="hljs-comment"># 扫描主机 1-1000 端口</span><br>nmap -p 1024-65535 10.0.0.12       <span class="hljs-comment"># 扫描给定端口</span><br>nmap 10.0.0.0/24                   <span class="hljs-comment"># 给定网段扫描局域网内所有主机</span><br>nmap -O -sV 10.0.0.12              <span class="hljs-comment"># 探测主机服务和操作系统版本</span><br><br><br><span class="hljs-comment">##############################################################################</span><br><span class="hljs-comment"># 有趣的命令</span><br><span class="hljs-comment">##############################################################################</span><br><br>man hier                           <span class="hljs-comment"># 查看文件系统的结构和含义</span><br>man <span class="hljs-built_in">test</span>                           <span class="hljs-comment"># 查看 posix sh 的条件判断帮助</span><br>man ascii                          <span class="hljs-comment"># 显示 ascii 表</span><br>getconf LONG_BIT                   <span class="hljs-comment"># 查看系统是 32 位还是 64 位</span><br><span class="hljs-built_in">bind</span> -P                            <span class="hljs-comment"># 列出所有 bash 的快捷键</span><br>mount | column -t                  <span class="hljs-comment"># 漂亮的列出当前加载的文件系统</span><br>curl ip.cn                         <span class="hljs-comment"># 取得外网 ip 地址和服务商信息</span><br><span class="hljs-built_in">disown</span> -a &amp;&amp; <span class="hljs-built_in">exit</span>                  <span class="hljs-comment"># 关闭所有后台任务并退出</span><br>cat /etc/issue                     <span class="hljs-comment"># 查看 Linux 发行版信息</span><br>lsof -i port:80                    <span class="hljs-comment"># 哪个程序在使用 80 端口？</span><br>showkey -a                         <span class="hljs-comment"># 取得按键的 ASCII 码</span><br>svn diff | view -                  <span class="hljs-comment"># 使用 Vim 来显示带色彩的 diff 输出</span><br>mv filename.&#123;old,new&#125;              <span class="hljs-comment"># 快速文件改名</span><br>time <span class="hljs-built_in">read</span>                          <span class="hljs-comment"># 使用 CTRL-D 停止，最简单的计时功能</span><br>cp file.txt&#123;,.bak&#125;                 <span class="hljs-comment"># 快速备份文件</span><br>sudo touch /forcefsck              <span class="hljs-comment"># 强制在下次重启时扫描磁盘</span><br>find ~ -mmin 60 -<span class="hljs-built_in">type</span> f            <span class="hljs-comment"># 查找 $HOME 目录中，60 分钟内修改过的文件</span><br>curl wttr.in/~beijing              <span class="hljs-comment"># 查看北京的天气预报</span><br><span class="hljs-built_in">echo</span> <span class="hljs-variable">$&#123;SSH_CLIENT%% *&#125;</span>             <span class="hljs-comment"># 取得你是从什么 IP 链接到当前主机上的</span><br><span class="hljs-built_in">echo</span> $[RANDOM%X+1]                 <span class="hljs-comment"># 取得 1 到 X 之间的随机数</span><br><span class="hljs-built_in">bind</span> -x <span class="hljs-string">&#x27;&quot;\C-l&quot;:ls -l&#x27;</span>             <span class="hljs-comment"># 设置 CTRL+l 为执行 ls -l 命令</span><br>find / -<span class="hljs-built_in">type</span> f -size +5M           <span class="hljs-comment"># 查找大于 5M 的文件</span><br>chmod --reference f1 f2            <span class="hljs-comment"># 将 f2 的权限设置成 f1 一模一样的</span><br>curl -L cheat.sh                   <span class="hljs-comment"># 速查表大全</span><br><br><br><span class="hljs-comment">##############################################################################</span><br><span class="hljs-comment"># 常用技巧</span><br><span class="hljs-comment">##############################################################################</span><br><br><span class="hljs-comment"># 列出最常使用的命令</span><br><span class="hljs-built_in">history</span> | awk <span class="hljs-string">&#x27;&#123;a[$2]++&#125;END&#123;for(i in a)&#123;print a[i] &quot; &quot; i&#125;&#125;&#x27;</span> | sort -rn | head<br><br><span class="hljs-comment"># 列出所有网络状态：ESTABLISHED / TIME_WAIT / FIN_WAIT1 / FIN_WAIT2 </span><br>netstat -n | awk <span class="hljs-string">&#x27;/^tcp/ &#123;++tt[$NF]&#125; END &#123;for (a in tt) print a, tt[a]&#125;&#x27;</span><br><br><span class="hljs-comment"># 通过 SSH 来 mount 文件系统</span><br>sshfs name@server:/path/to/folder /path/to/mount/point<br><br><span class="hljs-comment"># 显示前十个运行的进程并按内存使用量排序</span><br>ps aux | sort -nk +4 | tail<br><br><span class="hljs-comment"># 在右上角显示时钟</span><br><span class="hljs-keyword">while</span> sleep 1;<span class="hljs-keyword">do</span> tput sc;tput cup 0 $(($(tput cols)-<span class="hljs-number">29</span>));date;tput rc;<span class="hljs-keyword">done</span>&amp;<br><br><span class="hljs-comment"># 从网络上的压缩文件中解出一个文件来，并避免保存中间文件</span><br>wget -qO - <span class="hljs-string">&quot;http://www.tarball.com/tarball.gz&quot;</span> | tar zxvf -<br><br><span class="hljs-comment"># 性能测试：测试处理器性能</span><br>python -c <span class="hljs-string">&quot;import test.pystone;print(test.pystone.pystones())&quot;</span><br><br><span class="hljs-comment"># 性能测试：测试内存带宽</span><br>dd <span class="hljs-keyword">if</span>=/dev/zero of=/dev/null bs=1M count=32768<br><br><span class="hljs-comment"># Linux 下挂载一个 iso 文件</span><br>mount /path/to/file.iso /mnt/cdrom -oloop<br><br><span class="hljs-comment"># 通过主机 A 直接 ssh 到主机 B</span><br>ssh -t hostA ssh hostB<br><br><span class="hljs-comment"># 下载一个网站的所有图片</span><br>wget -r -l1 --no-parent -nH -nd -P/tmp -A<span class="hljs-string">&quot;.gif,.jpg&quot;</span> http://example.com/images<br><br><span class="hljs-comment"># 快速创建项目目录</span><br>mkdir -p work/&#123;project1,project2&#125;/&#123;src,bin,bak&#125;<br><br><span class="hljs-comment"># 按日期范围查找文件</span><br>find . -<span class="hljs-built_in">type</span> f -newermt <span class="hljs-string">&quot;2010-01-01&quot;</span> ! -newermt <span class="hljs-string">&quot;2010-06-01&quot;</span><br><br><span class="hljs-comment"># 显示当前正在使用网络的进程</span><br>lsof -P -i -n | cut -f 1 -d <span class="hljs-string">&quot; &quot;</span>| uniq | tail -n +2<br><br><span class="hljs-comment"># Vim 中保存一个没有权限的文件</span><br>:w !sudo tee &gt; /dev/null %<br><br><span class="hljs-comment"># 在 .bashrc / .bash_profile 中加载另外一个文件（比如你保存在 github 上的配置）</span><br><span class="hljs-built_in">source</span> ~/github/profiles/my_bash_init.sh<br><br><span class="hljs-comment"># 反向代理：将外网主机（202.115.8.1）端口（8443）转发到内网主机 192.168.1.2:443</span><br>ssh -CqTnN -R 0.0.0.0:8443:192.168.1.2:443  user@202.115.8.1<br><br><span class="hljs-comment"># 正向代理：将本地主机的 8443 端口，通过 192.168.1.3 转发到 192.168.1.2:443 </span><br>ssh -CqTnN -L 0.0.0.0:8443:192.168.1.2:443  user@192.168.1.3<br><br><span class="hljs-comment"># socks5 代理：把本地 1080 端口的 socks5 的代理请求通过远程主机转发出去</span><br>ssh -CqTnN -D localhost:1080  user@202.115.8.1<br><br><span class="hljs-comment"># 终端下正确设置 ALT 键和 BackSpace 键</span><br>http://www.skywind.me/blog/archives/2021<br><br><br><span class="hljs-comment">##############################################################################</span><br><span class="hljs-comment"># 有用的函数</span><br><span class="hljs-comment">##############################################################################</span><br><br><span class="hljs-comment"># 自动解压：判断文件后缀名并调用相应解压命令</span><br><span class="hljs-keyword">function</span> q-<span class="hljs-function"><span class="hljs-title">extract</span></span>() &#123;<br>    <span class="hljs-keyword">if</span> [ -f <span class="hljs-variable">$1</span> ] ; <span class="hljs-keyword">then</span><br>        <span class="hljs-keyword">case</span> <span class="hljs-variable">$1</span> <span class="hljs-keyword">in</span><br>        *.tar.bz2)   tar -xvjf <span class="hljs-variable">$1</span>    ;;<br>        *.tar.gz)    tar -xvzf <span class="hljs-variable">$1</span>    ;;<br>        *.tar.xz)    tar -xvJf <span class="hljs-variable">$1</span>    ;;<br>        *.bz2)       bunzip2 <span class="hljs-variable">$1</span>     ;;<br>        *.rar)       rar x <span class="hljs-variable">$1</span>       ;;<br>        *.gz)        gunzip <span class="hljs-variable">$1</span>      ;;<br>        *.tar)       tar -xvf <span class="hljs-variable">$1</span>     ;;<br>        *.tbz2)      tar -xvjf <span class="hljs-variable">$1</span>    ;;<br>        *.tgz)       tar -xvzf <span class="hljs-variable">$1</span>    ;;<br>        *.zip)       unzip <span class="hljs-variable">$1</span>       ;;<br>        *.Z)         uncompress <span class="hljs-variable">$1</span>  ;;<br>        *.7z)        7z x <span class="hljs-variable">$1</span>        ;;<br>        *)           <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;don&#x27;t know how to extract &#x27;<span class="hljs-variable">$1</span>&#x27;...&quot;</span> ;;<br>        <span class="hljs-keyword">esac</span><br>    <span class="hljs-keyword">else</span><br>        <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;&#x27;<span class="hljs-variable">$1</span>&#x27; is not a valid file!&quot;</span><br>    <span class="hljs-keyword">fi</span><br>&#125;<br><br><span class="hljs-comment"># 自动压缩：判断后缀名并调用相应压缩程序</span><br><span class="hljs-keyword">function</span> q-<span class="hljs-function"><span class="hljs-title">compress</span></span>() &#123;<br>    <span class="hljs-keyword">if</span> [ -n <span class="hljs-string">&quot;<span class="hljs-variable">$1</span>&quot;</span> ] ; <span class="hljs-keyword">then</span><br>        FILE=<span class="hljs-variable">$1</span><br>        <span class="hljs-keyword">case</span> <span class="hljs-variable">$FILE</span> <span class="hljs-keyword">in</span><br>        *.tar) <span class="hljs-built_in">shift</span> &amp;&amp; tar -cf <span class="hljs-variable">$FILE</span> $* ;;<br>        *.tar.bz2) <span class="hljs-built_in">shift</span> &amp;&amp; tar -cjf <span class="hljs-variable">$FILE</span> $* ;;<br>        *.tar.xz) <span class="hljs-built_in">shift</span> &amp;&amp; tar -cJf <span class="hljs-variable">$FILE</span> $* ;;<br>        *.tar.gz) <span class="hljs-built_in">shift</span> &amp;&amp; tar -czf <span class="hljs-variable">$FILE</span> $* ;;<br>        *.tgz) <span class="hljs-built_in">shift</span> &amp;&amp; tar -czf <span class="hljs-variable">$FILE</span> $* ;;<br>        *.zip) <span class="hljs-built_in">shift</span> &amp;&amp; zip <span class="hljs-variable">$FILE</span> $* ;;<br>        *.rar) <span class="hljs-built_in">shift</span> &amp;&amp; rar <span class="hljs-variable">$FILE</span> $* ;;<br>        <span class="hljs-keyword">esac</span><br>    <span class="hljs-keyword">else</span><br>        <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;usage: q-compress &lt;foo.tar.gz&gt; ./foo ./bar&quot;</span><br>    <span class="hljs-keyword">fi</span><br>&#125;<br><br><span class="hljs-comment"># 漂亮的带语法高亮的 color cat ，需要先 pip install pygments</span><br><span class="hljs-keyword">function</span> <span class="hljs-function"><span class="hljs-title">ccat</span></span>() &#123;<br>    <span class="hljs-built_in">local</span> style=<span class="hljs-string">&quot;monokai&quot;</span><br>    <span class="hljs-keyword">if</span> [ <span class="hljs-variable">$#</span> -eq 0 ]; <span class="hljs-keyword">then</span><br>        pygmentize -P style=<span class="hljs-variable">$style</span> -P tabsize=4 -f terminal256 -g<br>    <span class="hljs-keyword">else</span><br>        <span class="hljs-keyword">for</span> NAME <span class="hljs-keyword">in</span> <span class="hljs-variable">$@</span>; <span class="hljs-keyword">do</span><br>            pygmentize -P style=<span class="hljs-variable">$style</span> -P tabsize=4 -f terminal256 -g <span class="hljs-string">&quot;<span class="hljs-variable">$NAME</span>&quot;</span><br>        <span class="hljs-keyword">done</span><br>    <span class="hljs-keyword">fi</span><br>&#125;<br><br><br><span class="hljs-comment">##############################################################################</span><br><span class="hljs-comment"># 好玩的配置</span><br><span class="hljs-comment">##############################################################################</span><br><br><span class="hljs-comment"># 放到你的 ~/.bashrc 配置文件中，给 man 增加漂亮的色彩高亮</span><br><span class="hljs-built_in">export</span> LESS_TERMCAP_mb=$<span class="hljs-string">&#x27;\E[1m\E[32m&#x27;</span><br><span class="hljs-built_in">export</span> LESS_TERMCAP_mh=$<span class="hljs-string">&#x27;\E[2m&#x27;</span><br><span class="hljs-built_in">export</span> LESS_TERMCAP_mr=$<span class="hljs-string">&#x27;\E[7m&#x27;</span><br><span class="hljs-built_in">export</span> LESS_TERMCAP_md=$<span class="hljs-string">&#x27;\E[1m\E[36m&#x27;</span><br><span class="hljs-built_in">export</span> LESS_TERMCAP_ZW=<span class="hljs-string">&quot;&quot;</span><br><span class="hljs-built_in">export</span> LESS_TERMCAP_us=$<span class="hljs-string">&#x27;\E[4m\E[1m\E[37m&#x27;</span><br><span class="hljs-built_in">export</span> LESS_TERMCAP_me=$<span class="hljs-string">&#x27;\E(B\E[m&#x27;</span><br><span class="hljs-built_in">export</span> LESS_TERMCAP_ue=$<span class="hljs-string">&#x27;\E[24m\E(B\E[m&#x27;</span><br><span class="hljs-built_in">export</span> LESS_TERMCAP_ZO=<span class="hljs-string">&quot;&quot;</span><br><span class="hljs-built_in">export</span> LESS_TERMCAP_ZN=<span class="hljs-string">&quot;&quot;</span><br><span class="hljs-built_in">export</span> LESS_TERMCAP_se=$<span class="hljs-string">&#x27;\E[27m\E(B\E[m&#x27;</span><br><span class="hljs-built_in">export</span> LESS_TERMCAP_ZV=<span class="hljs-string">&quot;&quot;</span><br><span class="hljs-built_in">export</span> LESS_TERMCAP_so=$<span class="hljs-string">&#x27;\E[1m\E[33m\E[44m&#x27;</span><br><br><span class="hljs-comment"># ALT+hjkl/HJKL 快速移动光标，将下面内容添加到 ~/.inputrc 中可作用所有工具，</span><br><span class="hljs-comment"># 包括 bash/zsh/python/lua 等使用 readline 的工具，帮助见：info rluserman</span><br><span class="hljs-string">&quot;\eh&quot;</span>: backward-char<br><span class="hljs-string">&quot;\el&quot;</span>: forward-char<br><span class="hljs-string">&quot;\ej&quot;</span>: next-history<br><span class="hljs-string">&quot;\ek&quot;</span>: previous-history<br><span class="hljs-string">&quot;\eH&quot;</span>: backward-word<br><span class="hljs-string">&quot;\eL&quot;</span>: forward-word<br><span class="hljs-string">&quot;\eJ&quot;</span>: beginning-of-line<br><span class="hljs-string">&quot;\eK&quot;</span>: end-of-line<br><br><br><span class="hljs-comment">##############################################################################</span><br><span class="hljs-comment"># References</span><br><span class="hljs-comment">##############################################################################</span><br><br>https://github.com/Idnan/bash-guide<br>http://www.linuxstall.com/linux-command-line-tips-that-every-linux-user-should-know/<br>https://ss64.com/bash/syntax-keyboard.html<br>http://wiki.bash-hackers.org/commands/classictest<br>https://www.ibm.com/developerworks/library/l-bash-test/index.html<br>https://www.cyberciti.biz/faq/bash-loop-over-file/<br>https://linuxconfig.org/bash-scripting-tutorial<br>https://github.com/LeCoupa/awesome-cheatsheets/blob/master/languages/bash.sh<br>https://devhints.io/bash<br>https://github.com/jlevy/the-art-of-command-line<br>https://yq.aliyun.com/articles/68541<br><br><span class="hljs-comment"># vim: set ts=4 sw=4 tw=0 et :</span><br><br><span class="hljs-comment">#转载这位大佬 https://github.com.cnpmjs.org/skywind3000/awesome-cheatsheets/blob/master/languages/bash.sh</span><br><br></code></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> bash </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>二进制部署kuberneters v1.20</title>
      <link href="2022/03/15/%E4%BA%8C%E8%BF%9B%E5%88%B6%E9%83%A8%E7%BD%B2%20kubernetes%20v1.20/"/>
      <url>2022/03/15/%E4%BA%8C%E8%BF%9B%E5%88%B6%E9%83%A8%E7%BD%B2%20kubernetes%20v1.20/</url>
      
        <content type="html"><![CDATA[<h2 id="整体结构"><a href="#整体结构" class="headerlink" title="整体结构"></a>整体结构</h2><ol><li><p>此教程部署一台单master节点(2个从节点)的集群</p><ul><li><p>软件环境</p><table><thead><tr><th>软件</th><th>版本</th></tr></thead><tbody><tr><td>操作系统</td><td>centos7.9</td></tr><tr><td>容器引擎</td><td>docker-CE 1.9</td></tr><tr><td>kubernetes</td><td>kubernetes v1.20</td></tr></tbody></table></li><li><p>整体规划</p><table><thead><tr><th>角色</th><th>ip</th><th>组件</th></tr></thead><tbody><tr><td>k8s-01</td><td>172.16.8.47</td><td>kube-apiserver, kube-controller-manager, kube-schedeler, docker, etcd</td></tr><tr><td>k8s-02</td><td>172.16.8.48</td><td>kubelet, kube-proxy, docker, etcd</td></tr><tr><td>k8s-03</td><td>172.16.8.49</td><td>kubelet, kube-proxy, docker, etcd</td></tr></tbody></table></li><li><p>单master结构图 </p><p><img src="https://cdn.jsdelivr.net/gh/natsu-ten/images/img/k8s%E5%8D%95master.jpg" alt="结构图"></p></li></ul></li><li><p>操作系统初始化配置 </p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">#关闭防火墙</span><br>systemctl stop firewalld<br>systemctl disabled firewalld<br><br><span class="hljs-comment">#关闭selinux</span><br>setenforce 0  <span class="hljs-comment">#临时关闭</span><br>sed -i <span class="hljs-string">&#x27;s@enforcing@disabled@&#x27;</span> /etc/selinux/config  <span class="hljs-comment"># 永久关闭</span><br><br><span class="hljs-comment">#关闭swap</span><br>swapoff -a <span class="hljs-comment">#临时关闭</span><br>sed -i <span class="hljs-string">&#x27;s@.*swap.*@#&amp;@&#x27;</span> /etc/fstab <span class="hljs-comment">#永久关闭</span><br><br><span class="hljs-comment">#根据规划设置主机名</span><br>hostnamectl set-hostname k8s-01 <span class="hljs-comment">#以此类推</span><br><br><span class="hljs-comment">#添加hosts</span><br>cat &gt;&gt; /etc/hosts &lt;&lt; <span class="hljs-string">EOF</span><br><span class="hljs-string">172.16.8.49  k8s-03</span><br><span class="hljs-string">172.16.8.48  k8s-02</span><br><span class="hljs-string">172.16.8.47  k8s-01</span><br><span class="hljs-string">EOF</span><br><br><span class="hljs-comment">#将桥接的ipv4流量传递到iptables的链</span><br>cat &gt; /etc/sysctl.d/k8s.conf &lt;&lt; <span class="hljs-string">EOF </span><br><span class="hljs-string">net.bridge.bridge-nf-call-ip6tables = 1 </span><br><span class="hljs-string">net.bridge.bridge-nf-call-iptables = 1 </span><br><span class="hljs-string">EOF</span> <br><br>sysctl --system <span class="hljs-comment">#生效</span><br><br><span class="hljs-comment">#同步时间</span><br>yum install ntpdate -y<br>ntpdate time.windows.com<br></code></pre></td></tr></table></figure></li></ol><h2 id="部署Etcd集群"><a href="#部署Etcd集群" class="headerlink" title="部署Etcd集群"></a>部署Etcd集群</h2><p>etcd是一个分布式键值存储系统, kubeernetes使用etcd进行数据库存储, 所以先准备一个etcd数据库,为解决etcd单点故障,一般采用集群方式部署, 这是使用3台机器组件集群,可容忍一台故障<br>| 节点名称 | ip |<br>| —| — |<br>| etcd-1 | 172.16.8.47 |<br>| etcd-2 | 172.16.8.48 |<br>| etcd-3 | 172.16.8.49 |</p><ol><li><p>准备 cfssl 证书生成工具</p><p> cfssl 是一个开源的证书管理工具, 使用json 文件生成证书, 相比openssl更方便使用,如下使用k8s-01节点操作:</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs bash">wget https://pkg.cfssl.org/R1.2/cfssl_linux-amd64<br>wget https://pkg.cfssl.org/R1.2/cfssljson_linux-amd64<br>wget https://pkg.cfssl.org/R1.2/cfssl-certinfo_linux-amd64<br>chmod +x cfssl_linux-amd64 cfssljson_linux-amd64 cfssl-certinfo_linux-amd64<br>mv cfssl_linux-amd64 /usr/<span class="hljs-built_in">local</span>/bin/cfssl<br>mv cfssljson_linux-amd64 /usr/<span class="hljs-built_in">local</span>/bin/cfssljson<br>mv cfssl-certinfo_linux-amd64 /usr/bin/cfssl-certinfo<br></code></pre></td></tr></table></figure></li><li><p>生成etcd证书</p><ol><li><p>自签证书颁发机构(CA)</p><p>创建工作目录:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">mkdir -p ~/TLS/&#123;etcd,k8s&#125;<br><br><span class="hljs-built_in">cd</span> ~/TLS/etcd<br><br></code></pre></td></tr></table></figure><p>  自签CA:</p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs bash">cat &gt; ca-config.json &lt;&lt; <span class="hljs-string">EOF</span><br><span class="hljs-string">&#123;</span><br><span class="hljs-string">  &quot;signing&quot;: &#123;</span><br><span class="hljs-string">    &quot;default&quot;: &#123;</span><br><span class="hljs-string">      &quot;expiry&quot;: &quot;87600h&quot;</span><br><span class="hljs-string">    &#125;,</span><br><span class="hljs-string">    &quot;profiles&quot;: &#123;</span><br><span class="hljs-string">      &quot;www&quot;: &#123;</span><br><span class="hljs-string">        &quot;expiry&quot;: &quot;87600h&quot;,</span><br><span class="hljs-string">        &quot;usages&quot;: [</span><br><span class="hljs-string">            &quot;signing&quot;,</span><br><span class="hljs-string">            &quot;key encipherment&quot;,</span><br><span class="hljs-string">            &quot;server auth&quot;,</span><br><span class="hljs-string">            &quot;client auth&quot;</span><br><span class="hljs-string">        ]</span><br><span class="hljs-string">      &#125;</span><br><span class="hljs-string">    &#125;</span><br><span class="hljs-string">  &#125;</span><br><span class="hljs-string">&#125;</span><br><span class="hljs-string">EOF</span><br><br>cat &gt; ca-csr.json &lt;&lt; <span class="hljs-string">EOF</span><br><span class="hljs-string">&#123;</span><br><span class="hljs-string">    &quot;CN&quot;: &quot;etcd CA&quot;,</span><br><span class="hljs-string">    &quot;key&quot;: &#123;</span><br><span class="hljs-string">        &quot;algo&quot;: &quot;rsa&quot;,</span><br><span class="hljs-string">        &quot;size&quot;: 2048</span><br><span class="hljs-string">    &#125;,</span><br><span class="hljs-string">    &quot;names&quot;: [</span><br><span class="hljs-string">        &#123;</span><br><span class="hljs-string">            &quot;C&quot;: &quot;CN&quot;,</span><br><span class="hljs-string">            &quot;L&quot;: &quot;Beijing&quot;,</span><br><span class="hljs-string">            &quot;ST&quot;: &quot;Beijing&quot;</span><br><span class="hljs-string">        &#125;</span><br><span class="hljs-string">    ]</span><br><span class="hljs-string">&#125;</span><br><span class="hljs-string">EOF</span><br><br></code></pre></td></tr></table></figure><p>  生成证书:</p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">cfssl gencert -initca ca-csr.json | cfssljson -bare ca -<br></code></pre></td></tr></table></figure><p>  会生成ca.pem 和 ca-key.pem 文件</p></li></ol></li><li><p>使用自签CA签发etcd https证书<br>创建证书申请文件:</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs bash">cat &gt; server-csr.json &lt;&lt; <span class="hljs-string">EOF</span><br><span class="hljs-string">&#123;</span><br><span class="hljs-string">    &quot;CN&quot;: &quot;etcd&quot;,</span><br><span class="hljs-string">    &quot;hosts&quot;: [</span><br><span class="hljs-string">    &quot;172.16.8.47&quot;,</span><br><span class="hljs-string">    &quot;172.16.8.48&quot;,</span><br><span class="hljs-string">    &quot;172.16.8.49&quot;,</span><br><span class="hljs-string">    &quot;172.16.8.50&quot;</span><br><span class="hljs-string">    ],</span><br><span class="hljs-string">    &quot;key&quot;: &#123;</span><br><span class="hljs-string">        &quot;algo&quot;: &quot;rsa&quot;,</span><br><span class="hljs-string">        &quot;size&quot;: 2048</span><br><span class="hljs-string">    &#125;,</span><br><span class="hljs-string">    &quot;names&quot;: [</span><br><span class="hljs-string">        &#123;</span><br><span class="hljs-string">            &quot;C&quot;: &quot;CN&quot;,</span><br><span class="hljs-string">            &quot;L&quot;: &quot;BeiJing&quot;,</span><br><span class="hljs-string">            &quot;ST&quot;: &quot;BeiJing&quot;</span><br><span class="hljs-string">        &#125;</span><br><span class="hljs-string">    ]</span><br><span class="hljs-string">&#125;</span><br><span class="hljs-string">EOF</span><br></code></pre></td></tr></table></figure><p> <code>注: 上述文件hosts字段中ip为所有etcd节点的集群通信ip,一个都不能少, 为了方便后期扩容,可以多写几个预留的ip</code></p><p> 生成证书:</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">cfssl gencert -ca=ca.pem -ca-key=ca-key.pem -config=ca-config.json -profile=www server-csr.json | cfssljson -bare server<br></code></pre></td></tr></table></figure><p> 会生成servre.pem 和 server-key.pem文件</p></li><li><p>从github下载二进制文件</p><p> 下载地址：<a href="https://github.com/etcd-io/etcd/releases/download/v3.4.9/etcd-v3.4.9-linux-amd64.tar.gz">https://github.com/etcd-io/etcd/releases/download/v3.4.9/etcd-v3.4.9-linux-amd64.tar.gz</a></p><ol><li><p>部署etcd集群 (为简化操作,所以操作在k8s-01上面完成,稍后拷贝到2-3节点)</p><ol><li><p>创建工作目录并解压二进制包</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">mkdir /opt/etcd/&#123;bin,cfg,ssl&#125; -p<br>tar zxvf etcd-v3.4.9-linux-amd64.tar.gz<br>mv etcd-v3.4.9-linux-amd64/&#123;etcd,etcdctl&#125; /opt/etcd/bin/<br><br></code></pre></td></tr></table></figure></li><li><p>创建etcd配置文件</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs bash">cat &gt; /opt/etcd/cfg/etcd.conf &lt;&lt; <span class="hljs-string">EOF</span><br><span class="hljs-string">#[Member]</span><br><span class="hljs-string">ETCD_NAME=&quot;etcd-1&quot;</span><br><span class="hljs-string">ETCD_DATA_DIR=&quot;/var/lib/etcd/default.etcd&quot;</span><br><span class="hljs-string">ETCD_LISTEN_PEER_URLS=&quot;https://172.16.8.47:2380&quot;</span><br><span class="hljs-string">ETCD_LISTEN_CLIENT_URLS=&quot;https://172.16.8.47:2379&quot;</span><br><span class="hljs-string"></span><br><span class="hljs-string">#[Clustering]</span><br><span class="hljs-string">ETCD_INITIAL_ADVERTISE_PEER_URLS=&quot;https://172.16.8.47:2380&quot;</span><br><span class="hljs-string">ETCD_ADVERTISE_CLIENT_URLS=&quot;https://172.16.8.47:2379&quot;</span><br><span class="hljs-string">ETCD_INITIAL_CLUSTER=&quot;etcd-1=https://172.16.8.47:2380,etcd-2=https://172.16.8.48:2380,etcd-3=https://172.16.8.49:2380&quot;</span><br><span class="hljs-string">ETCD_INITIAL_CLUSTER_TOKEN=&quot;etcd-cluster&quot;</span><br><span class="hljs-string">ETCD_INITIAL_CLUSTER_STATE=&quot;new&quot;</span><br><span class="hljs-string">EOF</span><br><br></code></pre></td></tr></table></figure><ul><li>   ETCD_NAME：节点名称，集群中唯一</li><li>ETCD_DATA_DIR：数据目录</li><li>ETCD_LISTEN_PEER_URLS：集群通信监听地址</li><li>   ETCD_LISTEN_CLIENT_URLS：客户端访问监听地址</li><li>   ETCD_INITIAL_ADVERTISE_PEERURLS：集群通告地址</li><li>   ETCD_ADVERTISE_CLIENT_URLS：客户端通告地址</li><li>   ETCD_INITIAL_CLUSTER：集群节点地址</li><li>   ETCD_INITIALCLUSTER_TOKEN：集群Token</li><li>   ETCD_INITIALCLUSTER_STATE：加入集群的当前状态，new是新集群，existing表示加入已有集群</li></ul></li><li><p>systemctl 管理etcd</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs bash">cat &gt; /usr/lib/systemd/system/etcd.service &lt;&lt; <span class="hljs-string">EOF</span><br><span class="hljs-string">[Unit]</span><br><span class="hljs-string">Description=Etcd Server</span><br><span class="hljs-string">After=network.target</span><br><span class="hljs-string">After=network-online.target</span><br><span class="hljs-string">Wants=network-online.target</span><br><span class="hljs-string"></span><br><span class="hljs-string">[Service]</span><br><span class="hljs-string">Type=notify</span><br><span class="hljs-string">EnvironmentFile=/opt/etcd/cfg/etcd.conf</span><br><span class="hljs-string">ExecStart=/opt/etcd/bin/etcd \</span><br><span class="hljs-string">--cert-file=/opt/etcd/ssl/server.pem \</span><br><span class="hljs-string">--key-file=/opt/etcd/ssl/server-key.pem \</span><br><span class="hljs-string">--peer-cert-file=/opt/etcd/ssl/server.pem \</span><br><span class="hljs-string">--peer-key-file=/opt/etcd/ssl/server-key.pem \</span><br><span class="hljs-string">--trusted-ca-file=/opt/etcd/ssl/ca.pem \</span><br><span class="hljs-string">--peer-trusted-ca-file=/opt/etcd/ssl/ca.pem \</span><br><span class="hljs-string">--logger=zap</span><br><span class="hljs-string">Restart=on-failure</span><br><span class="hljs-string">LimitNOFILE=65536</span><br><span class="hljs-string"></span><br><span class="hljs-string">[Install]</span><br><span class="hljs-string">WantedBy=multi-user.target</span><br><span class="hljs-string">EOF</span><br><br></code></pre></td></tr></table></figure></li><li><p>拷贝刚才生成的证书</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">cp ~/TLS/etcd/ca*pem ~/TLS/etcd/server*pem /opt/etcd/ssl/<br></code></pre></td></tr></table></figure></li><li><p>启动并设置开机启动</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">systemctl daemon-reload<br>systemctl start etcd<br>systemctl <span class="hljs-built_in">enable</span> etcd<br><br></code></pre></td></tr></table></figure></li><li><p>将上面节点1所有生成的文件拷贝到节点2和节点3(不熟练ansible 可以使用scp拷贝)</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs bash">ansible node -m copy -a <span class="hljs-string">&quot;src=/opt/etcd dest=/opt/&quot;</span><br>ansible node -m copy -a <span class="hljs-string">&quot;src=/usr/lib/systemd/system/etcd.service dest=/usr/lib/systemd/system/&quot;</span><br> ```  <br> 然后在节点2和节点3 分别修改 `etcd.conf` 配置文件中的节点名称和当前服务器IP<br>```bash<br>vim /opt/etcd/cfg/etcd.conf<br><span class="hljs-comment">#[Member]</span><br>ETCD_NAME=<span class="hljs-string">&quot;etcd-1&quot;</span>   <span class="hljs-comment"># 修改此处，节点2改为etcd-2，节点3改为etcd-3</span><br>ETCD_DATA_DIR=<span class="hljs-string">&quot;/var/lib/etcd/default.etcd&quot;</span><br>ETCD_LISTEN_PEER_URLS=<span class="hljs-string">&quot;https://172.16.8.47:2380&quot;</span>   <span class="hljs-comment"># 修改此处为当前服务器IP</span><br>ETCD_LISTEN_CLIENT_URLS=<span class="hljs-string">&quot;https://172.16.8.47:2379&quot;</span> <span class="hljs-comment"># 修改此处为当前服务器IP</span><br><br><span class="hljs-comment">#[Clustering]</span><br>ETCD_INITIAL_ADVERTISE_PEER_URLS=<span class="hljs-string">&quot;https://172.16.8.47:2380&quot;</span> <span class="hljs-comment"># 修改此处为当前服务器IP</span><br>ETCD_ADVERTISE_CLIENT_URLS=<span class="hljs-string">&quot;https://172.16.8.47:2379&quot;</span> <span class="hljs-comment"># 修改此处为当前服务器IP</span><br>ETCD_INITIAL_CLUSTER=<span class="hljs-string">&quot;etcd-1=https://172.16.8.47:2380,etcd-2=https://172.16.8.48:2380,etcd-3=https://172.16.8.49:2380&quot;</span><br>ETCD_INITIAL_CLUSTER_TOKEN=<span class="hljs-string">&quot;etcd-cluster&quot;</span><br>ETCD_INITIAL_CLUSTER_STATE=<span class="hljs-string">&quot;new&quot;</span><br><br></code></pre></td></tr></table></figure><p> 最后启动etcd并设置开机自动启动,同上</p></li><li><p>查看集群状态</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs bash">ETCDCTL_API=3 /opt/etcd/bin/etcdctl --cacert=/opt/etcd/ssl/ca.pem --cert=/opt/etcd/ssl/server.pem --key=/opt/etcd/ssl/server-key.pem --endpoints=<span class="hljs-string">&quot;https://172.16.8.47:2379,https://172.16.8.48:2379,https://172.16.8.49:2379&quot;</span> endpoint health --write-out=table<br><br>+--------------------------+--------+-------------+-------+<br>|         ENDPOINT         | HEALTH |    TOOK     | ERROR |<br>+--------------------------+--------+-------------+-------+<br>| https://172.16.8.47:2379 |   <span class="hljs-literal">true</span> | 12.747616ms |       |<br>| https://172.16.8.49:2379 |   <span class="hljs-literal">true</span> | 13.041258ms |       |<br>| https://172.16.8.48:2379 |   <span class="hljs-literal">true</span> | 13.438598ms |       |<br>+--------------------------+--------+-------------+-------+<br><br></code></pre></td></tr></table></figure><p> 如果输出以后信息,说明集群部署成功, 如果有问题先看日志 <code>/var/log/message 或 journalctl -u etcd</code></p></li></ol><h2 id="安装docker"><a href="#安装docker" class="headerlink" title="安装docker"></a>安装docker</h2><p>略</p></li></ol></li></ol><h2 id="部署k8s-01节点-master"><a href="#部署k8s-01节点-master" class="headerlink" title="部署k8s-01节点(master)"></a>部署k8s-01节点(master)</h2><ol><li><p>生成kube-apiserver证书</p><ol><li><p>自签颁发机构(CA)</p>   <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cd</span> ~/TLS/k8s<br><br>cat &gt; ca-config.json &lt;&lt; <span class="hljs-string">EOF</span><br><span class="hljs-string">&#123;</span><br><span class="hljs-string">  &quot;signing&quot;: &#123;</span><br><span class="hljs-string">    &quot;default&quot;: &#123;</span><br><span class="hljs-string">      &quot;expiry&quot;: &quot;87600h&quot;</span><br><span class="hljs-string">    &#125;,</span><br><span class="hljs-string">    &quot;profiles&quot;: &#123;</span><br><span class="hljs-string">      &quot;kubernetes&quot;: &#123;</span><br><span class="hljs-string">        &quot;expiry&quot;: &quot;87600h&quot;,</span><br><span class="hljs-string">        &quot;usages&quot;: [</span><br><span class="hljs-string">            &quot;signing&quot;,</span><br><span class="hljs-string">            &quot;key encipherment&quot;,</span><br><span class="hljs-string">            &quot;server auth&quot;,</span><br><span class="hljs-string">            &quot;client auth&quot;</span><br><span class="hljs-string">        ]</span><br><span class="hljs-string">      &#125;</span><br><span class="hljs-string">    &#125;</span><br><span class="hljs-string">  &#125;</span><br><span class="hljs-string">&#125;</span><br><span class="hljs-string">EOF</span><br><br>cat &gt; ca-csr.json &lt;&lt; <span class="hljs-string">EOF</span><br><span class="hljs-string">&#123;</span><br><span class="hljs-string">    &quot;CN&quot;: &quot;kubernetes&quot;,</span><br><span class="hljs-string">    &quot;key&quot;: &#123;</span><br><span class="hljs-string">        &quot;algo&quot;: &quot;rsa&quot;,</span><br><span class="hljs-string">        &quot;size&quot;: 2048</span><br><span class="hljs-string">    &#125;,</span><br><span class="hljs-string">    &quot;names&quot;: [</span><br><span class="hljs-string">        &#123;</span><br><span class="hljs-string">            &quot;C&quot;: &quot;CN&quot;,</span><br><span class="hljs-string">            &quot;L&quot;: &quot;Beijing&quot;,</span><br><span class="hljs-string">            &quot;ST&quot;: &quot;Beijing&quot;,</span><br><span class="hljs-string">            &quot;O&quot;: &quot;k8s&quot;,</span><br><span class="hljs-string">            &quot;OU&quot;: &quot;System&quot;</span><br><span class="hljs-string">        &#125;</span><br><span class="hljs-string">    ]</span><br><span class="hljs-string">&#125;</span><br><span class="hljs-string">EOF</span><br><br></code></pre></td></tr></table></figure><p>   生成证书</p>   <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">cfssl gencert -initca ca-csr.json | cfssljson -bare ca -<br></code></pre></td></tr></table></figure><p>   会生成ca.pem 和 ca-key.pem 文件</p></li><li><p>使用自签CA 签发kube-apiserver HTTPS 证书</p><p>   创建证书申请文件 </p>   <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs bash">cat &gt; server-csr.json &lt;&lt; <span class="hljs-string">EOF</span><br><span class="hljs-string">&#123;</span><br><span class="hljs-string">    &quot;CN&quot;: &quot;kubernetes&quot;,</span><br><span class="hljs-string">    &quot;hosts&quot;: [</span><br><span class="hljs-string">      &quot;10.0.0.1&quot;,</span><br><span class="hljs-string">      &quot;127.0.0.1&quot;,</span><br><span class="hljs-string">      &quot;172.16.8.47&quot;,</span><br><span class="hljs-string">      &quot;172.16.8.48&quot;,</span><br><span class="hljs-string">      &quot;172.16.8.49&quot;,</span><br><span class="hljs-string">      &quot;172.16.8.50&quot;,</span><br><span class="hljs-string">      &quot;kubernetes&quot;,</span><br><span class="hljs-string">      &quot;kubernetes.default&quot;,</span><br><span class="hljs-string">      &quot;kubernetes.default.svc&quot;,</span><br><span class="hljs-string">      &quot;kubernetes.default.svc.cluster&quot;,</span><br><span class="hljs-string">      &quot;kubernetes.default.svc.cluster.local&quot;</span><br><span class="hljs-string">    ],</span><br><span class="hljs-string">    &quot;key&quot;: &#123;</span><br><span class="hljs-string">        &quot;algo&quot;: &quot;rsa&quot;,</span><br><span class="hljs-string">        &quot;size&quot;: 2048</span><br><span class="hljs-string">    &#125;,</span><br><span class="hljs-string">    &quot;names&quot;: [</span><br><span class="hljs-string">        &#123;</span><br><span class="hljs-string">            &quot;C&quot;: &quot;CN&quot;,</span><br><span class="hljs-string">            &quot;L&quot;: &quot;BeiJing&quot;,</span><br><span class="hljs-string">            &quot;ST&quot;: &quot;BeiJing&quot;,</span><br><span class="hljs-string">            &quot;O&quot;: &quot;k8s&quot;,</span><br><span class="hljs-string">            &quot;OU&quot;: &quot;System&quot;</span><br><span class="hljs-string">        &#125;</span><br><span class="hljs-string">    ]</span><br><span class="hljs-string">&#125;</span><br><span class="hljs-string">EOF</span><br></code></pre></td></tr></table></figure><p>   <code>注: 上述文件hosts字段中的IP为所有master ,node 节点的ip 一个都不能少,为了后期方便扩容,可以多写几个ip 已做预留</code></p><p>  生成证书</p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">cfssl gencert -ca=ca.pem -ca-key=ca-key.pem -config=ca-config.json -profile=kubernetes server-csr.json | cfssljson -bare server<br></code></pre></td></tr></table></figure><p>  会生成server.pem 和 server-key.pem 文件</p></li></ol></li><li><p>从github下载二进制文件</p><p>   下载地址： <a href="https://github.com/kubernetes/kubernetes/blob/master/CHANGELOG/CHANGELOG-1.20.md">https://github.com/kubernetes/kubernetes/blob/master/CHANGELOG/CHANGELOG-1.20.md</a></p><p>   <code>注：打开链接你会发现里面有很多包，下载一个server包就够了，包含了Master和Worker Node二进制文件。</code></p></li><li><p>解压二进制包</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash">mkdir -p /opt/kubernetes/&#123;bin,cfg,ssl,logs&#125; <br>tar zxvf kubernetes-server-linux-amd64.tar.gz<br><span class="hljs-built_in">cd</span> kubernetes/server/bin<br>cp kube-apiserver kube-scheduler kube-controller-manager /opt/kubernetes/bin<br>cp kubectl /usr/bin/<br><br></code></pre></td></tr></table></figure></li><li><p>部署kube-apiserver</p><ol><li><p>创建配置文件</p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><code class="hljs bash">      cat &gt; /opt/kubernetes/cfg/kube-apiserver.conf &lt;&lt; <span class="hljs-string">EOF</span><br><span class="hljs-string">      KUBE_APISERVER_OPTS=&quot;--logtostderr=false \\</span><br><span class="hljs-string">      --v=2 \\</span><br><span class="hljs-string">      --log-dir=/opt/kubernetes/logs \\</span><br><span class="hljs-string">      --etcd-servers=https://172.16.8.47:2379,https://172.16.8.48:2379,https://172.16.8.49:2379 \\</span><br><span class="hljs-string">      --bind-address=172.16.8.47 \\</span><br><span class="hljs-string">      --secure-port=6443 \\</span><br><span class="hljs-string">      --advertise-address=172.16.8.47 \\</span><br><span class="hljs-string">      --allow-privileged=true \\</span><br><span class="hljs-string">      --service-cluster-ip-range=10.0.0.0/24 \\</span><br><span class="hljs-string">      --enable-admission-plugins=NamespaceLifecycle,LimitRanger,ServiceAccount,ResourceQuota,NodeRestriction \\</span><br><span class="hljs-string">      --authorization-mode=RBAC,Node \\</span><br><span class="hljs-string">      --enable-bootstrap-token-auth=true \\</span><br><span class="hljs-string">      --token-auth-file=/opt/kubernetes/cfg/token.csv \\</span><br><span class="hljs-string">      --service-node-port-range=0-32767 \\</span><br><span class="hljs-string">      --kubelet-client-certificate=/opt/kubernetes/ssl/server.pem \\</span><br><span class="hljs-string">      --kubelet-client-key=/opt/kubernetes/ssl/server-key.pem \\</span><br><span class="hljs-string">      --tls-cert-file=/opt/kubernetes/ssl/server.pem  \\</span><br><span class="hljs-string">      --tls-private-key-file=/opt/kubernetes/ssl/server-key.pem \\</span><br><span class="hljs-string">      --client-ca-file=/opt/kubernetes/ssl/ca.pem \\</span><br><span class="hljs-string">      --service-account-key-file=/opt/kubernetes/ssl/ca-key.pem \\</span><br><span class="hljs-string">      --service-account-issuer=api \\</span><br><span class="hljs-string">      --service-account-signing-key-file=/opt/kubernetes/ssl/server-key.pem \\</span><br><span class="hljs-string">      --etcd-cafile=/opt/etcd/ssl/ca.pem \\</span><br><span class="hljs-string">      --etcd-certfile=/opt/etcd/ssl/server.pem \\</span><br><span class="hljs-string">      --etcd-keyfile=/opt/etcd/ssl/server-key.pem \\</span><br><span class="hljs-string">      --requestheader-client-ca-file=/opt/kubernetes/ssl/ca.pem \\</span><br><span class="hljs-string">      --proxy-client-cert-file=/opt/kubernetes/ssl/server.pem \\</span><br><span class="hljs-string">      --proxy-client-key-file=/opt/kubernetes/ssl/server-key.pem \\</span><br><span class="hljs-string">      --requestheader-allowed-names=kubernetes \\</span><br><span class="hljs-string">      --requestheader-extra-headers-prefix=X-Remote-Extra- \\</span><br><span class="hljs-string">      --requestheader-group-headers=X-Remote-Group \\</span><br><span class="hljs-string">      --requestheader-username-headers=X-Remote-User \\</span><br><span class="hljs-string">      --enable-aggregator-routing=true \\</span><br><span class="hljs-string">      --audit-log-maxage=30 \\</span><br><span class="hljs-string">      --audit-log-maxbackup=3 \\</span><br><span class="hljs-string">      --audit-log-maxsize=100 \\</span><br><span class="hljs-string">      --audit-log-path=/opt/kubernetes/logs/k8s-audit.log&quot;</span><br><span class="hljs-string">      EOF</span><br><br>      ```   <br>      `注: 上面\ \ 第一个转义, 第二个是换行符, 使用转义符是为了使用EOF保留换行符 ` <br>      *--logtostderr：启用日志<br>      *---v：日志等级<br>      *--log-dir：日志目录<br>      *--etcd-servers：etcd集群地址<br>      *--bind-address：监听地址<br>      *--secure-port：https安全端口<br>      *--advertise-address：集群通告地址<br>      *--allow-privileged：启用授权<br>      *--service-cluster-ip-range：Service虚拟IP地址段<br>      *--enable-admission-plugins：准入控制模块<br>      *--authorization-mode：认证授权，启用RBAC授权和节点自管理<br>      *--enable-bootstrap-token-auth：启用TLS bootstrap机制<br>      *--token-auth-file：bootstrap token文件<br>      *--service-node-port-range：Service nodeport类型默认分配端口范围 建议改成 从0开始<br>      *--kubelet-client-xxx：apiserver访问kubelet客户端证书<br>      *--tls-xxx-file：apiserver https证书<br>      *1.20版本必须加的参数：--service-account-issuer --service-account-signing-key-file<br>      *--etcd-xxxfile：连接Etcd集群证书<br>      *--audit-log-xxx：审计日志<br>      *启动聚合层相关配置：--requestheader-client-ca-file，--proxy-client-cert-file，--proxy-client-key-file，--requestheader-allowed-names，--requestheader-extra-headers-prefix，--requestheader-group-headers，--requestheader-username-headers，--enable-aggregator-routing<br><br>2. 拷贝刚才生成的证书 <br><br>    把刚才生成的证书拷贝到配置文件中的路径<br>    <br>    ```bash<br>    cp ~/TLS/k8s/ca*pem ~/TLS/k8s/server*pem /opt/kubernetes/ssl/<br></code></pre></td></tr></table></figure></li><li><p>启用 TLS Bootstrapping 机制</p><p> <code>TLS Bootstraping : master apiserver 启用 TLS 认证后吗 Node 节点 kublet 和 kube-proxy 要与 kube-apiserver 进行通信, 必须使用 CA 签发的有效证书才可以, 当 Node 节点很多时, 这种客户端证书颁发需要大量工作,同样也会增加集群扩展复杂度,为了简化流程, Kubernetes 引入了 TLS Bootstrapping 机制来自动颁发客户端证书, kubelet 会以一个底权限用户自动向apiserver申请证书, kubelet的证书由apiserver 动态签署, 所以强烈建议在 Node 上使用这种方式, 目前主要用于 kubelet,  kube-proxy 还是由我们统一颁发一个证书</code> </p><p> TLS Bootstraping 工作流程:</p><p> <img src="https://cdn.jsdelivr.net/gh/natsu-ten/images/img/TLS-Bootstraping.png" alt="TLS BOOT流程图"></p><p> 创建上述配置文件中 token 文件:</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">cat &gt; /opt/kubernetes/cfg/token.csv &lt;&lt; <span class="hljs-string">EOF</span><br><span class="hljs-string">c47ffb939f5ca36231d9e3121a252940,kubelet-bootstrap,10001,&quot;system:node-bootstrapper&quot;</span><br><span class="hljs-string">EOF</span><br></code></pre></td></tr></table></figure><p> 格式: token, 用户名 , uid , 用户组<br> token 也可自行生成替换:</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">head -c 16 /dev/urandom | od -An -t x | tr -d <span class="hljs-string">&#x27; &#x27;</span><br></code></pre></td></tr></table></figure></li><li><p>systemctl 管理 apiserver</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs bash">cat &gt; /usr/lib/systemd/system/kube-apiserver.service &lt;&lt; <span class="hljs-string">EOF</span><br><span class="hljs-string">[Unit]</span><br><span class="hljs-string">Description=Kubernetes API Server</span><br><span class="hljs-string">Documentation=https://github.com/kubernetes/kubernetes</span><br><span class="hljs-string"></span><br><span class="hljs-string">[Service]</span><br><span class="hljs-string">EnvironmentFile=/opt/kubernetes/cfg/kube-apiserver.conf</span><br><span class="hljs-string">ExecStart=/opt/kubernetes/bin/kube-apiserver \$KUBE_APISERVER_OPTS</span><br><span class="hljs-string">Restart=on-failure</span><br><span class="hljs-string"></span><br><span class="hljs-string">[Install]</span><br><span class="hljs-string">WantedBy=multi-user.target</span><br><span class="hljs-string">EOF</span><br><br></code></pre></td></tr></table></figure></li><li><p>启动并设置开机启动</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">systemctl daemon-reload<br>systemctl start kube-apiserver <br>systemctl <span class="hljs-built_in">enable</span> kube-apiserver<br><br></code></pre></td></tr></table></figure></li></ol></li><li><p>部署kebe-controller-manager</p><ol><li><p>创建配置文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs bash">cat &gt; /opt/kubernetes/cfg/kube-controller-manager.conf &lt;&lt; <span class="hljs-string">EOF</span><br><span class="hljs-string">KUBE_CONTROLLER_MANAGER_OPTS=&quot;--logtostderr=false \\</span><br><span class="hljs-string">--v=2 \\</span><br><span class="hljs-string">--log-dir=/opt/kubernetes/logs \\</span><br><span class="hljs-string">--leader-elect=true \\</span><br><span class="hljs-string">--kubeconfig=/opt/kubernetes/cfg/kube-controller-manager.kubeconfig \\</span><br><span class="hljs-string">--bind-address=127.0.0.1 \\</span><br><span class="hljs-string">--allocate-node-cidrs=true \\</span><br><span class="hljs-string">--cluster-cidr=10.244.0.0/16 \\</span><br><span class="hljs-string">--service-cluster-ip-range=10.0.0.0/24 \\</span><br><span class="hljs-string">--cluster-signing-cert-file=/opt/kubernetes/ssl/ca.pem \\</span><br><span class="hljs-string">--cluster-signing-key-file=/opt/kubernetes/ssl/ca-key.pem  \\</span><br><span class="hljs-string">--root-ca-file=/opt/kubernetes/ssl/ca.pem \\</span><br><span class="hljs-string">--service-account-private-key-file=/opt/kubernetes/ssl/ca-key.pem \\</span><br><span class="hljs-string">--cluster-signing-duration=87600h0m0s&quot;</span><br><span class="hljs-string">EOF</span><br><br></code></pre></td></tr></table></figure><ul><li>   –kubeconfig：连接apiserver配置文件</li><li>–bind-address : 当部署promethres的时候 这一项改成 0.0.0.0 不然promethres获取不到kebe-controller-manager的信息</li><li>   –leader-elect：当该组件启动多个时，自动选举（HA）</li><li>   –cluster-signing-cert-file/–cluster-signing-key-file：自动为kubelet颁发证书的CA，与apiserver保持一致</li></ul></li></ol></li></ol><pre><code> 2. 生产kubeconfig 文件    生成kube-controller-manager证书    <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 切换工作目录</span><br><span class="hljs-built_in">cd</span> ~/TLS/k8s<br><br><span class="hljs-comment"># 创建证书请求文件</span><br>cat &gt; kube-controller-manager-csr.json &lt;&lt; <span class="hljs-string">EOF</span><br><span class="hljs-string">&#123;</span><br><span class="hljs-string">  &quot;CN&quot;: &quot;system:kube-controller-manager&quot;,</span><br><span class="hljs-string">  &quot;hosts&quot;: [],</span><br><span class="hljs-string">  &quot;key&quot;: &#123;</span><br><span class="hljs-string">    &quot;algo&quot;: &quot;rsa&quot;,</span><br><span class="hljs-string">    &quot;size&quot;: 2048</span><br><span class="hljs-string">  &#125;,</span><br><span class="hljs-string">  &quot;names&quot;: [</span><br><span class="hljs-string">    &#123;</span><br><span class="hljs-string">      &quot;C&quot;: &quot;CN&quot;,</span><br><span class="hljs-string">      &quot;L&quot;: &quot;BeiJing&quot;, </span><br><span class="hljs-string">      &quot;ST&quot;: &quot;BeiJing&quot;,</span><br><span class="hljs-string">      &quot;O&quot;: &quot;system:masters&quot;,</span><br><span class="hljs-string">      &quot;OU&quot;: &quot;System&quot;</span><br><span class="hljs-string">    &#125;</span><br><span class="hljs-string">  ]</span><br><span class="hljs-string">&#125;</span><br><span class="hljs-string">EOF</span><br><br><span class="hljs-comment"># 生成证书</span><br>cfssl gencert -ca=ca.pem -ca-key=ca-key.pem -config=ca-config.json -profile=kubernetes kube-controller-manager-csr.json | cfssljson -bare kube-controller-manager<br><br></code></pre></td></tr></table></figure>    生成kubeconfig文件,(以下是shell命令 直接在终端执行)    <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs bash">KUBE_CONFIG=<span class="hljs-string">&quot;/opt/kubernetes/cfg/kube-controller-manager.kubeconfig&quot;</span><br>KUBE_APISERVER=<span class="hljs-string">&quot;https://172.16.8.47:6443&quot;</span><br><br>kubectl config set-cluster kubernetes \<br>--certificate-authority=/opt/kubernetes/ssl/ca.pem \<br>--embed-certs=<span class="hljs-literal">true</span> \<br>--server=<span class="hljs-variable">$&#123;KUBE_APISERVER&#125;</span> \<br>--kubeconfig=<span class="hljs-variable">$&#123;KUBE_CONFIG&#125;</span><br>kubectl config set-credentials kube-controller-manager \<br>--client-certificate=./kube-controller-manager.pem \<br>--client-key=./kube-controller-manager-key.pem \<br>--embed-certs=<span class="hljs-literal">true</span> \<br>--kubeconfig=<span class="hljs-variable">$&#123;KUBE_CONFIG&#125;</span><br>kubectl config set-context default \<br>--cluster=kubernetes \<br>--user=kube-controller-manager \<br>--kubeconfig=<span class="hljs-variable">$&#123;KUBE_CONFIG&#125;</span><br>kubectl config use-context default --kubeconfig=<span class="hljs-variable">$&#123;KUBE_CONFIG&#125;</span><br><br></code></pre></td></tr></table></figure> 3. systemctl 管理 controller-manager    <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs bash">cat &gt; /usr/lib/systemd/system/kube-controller-manager.service &lt;&lt; <span class="hljs-string">EOF</span><br><span class="hljs-string">[Unit]</span><br><span class="hljs-string">Description=Kubernetes Controller Manager</span><br><span class="hljs-string">Documentation=https://github.com/kubernetes/kubernetes</span><br><span class="hljs-string"></span><br><span class="hljs-string">[Service]</span><br><span class="hljs-string">EnvironmentFile=/opt/kubernetes/cfg/kube-controller-manager.conf</span><br><span class="hljs-string">ExecStart=/opt/kubernetes/bin/kube-controller-manager \$KUBE_CONTROLLER_MANAGER_OPTS</span><br><span class="hljs-string">Restart=on-failure</span><br><span class="hljs-string"></span><br><span class="hljs-string">[Install]</span><br><span class="hljs-string">WantedBy=multi-user.target</span><br><span class="hljs-string">EOF</span><br><br></code></pre></td></tr></table></figure> 4. 启动并设置开机启动    <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">systemctl daemon-reload<br>systemctl start kube-controller-manager<br>systemctl <span class="hljs-built_in">enable</span> kube-controller-manager<br><br></code></pre></td></tr></table></figure> 5. 部署kube-scheduler    1. 创建配置文件                <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs bash">cat &gt; /opt/kubernetes/cfg/kube-scheduler.conf &lt;&lt; <span class="hljs-string">EOF</span><br><span class="hljs-string">KUBE_SCHEDULER_OPTS=&quot;--logtostderr=false \\</span><br><span class="hljs-string">--v=2 \\</span><br><span class="hljs-string">--log-dir=/opt/kubernetes/logs \\</span><br><span class="hljs-string">--leader-elect \\</span><br><span class="hljs-string">--kubeconfig=/opt/kubernetes/cfg/kube-scheduler.kubeconfig \\</span><br><span class="hljs-string">--bind-address=127.0.0.1&quot;</span><br><span class="hljs-string">EOF</span><br><br></code></pre></td></tr></table></figure>      *    --kubeconfig：连接apiserver配置文件      *    --leader-elect：当该组件启动多个时，自动选举（HA）      * --bind-address: 部署promethres的时候 需要设置 0.0.0.0           2.  生成kube-scheduler证书        <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 切换工作目录</span><br><span class="hljs-built_in">cd</span> ~/TLS/k8s<br><br><span class="hljs-comment"># 创建证书请求文件</span><br>cat &gt; kube-scheduler-csr.json &lt;&lt; <span class="hljs-string">EOF</span><br><span class="hljs-string">&#123;</span><br><span class="hljs-string">  &quot;CN&quot;: &quot;system:kube-scheduler&quot;,</span><br><span class="hljs-string">  &quot;hosts&quot;: [],</span><br><span class="hljs-string">  &quot;key&quot;: &#123;</span><br><span class="hljs-string">    &quot;algo&quot;: &quot;rsa&quot;,</span><br><span class="hljs-string">    &quot;size&quot;: 2048</span><br><span class="hljs-string">  &#125;,</span><br><span class="hljs-string">  &quot;names&quot;: [</span><br><span class="hljs-string">    &#123;</span><br><span class="hljs-string">      &quot;C&quot;: &quot;CN&quot;,</span><br><span class="hljs-string">      &quot;L&quot;: &quot;BeiJing&quot;,</span><br><span class="hljs-string">      &quot;ST&quot;: &quot;BeiJing&quot;,</span><br><span class="hljs-string">      &quot;O&quot;: &quot;system:masters&quot;,</span><br><span class="hljs-string">      &quot;OU&quot;: &quot;System&quot;</span><br><span class="hljs-string">    &#125;</span><br><span class="hljs-string">  ]</span><br><span class="hljs-string">&#125;</span><br><span class="hljs-string">EOF</span><br><br><span class="hljs-comment"># 生成证书</span><br>cfssl gencert -ca=ca.pem -ca-key=ca-key.pem -config=ca-config.json -profile=kubernetes kube-scheduler-csr.json | cfssljson -bare kube-scheduler<br><br>```  <br>生成kubeconfig文件（以下是shell命令，直接在终端执行）<br><br>```bash<br>KUBE_CONFIG=<span class="hljs-string">&quot;/opt/kubernetes/cfg/kube-scheduler.kubeconfig&quot;</span><br>KUBE_APISERVER=<span class="hljs-string">&quot;https://172.16.8.47:6443&quot;</span><br><br>kubectl config set-cluster kubernetes \<br>  --certificate-authority=/opt/kubernetes/ssl/ca.pem \<br>  --embed-certs=<span class="hljs-literal">true</span> \<br>  --server=<span class="hljs-variable">$&#123;KUBE_APISERVER&#125;</span> \<br>  --kubeconfig=<span class="hljs-variable">$&#123;KUBE_CONFIG&#125;</span><br>kubectl config set-credentials kube-scheduler \<br>  --client-certificate=./kube-scheduler.pem \<br>  --client-key=./kube-scheduler-key.pem \<br>  --embed-certs=<span class="hljs-literal">true</span> \<br>  --kubeconfig=<span class="hljs-variable">$&#123;KUBE_CONFIG&#125;</span><br>kubectl config set-context default \<br>  --cluster=kubernetes \<br>  --user=kube-scheduler \<br>  --kubeconfig=<span class="hljs-variable">$&#123;KUBE_CONFIG&#125;</span><br>kubectl config use-context default --kubeconfig=<span class="hljs-variable">$&#123;KUBE_CONFIG&#125;</span><br><br></code></pre></td></tr></table></figure>    2. systemd管理scheduler       <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs bash">cat &gt; /usr/lib/systemd/system/kube-scheduler.service &lt;&lt; <span class="hljs-string">EOF</span><br><span class="hljs-string"> [Unit]</span><br><span class="hljs-string"> Description=Kubernetes Scheduler</span><br><span class="hljs-string"> Documentation=https://github.com/kubernetes/kubernetes</span><br><span class="hljs-string"></span><br><span class="hljs-string"> [Service]</span><br><span class="hljs-string"> EnvironmentFile=/opt/kubernetes/cfg/kube-scheduler.conf</span><br><span class="hljs-string"> ExecStart=/opt/kubernetes/bin/kube-scheduler \$KUBE_SCHEDULER_OPTS</span><br><span class="hljs-string"> Restart=on-failure</span><br><span class="hljs-string"></span><br><span class="hljs-string"> [Install]</span><br><span class="hljs-string"> WantedBy=multi-user.target</span><br><span class="hljs-string"> EOF</span><br><br></code></pre></td></tr></table></figure>    3. 启动并设置开机启动       <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">systemctl daemon-reload<br>systemctl start kube-scheduler<br>systemctl <span class="hljs-built_in">enable</span> kube-scheduler<br><br></code></pre></td></tr></table></figure>    4. 查看集群状态       `生成kubectl连接集群的证书 `       <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs bash"> cat &gt; admin-csr.json &lt;&lt;<span class="hljs-string">EOF</span><br><span class="hljs-string"> &#123;</span><br><span class="hljs-string">   &quot;CN&quot;: &quot;admin&quot;,</span><br><span class="hljs-string">   &quot;hosts&quot;: [],</span><br><span class="hljs-string">   &quot;key&quot;: &#123;</span><br><span class="hljs-string">     &quot;algo&quot;: &quot;rsa&quot;,</span><br><span class="hljs-string">     &quot;size&quot;: 2048</span><br><span class="hljs-string">   &#125;,</span><br><span class="hljs-string">   &quot;names&quot;: [</span><br><span class="hljs-string">     &#123;</span><br><span class="hljs-string">       &quot;C&quot;: &quot;CN&quot;,</span><br><span class="hljs-string">       &quot;L&quot;: &quot;BeiJing&quot;,</span><br><span class="hljs-string">       &quot;ST&quot;: &quot;BeiJing&quot;,</span><br><span class="hljs-string">       &quot;O&quot;: &quot;system:masters&quot;,</span><br><span class="hljs-string">       &quot;OU&quot;: &quot;System&quot;</span><br><span class="hljs-string">     &#125;</span><br><span class="hljs-string">   ]</span><br><span class="hljs-string"> &#125;</span><br><span class="hljs-string"> EOF</span><br><br><span class="hljs-comment">#生成证书 </span><br> cfssl gencert -ca=ca.pem -ca-key=ca-key.pem -config=ca-config.json -profile=kubernetes admin-csr.json | cfssljson -bare admin<br><br></code></pre></td></tr></table></figure>       生产kubeconfig证书       <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs bash">mkdir /root/.kube<br><br>KUBE_CONFIG=<span class="hljs-string">&quot;/root/.kube/config&quot;</span><br>KUBE_APISERVER=<span class="hljs-string">&quot;https://172.16.8.47:6443&quot;</span><br><br>kubectl config set-cluster kubernetes \<br>  --certificate-authority=/opt/kubernetes/ssl/ca.pem \<br>  --embed-certs=<span class="hljs-literal">true</span> \<br>  --server=<span class="hljs-variable">$&#123;KUBE_APISERVER&#125;</span> \<br>  --kubeconfig=<span class="hljs-variable">$&#123;KUBE_CONFIG&#125;</span><br>kubectl config set-credentials cluster-admin \<br>  --client-certificate=./admin.pem \<br>  --client-key=./admin-key.pem \<br>  --embed-certs=<span class="hljs-literal">true</span> \<br>  --kubeconfig=<span class="hljs-variable">$&#123;KUBE_CONFIG&#125;</span><br>kubectl config set-context default \<br>  --cluster=kubernetes \<br>  --user=cluster-admin \<br>  --kubeconfig=<span class="hljs-variable">$&#123;KUBE_CONFIG&#125;</span><br>kubectl config use-context default --kubeconfig=<span class="hljs-variable">$&#123;KUBE_CONFIG&#125;</span><br><br></code></pre></td></tr></table></figure>       通过kubectl 查看当前集群的组件状态       <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs bash">Warning: v1 ComponentStatus is deprecated <span class="hljs-keyword">in</span> v1.19+<br>NAME                 STATUS    MESSAGE             ERROR<br>controller-manager   Healthy   ok<br>scheduler            Healthy   ok<br>etcd-1               Healthy   &#123;<span class="hljs-string">&quot;health&quot;</span>:<span class="hljs-string">&quot;true&quot;</span>&#125;<br>etcd-2               Healthy   &#123;<span class="hljs-string">&quot;health&quot;</span>:<span class="hljs-string">&quot;true&quot;</span>&#125;<br>etcd-0               Healthy   &#123;<span class="hljs-string">&quot;health&quot;</span>:<span class="hljs-string">&quot;true&quot;</span>&#125;<br></code></pre></td></tr></table></figure>       如上输出说明master节点组件运行正常    5. `授权kubelet-bootstrap用户允许请求证书`       <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">kubectl create clusterrolebinding kubelet-bootstrap \<br>--clusterrole=system:node-bootstrapper \<br>--user=kubelet-bootstrap<br><br></code></pre></td></tr></table></figure></code></pre><h2 id="部署node-节点"><a href="#部署node-节点" class="headerlink" title="部署node 节点"></a>部署node 节点</h2><ol><li><p>这步操作还是在master上面操作, 视master为一个主节点</p><ol><li><p>创建工作目录并拷贝二进制文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">mkdir -p /opt/kubernetes/&#123;bin,cfg,ssl,logs&#125; <br></code></pre></td></tr></table></figure><p>拷贝配置文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cd</span> kubernetes/server/bin<br>cp kubelet kube-proxy /opt/kubernetes/bin  <span class="hljs-comment">#本地拷贝</span><br></code></pre></td></tr></table></figure></li><li><p>部署 kubelet</p><ol><li><p>创建配置文件</p>   <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs bash">cat &gt; /opt/kubernetes/cfg/kubelet.conf &lt;&lt; <span class="hljs-string">EOF</span><br><span class="hljs-string">KUBELET_OPTS=&quot;--logtostderr=false \\</span><br><span class="hljs-string">--v=2 \\</span><br><span class="hljs-string">--log-dir=/opt/kubernetes/logs \\</span><br><span class="hljs-string">--hostname-override=k8s-01 \\</span><br><span class="hljs-string">--network-plugin=cni \\</span><br><span class="hljs-string">--kubeconfig=/opt/kubernetes/cfg/kubelet.kubeconfig \\</span><br><span class="hljs-string">--bootstrap-kubeconfig=/opt/kubernetes/cfg/bootstrap.kubeconfig \\</span><br><span class="hljs-string">--config=/opt/kubernetes/cfg/kubelet-config.yml \\</span><br><span class="hljs-string">--cert-dir=/opt/kubernetes/ssl \\</span><br><span class="hljs-string">--pod-infra-container-image=lizhenliang/pause-amd64:3.0&quot;</span><br><span class="hljs-string">EOF</span><br><br></code></pre></td></tr></table></figure><ul><li><p>   –hostname-override：显示名称，集群中唯一</p></li><li><p>   –network-plugin：启用CNI</p></li><li><p>   –kubeconfig：空路径，会自动生成，后面用于连接apiserver</p></li><li><p>   –bootstrap-kubeconfig：首次启动向apiserver申请证书</p></li><li><p>   –config：配置参数文件</p></li><li><p>   –cert-dir：kubelet证书生成目录</p></li><li><p>–pod-infra-container-image：管理Pod网络容器的镜像 </p><p>配置参数文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs bash">cat &gt; /opt/kubernetes/cfg/kubelet-config.yml &lt;&lt; <span class="hljs-string">EOF</span><br><span class="hljs-string">kind: KubeletConfiguration</span><br><span class="hljs-string">apiVersion: kubelet.config.k8s.io/v1beta1</span><br><span class="hljs-string">address: 0.0.0.0</span><br><span class="hljs-string">port: 10250</span><br><span class="hljs-string">readOnlyPort: 10255</span><br><span class="hljs-string">cgroupDriver: cgroupfs</span><br><span class="hljs-string">clusterDNS:</span><br><span class="hljs-string">- 10.0.0.2</span><br><span class="hljs-string">clusterDomain: cluster.local </span><br><span class="hljs-string">failSwapOn: false</span><br><span class="hljs-string">authentication:</span><br><span class="hljs-string">  anonymous:</span><br><span class="hljs-string">    enabled: false</span><br><span class="hljs-string">  webhook:</span><br><span class="hljs-string">    cacheTTL: 2m0s</span><br><span class="hljs-string">    enabled: true</span><br><span class="hljs-string">  x509:</span><br><span class="hljs-string">    clientCAFile: /opt/kubernetes/ssl/ca.pem </span><br><span class="hljs-string">authorization:</span><br><span class="hljs-string">  mode: Webhook</span><br><span class="hljs-string">  webhook:</span><br><span class="hljs-string">    cacheAuthorizedTTL: 5m0s</span><br><span class="hljs-string">    cacheUnauthorizedTTL: 30s</span><br><span class="hljs-string">evictionHard:</span><br><span class="hljs-string">  imagefs.available: 15%</span><br><span class="hljs-string">  memory.available: 100Mi</span><br><span class="hljs-string">  nodefs.available: 10%</span><br><span class="hljs-string">  nodefs.inodesFree: 5%</span><br><span class="hljs-string">maxOpenFiles: 1000000</span><br><span class="hljs-string">maxPods: 110</span><br><span class="hljs-string">EOF</span><br><br></code></pre></td></tr></table></figure></li></ul></li><li><p>生成kubelet初次加入集群引导kubeconfig文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs bash">KUBE_CONFIG=<span class="hljs-string">&quot;/opt/kubernetes/cfg/bootstrap.kubeconfig&quot;</span><br>KUBE_APISERVER=<span class="hljs-string">&quot;https://172.16.8.47:6443&quot;</span> <span class="hljs-comment"># apiserver IP:PORT</span><br>TOKEN=<span class="hljs-string">&quot;c47ffb939f5ca36231d9e3121a252940&quot;</span> <span class="hljs-comment"># 与token.csv里保持一致</span><br><br><span class="hljs-comment"># 生成 kubelet bootstrap kubeconfig 配置文件</span><br>kubectl config set-cluster kubernetes \<br>  --certificate-authority=/opt/kubernetes/ssl/ca.pem \<br>  --embed-certs=<span class="hljs-literal">true</span> \<br>  --server=<span class="hljs-variable">$&#123;KUBE_APISERVER&#125;</span> \<br>  --kubeconfig=<span class="hljs-variable">$&#123;KUBE_CONFIG&#125;</span><br>kubectl config set-credentials <span class="hljs-string">&quot;kubelet-bootstrap&quot;</span> \<br>  --token=<span class="hljs-variable">$&#123;TOKEN&#125;</span> \<br>  --kubeconfig=<span class="hljs-variable">$&#123;KUBE_CONFIG&#125;</span><br>kubectl config set-context default \<br>  --cluster=kubernetes \<br>  --user=<span class="hljs-string">&quot;kubelet-bootstrap&quot;</span> \<br>  --kubeconfig=<span class="hljs-variable">$&#123;KUBE_CONFIG&#125;</span><br>kubectl config use-context default --kubeconfig=<span class="hljs-variable">$&#123;KUBE_CONFIG&#125;</span><br><br></code></pre></td></tr></table></figure></li><li><p>systemd管理kubelet</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs bash">cat &gt; /usr/lib/systemd/system/kubelet.service &lt;&lt; <span class="hljs-string">EOF</span><br><span class="hljs-string">[Unit]</span><br><span class="hljs-string">Description=Kubernetes Kubelet</span><br><span class="hljs-string">After=docker.service</span><br><span class="hljs-string"></span><br><span class="hljs-string">[Service]</span><br><span class="hljs-string">EnvironmentFile=/opt/kubernetes/cfg/kubelet.conf</span><br><span class="hljs-string">ExecStart=/opt/kubernetes/bin/kubelet \$KUBELET_OPTS</span><br><span class="hljs-string">Restart=on-failure</span><br><span class="hljs-string">LimitNOFILE=65536</span><br><span class="hljs-string"></span><br><span class="hljs-string">[Install]</span><br><span class="hljs-string">WantedBy=multi-user.target</span><br><span class="hljs-string">EOF</span><br><br></code></pre></td></tr></table></figure></li><li><p>设置并设置开机自启</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">systemctl daemon-reload<br>systemctl start kubelet<br>systemctl <span class="hljs-built_in">enable</span> kubelet<br></code></pre></td></tr></table></figure></li><li><p>批准kubelet证书申请并加入集群</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 查看kubelet证书请求</span><br> kubectl get csr<br> NAME                                                   AGE    SIGNERNAME                                    REQUESTOR           CONDITION<br> node-csr-uCEGPOIiDdlLODKts8J658HrFq9CZ--K6M4G7bjhk8A   6m3s   kubernetes.io/kube-apiserver-client-kubelet   kubelet-bootstrap   Pending<br><br> <span class="hljs-comment"># 批准申请</span><br> kubectl certificate approve node-csr-uCEGPOIiDdlLODKts8J658HrFq9CZ--K6M4G7bjhk8A<br><br> <span class="hljs-comment"># 查看节点</span><br> kubectl get node<br> NAME         STATUS     ROLES    AGE   VERSION<br> k8s-01   NotReady   &lt;none&gt;   7s    v1.18.3<br><br></code></pre></td></tr></table></figure><p><code>注: 由于网络插件还没有部署，节点会没有准备就绪 NotReady</code></p></li><li><p>部署kube-proxy</p><ol><li><p>创建配置文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs bash">cat &gt; /opt/kubernetes/cfg/kube-proxy.conf &lt;&lt; <span class="hljs-string">EOF</span><br><span class="hljs-string">KUBE_PROXY_OPTS=&quot;--logtostderr=false \\</span><br><span class="hljs-string">--v=2 \\</span><br><span class="hljs-string">--log-dir=/opt/kubernetes/logs \\</span><br><span class="hljs-string">--config=/opt/kubernetes/cfg/kube-proxy-config.yml&quot;</span><br><span class="hljs-string">EOF</span><br><br></code></pre></td></tr></table></figure></li></ol></li><li><p>配置参数文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs bash">cat &gt; /opt/kubernetes/cfg/kube-proxy-config.yml &lt;&lt; <span class="hljs-string">EOF</span><br><span class="hljs-string"> kind: KubeProxyConfiguration</span><br><span class="hljs-string"> apiVersion: kubeproxy.config.k8s.io/v1alpha1</span><br><span class="hljs-string"> bindAddress: 0.0.0.0</span><br><span class="hljs-string"> metricsBindAddress: 0.0.0.0:10249</span><br><span class="hljs-string"> clientConnection:</span><br><span class="hljs-string">   kubeconfig: /opt/kubernetes/cfg/kube-proxy.kubeconfig</span><br><span class="hljs-string"> hostnameOverride: k8s-master1</span><br><span class="hljs-string"> clusterCIDR: 10.0.0.0/24</span><br><span class="hljs-string"> EOF</span><br><br></code></pre></td></tr></table></figure></li><li><p>生成kube-proxy.kubeconfig 文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 切换工作目录</span><br> <span class="hljs-built_in">cd</span> ~/TLS/k8s<br><br> <span class="hljs-comment"># 创建证书请求文件</span><br> cat &gt; kube-proxy-csr.json &lt;&lt; <span class="hljs-string">EOF</span><br><span class="hljs-string"> &#123;</span><br><span class="hljs-string">   &quot;CN&quot;: &quot;system:kube-proxy&quot;,</span><br><span class="hljs-string">   &quot;hosts&quot;: [],</span><br><span class="hljs-string">   &quot;key&quot;: &#123;</span><br><span class="hljs-string">     &quot;algo&quot;: &quot;rsa&quot;,</span><br><span class="hljs-string">     &quot;size&quot;: 2048</span><br><span class="hljs-string">   &#125;,</span><br><span class="hljs-string">   &quot;names&quot;: [</span><br><span class="hljs-string">     &#123;</span><br><span class="hljs-string">       &quot;C&quot;: &quot;CN&quot;,</span><br><span class="hljs-string">       &quot;L&quot;: &quot;BeiJing&quot;,</span><br><span class="hljs-string">       &quot;ST&quot;: &quot;BeiJing&quot;,</span><br><span class="hljs-string">       &quot;O&quot;: &quot;k8s&quot;,</span><br><span class="hljs-string">       &quot;OU&quot;: &quot;System&quot;</span><br><span class="hljs-string">     &#125;</span><br><span class="hljs-string">   ]</span><br><span class="hljs-string"> &#125;</span><br><span class="hljs-string"> EOF</span><br><br> <span class="hljs-comment"># 生成证书</span><br> cfssl gencert -ca=ca.pem -ca-key=ca-key.pem -config=ca-config.json -profile=kubernetes kube-proxy-csr.json | cfssljson -bare kube-proxy<br><br></code></pre></td></tr></table></figure><p>生成kubeconfig文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs bash">KUBE_CONFIG=<span class="hljs-string">&quot;/opt/kubernetes/cfg/kube-proxy.kubeconfig&quot;</span><br>KUBE_APISERVER=<span class="hljs-string">&quot;https://172.16.8.47:6443&quot;</span><br><br>kubectl config set-cluster kubernetes \<br>  --certificate-authority=/opt/kubernetes/ssl/ca.pem \<br>  --embed-certs=<span class="hljs-literal">true</span> \<br>  --server=<span class="hljs-variable">$&#123;KUBE_APISERVER&#125;</span> \<br>  --kubeconfig=<span class="hljs-variable">$&#123;KUBE_CONFIG&#125;</span><br>kubectl config set-credentials kube-proxy \<br>  --client-certificate=./kube-proxy.pem \<br>  --client-key=./kube-proxy-key.pem \<br>  --embed-certs=<span class="hljs-literal">true</span> \<br>  --kubeconfig=<span class="hljs-variable">$&#123;KUBE_CONFIG&#125;</span><br>kubectl config set-context default \<br>  --cluster=kubernetes \<br>  --user=kube-proxy \<br>  --kubeconfig=<span class="hljs-variable">$&#123;KUBE_CONFIG&#125;</span><br>kubectl config use-context default --kubeconfig=<span class="hljs-variable">$&#123;KUBE_CONFIG&#125;</span><br><br></code></pre></td></tr></table></figure></li></ol></li><li><p>systemd管理kube-proxy</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs bash">cat &gt; /usr/lib/systemd/system/kube-proxy.service &lt;&lt; <span class="hljs-string">EOF</span><br><span class="hljs-string">[Unit]</span><br><span class="hljs-string">Description=Kubernetes Proxy</span><br><span class="hljs-string">After=network.target</span><br><span class="hljs-string"></span><br><span class="hljs-string">[Service]</span><br><span class="hljs-string">EnvironmentFile=/opt/kubernetes/cfg/kube-proxy.conf</span><br><span class="hljs-string">ExecStart=/opt/kubernetes/bin/kube-proxy \$KUBE_PROXY_OPTS</span><br><span class="hljs-string">Restart=on-failure</span><br><span class="hljs-string">LimitNOFILE=65536</span><br><span class="hljs-string"></span><br><span class="hljs-string">[Install]</span><br><span class="hljs-string">WantedBy=multi-user.target</span><br><span class="hljs-string">EOF</span><br><br></code></pre></td></tr></table></figure></li><li><p>启动并设置开机启动</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">systemctl daemon-reload<br>systemctl start kube-proxy<br>systemctl <span class="hljs-built_in">enable</span> kube-proxy<br><br></code></pre></td></tr></table></figure></li></ol><h2 id="部署网络组件"><a href="#部署网络组件" class="headerlink" title="部署网络组件"></a>部署网络组件</h2></li><li><p>Calico是一个纯三层的数据中心网络方案，是目前Kubernetes主流的网络方案。<br>部署Calico：</p><p> 参考官网: <a href="https://docs.projectcalico.org/getting-started/kubernetes/self-managed-onprem/onpremises">https://docs.projectcalico.org/getting-started/kubernetes/self-managed-onprem/onpremises</a></p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">kubectl apply -f calico.yaml<br>kubectl get pods -n kube-system<br><br></code></pre></td></tr></table></figure><p> 等Calico Pod都Running，节点也会准备就绪：</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">kubectl get node<br>NAME         STATUS   ROLES    AGE   VERSION<br>k8s-master   Ready    &lt;none&gt;   37m   v1.20.4<br><br></code></pre></td></tr></table></figure><p> yaml文件如下:</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br><span class="line">426</span><br><span class="line">427</span><br><span class="line">428</span><br><span class="line">429</span><br><span class="line">430</span><br><span class="line">431</span><br><span class="line">432</span><br><span class="line">433</span><br><span class="line">434</span><br><span class="line">435</span><br><span class="line">436</span><br><span class="line">437</span><br><span class="line">438</span><br><span class="line">439</span><br><span class="line">440</span><br><span class="line">441</span><br><span class="line">442</span><br><span class="line">443</span><br><span class="line">444</span><br><span class="line">445</span><br><span class="line">446</span><br><span class="line">447</span><br><span class="line">448</span><br><span class="line">449</span><br><span class="line">450</span><br><span class="line">451</span><br><span class="line">452</span><br><span class="line">453</span><br><span class="line">454</span><br><span class="line">455</span><br><span class="line">456</span><br><span class="line">457</span><br><span class="line">458</span><br><span class="line">459</span><br><span class="line">460</span><br><span class="line">461</span><br><span class="line">462</span><br><span class="line">463</span><br><span class="line">464</span><br><span class="line">465</span><br><span class="line">466</span><br><span class="line">467</span><br><span class="line">468</span><br><span class="line">469</span><br><span class="line">470</span><br><span class="line">471</span><br><span class="line">472</span><br><span class="line">473</span><br><span class="line">474</span><br><span class="line">475</span><br><span class="line">476</span><br><span class="line">477</span><br><span class="line">478</span><br><span class="line">479</span><br><span class="line">480</span><br><span class="line">481</span><br><span class="line">482</span><br><span class="line">483</span><br><span class="line">484</span><br><span class="line">485</span><br><span class="line">486</span><br><span class="line">487</span><br><span class="line">488</span><br><span class="line">489</span><br><span class="line">490</span><br><span class="line">491</span><br><span class="line">492</span><br><span class="line">493</span><br><span class="line">494</span><br><span class="line">495</span><br><span class="line">496</span><br><span class="line">497</span><br><span class="line">498</span><br><span class="line">499</span><br><span class="line">500</span><br><span class="line">501</span><br><span class="line">502</span><br><span class="line">503</span><br><span class="line">504</span><br><span class="line">505</span><br><span class="line">506</span><br><span class="line">507</span><br><span class="line">508</span><br><span class="line">509</span><br><span class="line">510</span><br><span class="line">511</span><br><span class="line">512</span><br><span class="line">513</span><br><span class="line">514</span><br><span class="line">515</span><br><span class="line">516</span><br><span class="line">517</span><br><span class="line">518</span><br><span class="line">519</span><br><span class="line">520</span><br><span class="line">521</span><br><span class="line">522</span><br><span class="line">523</span><br><span class="line">524</span><br><span class="line">525</span><br><span class="line">526</span><br><span class="line">527</span><br><span class="line">528</span><br><span class="line">529</span><br><span class="line">530</span><br><span class="line">531</span><br><span class="line">532</span><br><span class="line">533</span><br><span class="line">534</span><br><span class="line">535</span><br><span class="line">536</span><br><span class="line">537</span><br><span class="line">538</span><br><span class="line">539</span><br><span class="line">540</span><br><span class="line">541</span><br><span class="line">542</span><br><span class="line">543</span><br><span class="line">544</span><br><span class="line">545</span><br><span class="line">546</span><br><span class="line">547</span><br><span class="line">548</span><br><span class="line">549</span><br><span class="line">550</span><br><span class="line">551</span><br><span class="line">552</span><br><span class="line">553</span><br><span class="line">554</span><br><span class="line">555</span><br><span class="line">556</span><br><span class="line">557</span><br><span class="line">558</span><br><span class="line">559</span><br><span class="line">560</span><br><span class="line">561</span><br><span class="line">562</span><br><span class="line">563</span><br><span class="line">564</span><br><span class="line">565</span><br><span class="line">566</span><br><span class="line">567</span><br><span class="line">568</span><br><span class="line">569</span><br><span class="line">570</span><br><span class="line">571</span><br><span class="line">572</span><br><span class="line">573</span><br><span class="line">574</span><br><span class="line">575</span><br><span class="line">576</span><br><span class="line">577</span><br><span class="line">578</span><br><span class="line">579</span><br><span class="line">580</span><br><span class="line">581</span><br><span class="line">582</span><br><span class="line">583</span><br><span class="line">584</span><br><span class="line">585</span><br><span class="line">586</span><br><span class="line">587</span><br><span class="line">588</span><br><span class="line">589</span><br><span class="line">590</span><br><span class="line">591</span><br><span class="line">592</span><br><span class="line">593</span><br><span class="line">594</span><br><span class="line">595</span><br><span class="line">596</span><br></pre></td><td class="code"><pre><code class="hljs bash">---<br><span class="hljs-comment"># Source: calico/templates/calico-etcd-secrets.yaml</span><br><span class="hljs-comment"># The following contains k8s Secrets for use with a TLS enabled etcd cluster.</span><br><span class="hljs-comment"># For information on populating Secrets, see http://kubernetes.io/docs/user-guide/secrets/</span><br>apiVersion: v1<br>kind: Secret<br><span class="hljs-built_in">type</span>: Opaque<br>metadata:<br>  name: calico-etcd-secrets<br>  namespace: kube-system<br>data:<br>  <span class="hljs-comment"># Populate the following with etcd TLS configuration if desired, but leave blank if</span><br>  <span class="hljs-comment"># not using TLS for etcd.</span><br>  <span class="hljs-comment"># The keys below should be uncommented and the values populated with the base64</span><br>  <span class="hljs-comment"># encoded contents of each file that would be associated with the TLS data.</span><br>  <span class="hljs-comment"># Example command for encoding a file contents: cat &lt;file&gt; | base64 -w 0</span><br>  <span class="hljs-comment"># etcd-key: null</span><br>  <span class="hljs-comment"># etcd-cert: null</span><br>  <span class="hljs-comment"># etcd-ca: null</span><br>---<br><span class="hljs-comment"># Source: calico/templates/calico-config.yaml</span><br><span class="hljs-comment"># This ConfigMap is used to configure a self-hosted Calico installation.</span><br>kind: ConfigMap<br>apiVersion: v1<br>metadata:<br>  name: calico-config<br>  namespace: kube-system<br>data:<br>  <span class="hljs-comment"># Configure this with the location of your etcd cluster.</span><br>  etcd_endpoints: <span class="hljs-string">&quot;https://172.16.8.47:2379,https://172.16.8.48:2379,https://172.16.8.49:2379&quot;</span><br>  <span class="hljs-comment"># If you&#x27;re using TLS enabled etcd uncomment the following.</span><br>  <span class="hljs-comment"># You must also populate the Secret below with these files.</span><br>  etcd_ca: <span class="hljs-string">&quot;/opt/etcd/ssl/ca.pem&quot;</span>   <span class="hljs-comment"># &quot;/calico-secrets/etcd-ca&quot;</span><br>  etcd_cert: <span class="hljs-string">&quot;/opt/etcd/ssl/server.pem&quot;</span> <span class="hljs-comment"># &quot;/calico-secrets/etcd-cert&quot;</span><br>  etcd_key: <span class="hljs-string">&quot;/opt/etcd/ssl/server-key.pem&quot;</span>  <span class="hljs-comment"># &quot;/calico-secrets/etcd-key&quot;</span><br>  <span class="hljs-comment"># Typha is disabled.</span><br>  typha_service_name: <span class="hljs-string">&quot;none&quot;</span><br>  <span class="hljs-comment"># Configure the backend to use.</span><br>  calico_backend: <span class="hljs-string">&quot;bird&quot;</span><br><br>  <span class="hljs-comment"># Configure the MTU to use for workload interfaces and tunnels.</span><br>  <span class="hljs-comment"># By default, MTU is auto-detected, and explicitly setting this field should not be required.</span><br>  <span class="hljs-comment"># You can override auto-detection by providing a non-zero value.</span><br>  veth_mtu: <span class="hljs-string">&quot;0&quot;</span><br><br>  <span class="hljs-comment"># The CNI network configuration to install on each node. The special</span><br>  <span class="hljs-comment"># values in this config will be automatically populated.</span><br>  cni_network_config: |-<br>    &#123;<br>      <span class="hljs-string">&quot;name&quot;</span>: <span class="hljs-string">&quot;k8s-pod-network&quot;</span>,<br>      <span class="hljs-string">&quot;cniVersion&quot;</span>: <span class="hljs-string">&quot;0.3.1&quot;</span>,<br>      <span class="hljs-string">&quot;plugins&quot;</span>: [<br>        &#123;<br>          <span class="hljs-string">&quot;type&quot;</span>: <span class="hljs-string">&quot;calico&quot;</span>,<br>          <span class="hljs-string">&quot;log_level&quot;</span>: <span class="hljs-string">&quot;info&quot;</span>,<br>          <span class="hljs-string">&quot;log_file_path&quot;</span>: <span class="hljs-string">&quot;/var/log/calico/cni/cni.log&quot;</span>,<br>          <span class="hljs-string">&quot;etcd_endpoints&quot;</span>: <span class="hljs-string">&quot;__ETCD_ENDPOINTS__&quot;</span>,<br>          <span class="hljs-string">&quot;etcd_key_file&quot;</span>: <span class="hljs-string">&quot;__ETCD_KEY_FILE__&quot;</span>,<br>          <span class="hljs-string">&quot;etcd_cert_file&quot;</span>: <span class="hljs-string">&quot;__ETCD_CERT_FILE__&quot;</span>,<br>          <span class="hljs-string">&quot;etcd_ca_cert_file&quot;</span>: <span class="hljs-string">&quot;__ETCD_CA_CERT_FILE__&quot;</span>,<br>          <span class="hljs-string">&quot;mtu&quot;</span>: __CNI_MTU__,<br>          <span class="hljs-string">&quot;ipam&quot;</span>: &#123;<br>              <span class="hljs-string">&quot;type&quot;</span>: <span class="hljs-string">&quot;calico-ipam&quot;</span><br>          &#125;,<br>          <span class="hljs-string">&quot;policy&quot;</span>: &#123;<br>              <span class="hljs-string">&quot;type&quot;</span>: <span class="hljs-string">&quot;k8s&quot;</span><br>          &#125;,<br>          <span class="hljs-string">&quot;kubernetes&quot;</span>: &#123;<br>              <span class="hljs-string">&quot;kubeconfig&quot;</span>: <span class="hljs-string">&quot;__KUBECONFIG_FILEPATH__&quot;</span><br>          &#125;<br>        &#125;,<br>        &#123;<br>          <span class="hljs-string">&quot;type&quot;</span>: <span class="hljs-string">&quot;portmap&quot;</span>,<br>          <span class="hljs-string">&quot;snat&quot;</span>: <span class="hljs-literal">true</span>,<br>          <span class="hljs-string">&quot;capabilities&quot;</span>: &#123;<span class="hljs-string">&quot;portMappings&quot;</span>: <span class="hljs-literal">true</span>&#125;<br>        &#125;,<br>        &#123;<br>          <span class="hljs-string">&quot;type&quot;</span>: <span class="hljs-string">&quot;bandwidth&quot;</span>,<br>          <span class="hljs-string">&quot;capabilities&quot;</span>: &#123;<span class="hljs-string">&quot;bandwidth&quot;</span>: <span class="hljs-literal">true</span>&#125;<br>        &#125;<br>      ]<br>    &#125;<br><br>---<br><span class="hljs-comment"># Source: calico/templates/calico-kube-controllers-rbac.yaml</span><br><br><span class="hljs-comment"># Include a clusterrole for the kube-controllers component,</span><br><span class="hljs-comment"># and bind it to the calico-kube-controllers serviceaccount.</span><br>kind: ClusterRole<br>apiVersion: rbac.authorization.k8s.io/v1<br>metadata:<br>  name: calico-kube-controllers<br>rules:<br>  <span class="hljs-comment"># Pods are monitored for changing labels.</span><br>  <span class="hljs-comment"># The node controller monitors Kubernetes nodes.</span><br>  <span class="hljs-comment"># Namespace and serviceaccount labels are used for policy.</span><br>  - apiGroups: [<span class="hljs-string">&quot;&quot;</span>]<br>    resources:<br>      - pods<br>      - nodes<br>      - namespaces<br>      - serviceaccounts<br>    verbs:<br>      - watch<br>      - list<br>      - get<br>  <span class="hljs-comment"># Watch for changes to Kubernetes NetworkPolicies.</span><br>  - apiGroups: [<span class="hljs-string">&quot;networking.k8s.io&quot;</span>]<br>    resources:<br>      - networkpolicies<br>    verbs:<br>      - watch<br>      - list<br>---<br>kind: ClusterRoleBinding<br>apiVersion: rbac.authorization.k8s.io/v1<br>metadata:<br>  name: calico-kube-controllers<br>roleRef:<br>  apiGroup: rbac.authorization.k8s.io<br>  kind: ClusterRole<br>  name: calico-kube-controllers<br>subjects:<br>- kind: ServiceAccount<br>  name: calico-kube-controllers<br>  namespace: kube-system<br>---<br><br>---<br><span class="hljs-comment"># Source: calico/templates/calico-node-rbac.yaml</span><br><span class="hljs-comment"># Include a clusterrole for the calico-node DaemonSet,</span><br><span class="hljs-comment"># and bind it to the calico-node serviceaccount.</span><br>kind: ClusterRole<br>apiVersion: rbac.authorization.k8s.io/v1<br>metadata:<br>  name: calico-node<br>rules:<br>  <span class="hljs-comment"># The CNI plugin needs to get pods, nodes, and namespaces.</span><br>  - apiGroups: [<span class="hljs-string">&quot;&quot;</span>]<br>    resources:<br>      - pods<br>      - nodes<br>      - namespaces<br>    verbs:<br>      - get<br>  - apiGroups: [<span class="hljs-string">&quot;&quot;</span>]<br>    resources:<br>      - endpoints<br>      - services<br>    verbs:<br>      <span class="hljs-comment"># Used to discover service IPs for advertisement.</span><br>      - watch<br>      - list<br>  <span class="hljs-comment"># Pod CIDR auto-detection on kubeadm needs access to config maps.</span><br>  - apiGroups: [<span class="hljs-string">&quot;&quot;</span>]<br>    resources:<br>      - configmaps<br>    verbs:<br>      - get<br>  - apiGroups: [<span class="hljs-string">&quot;&quot;</span>]<br>    resources:<br>      - nodes/status<br>    verbs:<br>      <span class="hljs-comment"># Needed for clearing NodeNetworkUnavailable flag.</span><br>      - patch<br><br>---<br>apiVersion: rbac.authorization.k8s.io/v1<br>kind: ClusterRoleBinding<br>metadata:<br>  name: calico-node<br>roleRef:<br>  apiGroup: rbac.authorization.k8s.io<br>  kind: ClusterRole<br>  name: calico-node<br>subjects:<br>- kind: ServiceAccount<br>  name: calico-node<br>  namespace: kube-system<br><br>---<br><span class="hljs-comment"># Source: calico/templates/calico-node.yaml</span><br><span class="hljs-comment"># This manifest installs the calico-node container, as well</span><br><span class="hljs-comment"># as the CNI plugins and network config on</span><br><span class="hljs-comment"># each master and worker node in a Kubernetes cluster.</span><br>kind: DaemonSet<br>apiVersion: apps/v1<br>metadata:<br>  name: calico-node<br>  namespace: kube-system<br>  labels:<br>    k8s-app: calico-node<br>spec:<br>  selector:<br>    matchLabels:<br>      k8s-app: calico-node<br>  updateStrategy:<br>    <span class="hljs-built_in">type</span>: RollingUpdate<br>    rollingUpdate:<br>      maxUnavailable: 1<br>  template:<br>    metadata:<br>      labels:<br>        k8s-app: calico-node<br>    spec:<br>      nodeSelector:<br>        kubernetes.io/os: linux<br>      hostNetwork: <span class="hljs-literal">true</span><br>      tolerations:<br>        <span class="hljs-comment"># Make sure calico-node gets scheduled on all nodes.</span><br>        - effect: NoSchedule<br>          operator: Exists<br>        <span class="hljs-comment"># Mark the pod as a critical add-on for rescheduling.</span><br>        - key: CriticalAddonsOnly<br>          operator: Exists<br>        - effect: NoExecute<br>          operator: Exists<br>      serviceAccountName: calico-node<br>      <span class="hljs-comment"># Minimize downtime during a rolling upgrade or deletion; tell Kubernetes to do a &quot;force</span><br>      <span class="hljs-comment"># deletion&quot;: https://kubernetes.io/docs/concepts/workloads/pods/pod/#termination-of-pods.</span><br>      terminationGracePeriodSeconds: 0<br>      priorityClassName: system-node-critical<br>      initContainers:<br>        <span class="hljs-comment"># This container installs the CNI binaries</span><br>        <span class="hljs-comment"># and CNI network config file on each node.</span><br>        - name: install-cni<br>          image: docker.io/calico/cni:v3.18.1<br>          <span class="hljs-built_in">command</span>: [<span class="hljs-string">&quot;/opt/cni/bin/install&quot;</span>]<br>          envFrom:<br>          - configMapRef:<br>              <span class="hljs-comment"># Allow KUBERNETES_SERVICE_HOST and KUBERNETES_SERVICE_PORT to be overridden for eBPF mode.</span><br>              name: kubernetes-services-endpoint<br>              optional: <span class="hljs-literal">true</span><br>          env:<br>            <span class="hljs-comment"># Name of the CNI config file to create.</span><br>            - name: CNI_CONF_NAME<br>              value: <span class="hljs-string">&quot;10-calico.conflist&quot;</span><br>            <span class="hljs-comment"># The CNI network config to install on each node.</span><br>            - name: CNI_NETWORK_CONFIG<br>              valueFrom:<br>                configMapKeyRef:<br>                  name: calico-config<br>                  key: cni_network_config<br>            <span class="hljs-comment"># The location of the etcd cluster.</span><br>            - name: ETCD_ENDPOINTS<br>              valueFrom:<br>                configMapKeyRef:<br>                  name: calico-config<br>                  key: etcd_endpoints<br>            <span class="hljs-comment"># CNI MTU Config variable</span><br>            - name: CNI_MTU<br>              valueFrom:<br>                configMapKeyRef:<br>                  name: calico-config<br>                  key: veth_mtu<br>            <span class="hljs-comment"># Prevents the container from sleeping forever.</span><br>            - name: SLEEP<br>              value: <span class="hljs-string">&quot;false&quot;</span><br>          volumeMounts:<br>            - mountPath: /host/opt/cni/bin<br>              name: cni-bin-dir<br>            - mountPath: /host/etc/cni/net.d<br>              name: cni-net-dir<br>            - mountPath: /calico-secrets<br>              name: etcd-certs<br>          securityContext:<br>            privileged: <span class="hljs-literal">true</span><br>        <span class="hljs-comment"># Adds a Flex Volume Driver that creates a per-pod Unix Domain Socket to allow Dikastes</span><br>        <span class="hljs-comment"># to communicate with Felix over the Policy Sync API.</span><br>        - name: flexvol-driver<br>          image: docker.io/calico/pod2daemon-flexvol:v3.18.1<br>          volumeMounts:<br>          - name: flexvol-driver-host<br>            mountPath: /host/driver<br>          securityContext:<br>            privileged: <span class="hljs-literal">true</span><br>      containers:<br>        <span class="hljs-comment"># Runs calico-node container on each Kubernetes node. This</span><br>        <span class="hljs-comment"># container programs network policy and routes on each</span><br>        <span class="hljs-comment"># host.</span><br>        - name: calico-node<br>          image: docker.io/calico/node:v3.18.1<br>          envFrom:<br>          - configMapRef:<br>              <span class="hljs-comment"># Allow KUBERNETES_SERVICE_HOST and KUBERNETES_SERVICE_PORT to be overridden for eBPF mode.</span><br>              name: kubernetes-services-endpoint<br>              optional: <span class="hljs-literal">true</span><br>          env:<br>            <span class="hljs-comment"># The location of the etcd cluster.</span><br>            - name: ETCD_ENDPOINTS<br>              valueFrom:<br>                configMapKeyRef:<br>                  name: calico-config<br>                  key: etcd_endpoints<br>            <span class="hljs-comment"># Location of the CA certificate for etcd.</span><br>            - name: ETCD_CA_CERT_FILE<br>              valueFrom:<br>                configMapKeyRef:<br>                  name: calico-config<br>                  key: etcd_ca<br>            <span class="hljs-comment"># Location of the client key for etcd.</span><br>            - name: ETCD_KEY_FILE<br>              valueFrom:<br>                configMapKeyRef:<br>                  name: calico-config<br>                  key: etcd_key<br>            <span class="hljs-comment"># Location of the client certificate for etcd.</span><br>            - name: ETCD_CERT_FILE<br>              valueFrom:<br>                configMapKeyRef:<br>                  name: calico-config<br>                  key: etcd_cert<br>            <span class="hljs-comment"># Set noderef for node controller.</span><br>            - name: CALICO_K8S_NODE_REF<br>              valueFrom:<br>                fieldRef:<br>                  fieldPath: spec.nodeName<br>            <span class="hljs-comment"># Choose the backend to use.</span><br>            - name: CALICO_NETWORKING_BACKEND<br>              valueFrom:<br>                configMapKeyRef:<br>                  name: calico-config<br>                  key: calico_backend<br>            <span class="hljs-comment"># Cluster type to identify the deployment type</span><br>            - name: CLUSTER_TYPE<br>              value: <span class="hljs-string">&quot;k8s,bgp&quot;</span><br>            <span class="hljs-comment"># Auto-detect the BGP IP address.</span><br>            - name: IP<br>              value: <span class="hljs-string">&quot;autodetect&quot;</span><br>            <span class="hljs-comment"># Enable IPIP</span><br>            - name: CALICO_IPV4POOL_IPIP<br>              value: <span class="hljs-string">&quot;Always&quot;</span><br>            <span class="hljs-comment"># Enable or Disable VXLAN on the default IP pool.</span><br>            - name: CALICO_IPV4POOL_VXLAN<br>              value: <span class="hljs-string">&quot;Never&quot;</span><br>            <span class="hljs-comment"># Set MTU for tunnel device used if ipip is enabled</span><br>            - name: FELIX_IPINIPMTU<br>              valueFrom:<br>                configMapKeyRef:<br>                  name: calico-config<br>                  key: veth_mtu<br>            <span class="hljs-comment"># Set MTU for the VXLAN tunnel device.</span><br>            - name: FELIX_VXLANMTU<br>              valueFrom:<br>                configMapKeyRef:<br>                  name: calico-config<br>                  key: veth_mtu<br>            <span class="hljs-comment"># Set MTU for the Wireguard tunnel device.</span><br>            - name: FELIX_WIREGUARDMTU<br>              valueFrom:<br>                configMapKeyRef:<br>                  name: calico-config<br>                  key: veth_mtu<br>            <span class="hljs-comment"># The default IPv4 pool to create on startup if none exists. Pod IPs will be</span><br>            <span class="hljs-comment"># chosen from this range. Changing this value after installation will have</span><br>            <span class="hljs-comment"># no effect. This should fall within `--cluster-cidr`.</span><br>            <span class="hljs-comment"># - name: CALICO_IPV4POOL_CIDR</span><br>            <span class="hljs-comment">#   value: &quot;192.168.0.0/16&quot;</span><br>            <span class="hljs-comment"># Disable file logging so `kubectl logs` works.</span><br>            - name: CALICO_DISABLE_FILE_LOGGING<br>              value: <span class="hljs-string">&quot;true&quot;</span><br>            <span class="hljs-comment"># Set Felix endpoint to host default action to ACCEPT.</span><br>            - name: FELIX_DEFAULTENDPOINTTOHOSTACTION<br>              value: <span class="hljs-string">&quot;ACCEPT&quot;</span><br>            <span class="hljs-comment"># Disable IPv6 on Kubernetes.</span><br>            - name: FELIX_IPV6SUPPORT<br>              value: <span class="hljs-string">&quot;false&quot;</span><br>            <span class="hljs-comment"># Set Felix logging to &quot;info&quot;</span><br>            - name: FELIX_LOGSEVERITYSCREEN<br>              value: <span class="hljs-string">&quot;info&quot;</span><br>            - name: FELIX_HEALTHENABLED<br>              value: <span class="hljs-string">&quot;true&quot;</span><br>          securityContext:<br>            privileged: <span class="hljs-literal">true</span><br>          resources:<br>            requests:<br>              cpu: 250m<br>          livenessProbe:<br>            <span class="hljs-built_in">exec</span>:<br>              <span class="hljs-built_in">command</span>:<br>              - /bin/calico-node<br>              - -felix-live<br>              - -bird-live<br>            periodSeconds: 10<br>            initialDelaySeconds: 10<br>            failureThreshold: 6<br>          readinessProbe:<br>            <span class="hljs-built_in">exec</span>:<br>              <span class="hljs-built_in">command</span>:<br>              - /bin/calico-node<br>              - -felix-ready<br>              - -bird-ready<br>            periodSeconds: 10<br>          volumeMounts:<br>            - mountPath: /lib/modules<br>              name: lib-modules<br>              readOnly: <span class="hljs-literal">true</span><br>            - mountPath: /run/xtables.lock<br>              name: xtables-lock<br>              readOnly: <span class="hljs-literal">false</span><br>            - mountPath: /var/run/calico<br>              name: var-run-calico<br>              readOnly: <span class="hljs-literal">false</span><br>            - mountPath: /var/lib/calico<br>              name: var-lib-calico<br>              readOnly: <span class="hljs-literal">false</span><br>            - mountPath: /calico-secrets<br>              name: etcd-certs<br>            - name: policysync<br>              mountPath: /var/run/nodeagent<br>            <span class="hljs-comment"># For eBPF mode, we need to be able to mount the BPF filesystem at /sys/fs/bpf so we mount in the</span><br>            <span class="hljs-comment"># parent directory.</span><br>            - name: sysfs<br>              mountPath: /sys/fs/<br>              <span class="hljs-comment"># Bidirectional means that, if we mount the BPF filesystem at /sys/fs/bpf it will propagate to the host.</span><br>              <span class="hljs-comment"># If the host is known to mount that filesystem already then Bidirectional can be omitted.</span><br>              mountPropagation: Bidirectional<br>            - name: cni-log-dir<br>              mountPath: /var/<span class="hljs-built_in">log</span>/calico/cni<br>              readOnly: <span class="hljs-literal">true</span><br>      volumes:<br>        <span class="hljs-comment"># Used by calico-node.</span><br>        - name: lib-modules<br>          hostPath:<br>            path: /lib/modules<br>        - name: var-run-calico<br>          hostPath:<br>            path: /var/run/calico<br>        - name: var-lib-calico<br>          hostPath:<br>            path: /var/lib/calico<br>        - name: xtables-lock<br>          hostPath:<br>            path: /run/xtables.lock<br>            <span class="hljs-built_in">type</span>: FileOrCreate<br>        - name: sysfs<br>          hostPath:<br>            path: /sys/fs/<br>            <span class="hljs-built_in">type</span>: DirectoryOrCreate<br>        <span class="hljs-comment"># Used to install CNI.</span><br>        - name: cni-bin-dir<br>          hostPath:<br>            path: /opt/cni/bin<br>        - name: cni-net-dir<br>          hostPath:<br>            path: /etc/cni/net.d<br>        <span class="hljs-comment"># Used to access CNI logs.</span><br>        - name: cni-log-dir<br>          hostPath:<br>            path: /var/<span class="hljs-built_in">log</span>/calico/cni<br>        <span class="hljs-comment"># Mount in the etcd TLS secrets with mode 400.</span><br>        <span class="hljs-comment"># See https://kubernetes.io/docs/concepts/configuration/secret/</span><br>        - name: etcd-certs<br>          secret:<br>            secretName: calico-etcd-secrets<br>            defaultMode: 0400<br>        <span class="hljs-comment"># Used to create per-pod Unix Domain Sockets</span><br>        - name: policysync<br>          hostPath:<br>            <span class="hljs-built_in">type</span>: DirectoryOrCreate<br>            path: /var/run/nodeagent<br>        <span class="hljs-comment"># Used to install Flex Volume Driver</span><br>        - name: flexvol-driver-host<br>          hostPath:<br>            <span class="hljs-built_in">type</span>: DirectoryOrCreate<br>            path: /usr/libexec/kubernetes/kubelet-plugins/volume/<span class="hljs-built_in">exec</span>/nodeagent~uds<br>---<br><br>apiVersion: v1<br>kind: ServiceAccount<br>metadata:<br>  name: calico-node<br>  namespace: kube-system<br><br>---<br><span class="hljs-comment"># Source: calico/templates/calico-kube-controllers.yaml</span><br><span class="hljs-comment"># See https://github.com/projectcalico/kube-controllers</span><br>apiVersion: apps/v1<br>kind: Deployment<br>metadata:<br>  name: calico-kube-controllers<br>  namespace: kube-system<br>  labels:<br>    k8s-app: calico-kube-controllers<br>spec:<br>  <span class="hljs-comment"># The controllers can only have a single active instance.</span><br>  replicas: 1<br>  selector:<br>    matchLabels:<br>      k8s-app: calico-kube-controllers<br>  strategy:<br>    <span class="hljs-built_in">type</span>: Recreate<br>  template:<br>    metadata:<br>      name: calico-kube-controllers<br>      namespace: kube-system<br>      labels:<br>        k8s-app: calico-kube-controllers<br>    spec:<br>      nodeSelector:<br>        kubernetes.io/os: linux<br>      tolerations:<br>        <span class="hljs-comment"># Mark the pod as a critical add-on for rescheduling.</span><br>        - key: CriticalAddonsOnly<br>          operator: Exists<br>        - key: node-role.kubernetes.io/master<br>          effect: NoSchedule<br>      serviceAccountName: calico-kube-controllers<br>      priorityClassName: system-cluster-critical<br>      <span class="hljs-comment"># The controllers must run in the host network namespace so that</span><br>      <span class="hljs-comment"># it isn&#x27;t governed by policy that would prevent it from working.</span><br>      hostNetwork: <span class="hljs-literal">true</span><br>      containers:<br>        - name: calico-kube-controllers<br>          image: docker.io/calico/kube-controllers:v3.18.1<br>          env:<br>            <span class="hljs-comment"># The location of the etcd cluster.</span><br>            - name: ETCD_ENDPOINTS<br>              valueFrom:<br>                configMapKeyRef:<br>                  name: calico-config<br>                  key: etcd_endpoints<br>            <span class="hljs-comment"># Location of the CA certificate for etcd.</span><br>            - name: ETCD_CA_CERT_FILE<br>              valueFrom:<br>                configMapKeyRef:<br>                  name: calico-config<br>                  key: etcd_ca<br>            <span class="hljs-comment"># Location of the client key for etcd.</span><br>            - name: ETCD_KEY_FILE<br>              valueFrom:<br>                configMapKeyRef:<br>                  name: calico-config<br>                  key: etcd_key<br>            <span class="hljs-comment"># Location of the client certificate for etcd.</span><br>            - name: ETCD_CERT_FILE<br>              valueFrom:<br>                configMapKeyRef:<br>                  name: calico-config<br>                  key: etcd_cert<br>            <span class="hljs-comment"># Choose which controllers to run.</span><br>            - name: ENABLED_CONTROLLERS<br>              value: policy,namespace,serviceaccount,workloadendpoint,node<br>          volumeMounts:<br>            <span class="hljs-comment"># Mount in the etcd TLS secrets.</span><br>            - mountPath: /calico-secrets<br>              name: etcd-certs<br>          readinessProbe:<br>            <span class="hljs-built_in">exec</span>:<br>              <span class="hljs-built_in">command</span>:<br>              - /usr/bin/check-status<br>              - -r<br>      volumes:<br>        <span class="hljs-comment"># Mount in the etcd TLS secrets with mode 400.</span><br>        <span class="hljs-comment"># See https://kubernetes.io/docs/concepts/configuration/secret/</span><br>        - name: etcd-certs<br>          secret:<br>            secretName: calico-etcd-secrets<br>            defaultMode: 0400<br><br>---<br><br>apiVersion: v1<br>kind: ServiceAccount<br>metadata:<br>  name: calico-kube-controllers<br>  namespace: kube-system<br><br>---<br><br><span class="hljs-comment"># This manifest creates a Pod Disruption Budget for Controller to allow K8s Cluster Autoscaler to evict</span><br><br>apiVersion: policy/v1beta1<br>kind: PodDisruptionBudget<br>metadata:<br>  name: calico-kube-controllers<br>  namespace: kube-system<br>  labels:<br>    k8s-app: calico-kube-controllers<br>spec:<br>  maxUnavailable: 1<br>  selector:<br>    matchLabels:<br>      k8s-app: calico-kube-controllers<br><br>---<br><span class="hljs-comment"># Source: calico/templates/calico-typha.yaml</span><br><br>---<br><span class="hljs-comment"># Source: calico/templates/configure-canal.yaml</span><br><br>---<br><span class="hljs-comment"># Source: calico/templates/kdd-crds.yaml</span><br><br><br><br></code></pre></td></tr></table></figure></li><li><p>授权apiserver访问kubelet</p><p> 应用场景：例如kubectl logs</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs bash">cat &gt; apiserver-to-kubelet-rbac.yaml &lt;&lt; <span class="hljs-string">EOF</span><br><span class="hljs-string">apiVersion: rbac.authorization.k8s.io/v1</span><br><span class="hljs-string">kind: ClusterRole</span><br><span class="hljs-string">metadata:</span><br><span class="hljs-string">  annotations:</span><br><span class="hljs-string">    rbac.authorization.kubernetes.io/autoupdate: &quot;true&quot;</span><br><span class="hljs-string">  labels:</span><br><span class="hljs-string">    kubernetes.io/bootstrapping: rbac-defaults</span><br><span class="hljs-string">  name: system:kube-apiserver-to-kubelet</span><br><span class="hljs-string">rules:</span><br><span class="hljs-string">  - apiGroups:</span><br><span class="hljs-string">      - &quot;&quot;</span><br><span class="hljs-string">    resources:</span><br><span class="hljs-string">      - nodes/proxy</span><br><span class="hljs-string">      - nodes/stats</span><br><span class="hljs-string">      - nodes/log</span><br><span class="hljs-string">      - nodes/spec</span><br><span class="hljs-string">      - nodes/metrics</span><br><span class="hljs-string">      - pods/log</span><br><span class="hljs-string">    verbs:</span><br><span class="hljs-string">      - &quot;*&quot;</span><br><span class="hljs-string">---</span><br><span class="hljs-string">apiVersion: rbac.authorization.k8s.io/v1</span><br><span class="hljs-string">kind: ClusterRoleBinding</span><br><span class="hljs-string">metadata:</span><br><span class="hljs-string">  name: system:kube-apiserver</span><br><span class="hljs-string">  namespace: &quot;&quot;</span><br><span class="hljs-string">roleRef:</span><br><span class="hljs-string">  apiGroup: rbac.authorization.k8s.io</span><br><span class="hljs-string">  kind: ClusterRole</span><br><span class="hljs-string">  name: system:kube-apiserver-to-kubelet</span><br><span class="hljs-string">subjects:</span><br><span class="hljs-string">  - apiGroup: rbac.authorization.k8s.io</span><br><span class="hljs-string">    kind: User</span><br><span class="hljs-string">    name: kubernetes</span><br><span class="hljs-string">EOF</span><br><br>kubectl apply -f apiserver-to-kubelet-rbac.yaml<br><br></code></pre></td></tr></table></figure></li></ol><h2 id="新增-node-节点"><a href="#新增-node-节点" class="headerlink" title="新增 node 节点"></a>新增 node 节点</h2><ol><li><p>拷贝已部署好的Node相关文件到新节点</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">ansible node -m copy -a <span class="hljs-string">&quot;src=/opt/kubernetes dest=/opt/&quot;</span><br>ansible node -m copy -a <span class="hljs-string">&quot;src=/usr/lib/systemd/system/kube-proxy.service dest=/usr/lib/systemd/system/kube-proxy.service&quot;</span><br>ansible node -m copy -a <span class="hljs-string">&quot;src=/usr/lib/systemd/system/kubelet.service dest=/usr/lib/systemd/system/kubelet.service&quot;</span><br>ansible node -m copy -a <span class="hljs-string">&quot;src=/opt/kubernetes/ssl/ca.pem dest=/opt/kubernetes/ssl/ca.pem&quot;</span><br></code></pre></td></tr></table></figure></li><li><p>删除kubelet证书和kubeconfig文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">ansible node -m file -a <span class="hljs-string">&quot;path=/opt/kubernetes/cfg/kubelet.kubeconfig state=absent&quot;</span><br>rm -f /opt/kubernetes/ssl/kubelet*<br><br></code></pre></td></tr></table></figure><p><code>注：这几个文件是证书申请审批后自动生成的，每个Node不同，必须删除</code></p></li><li><p>修改主机名</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash">vi /opt/kubernetes/cfg/kubelet.conf<br> --hostname-override=k8s-02<br><br> vi /opt/kubernetes/cfg/kube-proxy-config.yml<br> hostnameOverride: k8s-02<br><br></code></pre></td></tr></table></figure></li><li><p>启动并设置开机启动</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">systemctl daemon-reload<br>systemctl start kubelet kube-proxy<br>systemctl <span class="hljs-built_in">enable</span> kubelet kube-proxy<br><br></code></pre></td></tr></table></figure></li><li><p>在Master上批准新Node kubelet证书申请</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 查看证书请求</span><br>kubectl get csr<br>NAME           AGE   SIGNERNAME                    REQUESTOR           CONDITION<br>node-csr-4zTjsaVSrhuyhIGqsefxzVoZDCNKei-aE2jyTP81Uro   89s   kubernetes.io/kube-apiserver-client-kubelet   kubelet-bootstrap   Pending<br><br><span class="hljs-comment"># 授权请求</span><br>kubectl certificate approve node-csr-4zTjsaVSrhuyhIGqsefxzVoZDCNKei-aE2jyTP81Uro<br><br></code></pre></td></tr></table></figure></li><li><p>查看node 状态</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash">kubectl get node<br>NAME       STATUS   ROLES    AGE     VERSION<br>k8s-01   Ready    &lt;none&gt;   47m     v1.20.4<br>k8s-02    Ready    &lt;none&gt;   6m49s   v1.20.4<br><br></code></pre></td></tr></table></figure></li></ol><h2 id="部署CoreDNS"><a href="#部署CoreDNS" class="headerlink" title="部署CoreDNS"></a>部署CoreDNS</h2><ol><li><p>CoreDNS用于集群内部Service名称解析。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash">kubectl apply -f coredns.yaml <br> <br> kubectl get pods -n kube-system  <br> NAME                          READY   STATUS    RESTARTS   AGE <br> coredns-5ffbfd976d-j6shb      1/1     Running   0          32s<br><br></code></pre></td></tr></table></figure><p>DNS解析测试</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs bash">kubectl run -it --rm dns-test --image=busybox:1.28.4 sh <br>If you don<span class="hljs-string">&#x27;t see a command prompt, try pressing enter. </span><br><span class="hljs-string"></span><br><span class="hljs-string">/ # nslookup kubernetes </span><br><span class="hljs-string">Server:    10.0.0.2 </span><br><span class="hljs-string">Address 1: 10.0.0.2 kube-dns.kube-system.svc.cluster.local </span><br><span class="hljs-string"></span><br><span class="hljs-string">Name:      kubernetes </span><br><span class="hljs-string">Address 1: 10.0.0.1 kubernetes.default.svc.cluster.local</span><br><span class="hljs-string"></span><br></code></pre></td></tr></table></figure><p>解析没问题。至此一个单Master集群就搭建完成了！服务器配置较高，可继续扩容多Master集群！<br>CoreDNS YAML 文件如下:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br></pre></td><td class="code"><pre><code class="hljs bash">   <br><span class="hljs-comment"># Warning: This is a file generated from the base underscore template file: coredns.yaml.base</span><br><br>apiVersion: v1<br>kind: ServiceAccount<br>metadata:<br>  name: coredns<br>  namespace: kube-system<br>  labels:<br>      kubernetes.io/cluster-service: <span class="hljs-string">&quot;true&quot;</span><br>      addonmanager.kubernetes.io/mode: Reconcile<br>---<br>apiVersion: rbac.authorization.k8s.io/v1<br>kind: ClusterRole<br>metadata:<br>  labels:<br>    kubernetes.io/bootstrapping: rbac-defaults<br>    addonmanager.kubernetes.io/mode: Reconcile<br>  name: system:coredns<br>rules:<br>- apiGroups:<br>  - <span class="hljs-string">&quot;&quot;</span><br>  resources:<br>  - endpoints<br>  - services<br>  - pods<br>  - namespaces<br>  verbs:<br>  - list<br>  - watch<br>- apiGroups:<br>  - <span class="hljs-string">&quot;&quot;</span><br>  resources:<br>  - nodes<br>  verbs:<br>  - get<br>---<br>apiVersion: rbac.authorization.k8s.io/v1<br>kind: ClusterRoleBinding<br>metadata:<br>  annotations:<br>    rbac.authorization.kubernetes.io/autoupdate: <span class="hljs-string">&quot;true&quot;</span><br>  labels:<br>    kubernetes.io/bootstrapping: rbac-defaults<br>    addonmanager.kubernetes.io/mode: EnsureExists<br>  name: system:coredns<br>roleRef:<br>  apiGroup: rbac.authorization.k8s.io<br>  kind: ClusterRole<br>  name: system:coredns<br>subjects:<br>- kind: ServiceAccount<br>  name: coredns<br>  namespace: kube-system<br>---<br>apiVersion: v1<br>kind: ConfigMap<br>metadata:<br>  name: coredns<br>  namespace: kube-system<br>  labels:<br>      addonmanager.kubernetes.io/mode: EnsureExists<br>data:<br>  Corefile: |<br>    .:53 &#123;<br>        <span class="hljs-built_in">log</span><br>        errors<br>        health &#123;<br>            lameduck 5s<br>        &#125;<br>        ready<br>        kubernetes cluster.local in-addr.arpa ip6.arpa &#123;<br>            pods insecure<br>            fallthrough in-addr.arpa ip6.arpa<br>            ttl 30<br>        &#125;<br>        prometheus :9153<br>        forward . /etc/resolv.conf<br>        cache 30<br>        loop<br>        reload<br>        loadbalance<br>    &#125;<br>---<br>apiVersion: apps/v1<br>kind: Deployment<br>metadata:<br>  name: coredns<br>  namespace: kube-system<br>  labels:<br>    k8s-app: kube-dns<br>    kubernetes.io/cluster-service: <span class="hljs-string">&quot;true&quot;</span><br>    addonmanager.kubernetes.io/mode: Reconcile<br>    kubernetes.io/name: <span class="hljs-string">&quot;CoreDNS&quot;</span><br>spec:<br>  <span class="hljs-comment"># replicas: not specified here:</span><br>  <span class="hljs-comment"># 1. In order to make Addon Manager do not reconcile this replicas parameter.</span><br>  <span class="hljs-comment"># 2. Default is 1.</span><br>  <span class="hljs-comment"># 3. Will be tuned in real time if DNS horizontal auto-scaling is turned on.</span><br>  strategy:<br>    <span class="hljs-built_in">type</span>: RollingUpdate<br>    rollingUpdate:<br>      maxUnavailable: 1<br>  selector:<br>    matchLabels:<br>      k8s-app: kube-dns<br>  template:<br>    metadata:<br>      labels:<br>        k8s-app: kube-dns<br>      annotations:<br>        seccomp.security.alpha.kubernetes.io/pod: <span class="hljs-string">&#x27;runtime/default&#x27;</span><br>    spec:<br>      priorityClassName: system-cluster-critical<br>      serviceAccountName: coredns<br>      tolerations:<br>        - key: <span class="hljs-string">&quot;CriticalAddonsOnly&quot;</span><br>          operator: <span class="hljs-string">&quot;Exists&quot;</span><br>      nodeSelector:<br>        kubernetes.io/os: linux<br>      containers:<br>      - name: coredns<br>        image: lizhenliang/coredns:1.6.7<br>        imagePullPolicy: IfNotPresent<br>        resources:<br>          limits:<br>            memory: 512Mi <br>          requests:<br>            cpu: 100m<br>            memory: 70Mi<br>        args: [ <span class="hljs-string">&quot;-conf&quot;</span>, <span class="hljs-string">&quot;/etc/coredns/Corefile&quot;</span> ]<br>        volumeMounts:<br>        - name: config-volume<br>          mountPath: /etc/coredns<br>          readOnly: <span class="hljs-literal">true</span><br>        ports:<br>        - containerPort: 53<br>          name: dns<br>          protocol: UDP<br>        - containerPort: 53<br>          name: dns-tcp<br>          protocol: TCP<br>        - containerPort: 9153<br>          name: metrics<br>          protocol: TCP<br>        livenessProbe:<br>          httpGet:<br>            path: /health<br>            port: 8080<br>            scheme: HTTP<br>          initialDelaySeconds: 60<br>          timeoutSeconds: 5<br>          successThreshold: 1<br>          failureThreshold: 5<br>        readinessProbe:<br>          httpGet:<br>            path: /ready<br>            port: 8181<br>            scheme: HTTP<br>        securityContext:<br>          allowPrivilegeEscalation: <span class="hljs-literal">false</span><br>          capabilities:<br>            add:<br>            - NET_BIND_SERVICE<br>            drop:<br>            - all<br>          readOnlyRootFilesystem: <span class="hljs-literal">true</span><br>      dnsPolicy: Default<br>      volumes:<br>        - name: config-volume<br>          configMap:<br>            name: coredns<br>            items:<br>            - key: Corefile<br>              path: Corefile<br>---<br>apiVersion: v1<br>kind: Service<br>metadata:<br>  name: kube-dns<br>  namespace: kube-system<br>  annotations:<br>    prometheus.io/port: <span class="hljs-string">&quot;9153&quot;</span><br>    prometheus.io/scrape: <span class="hljs-string">&quot;true&quot;</span><br>  labels:<br>    k8s-app: kube-dns<br>    kubernetes.io/cluster-service: <span class="hljs-string">&quot;true&quot;</span><br>    addonmanager.kubernetes.io/mode: Reconcile<br>    kubernetes.io/name: <span class="hljs-string">&quot;CoreDNS&quot;</span><br>spec:<br>  selector:<br>    k8s-app: kube-dns<br>  clusterIP: 10.0.0.2 <br>  ports:<br>  - name: dns<br>    port: 53<br>    protocol: UDP<br>  - name: dns-tcp<br>    port: 53<br>    protocol: TCP<br>  - name: metrics<br>    port: 9153<br>    protocol: TCP<br><br><br></code></pre></td></tr></table></figure></li></ol><h2 id="可视化集群管理"><a href="#可视化集群管理" class="headerlink" title="可视化集群管理"></a>可视化集群管理</h2><ol><li><p>推荐使用kuboard</p><p> 官网教程: <a href="https://www.kuboard.cn/install/v3/install.html">https://www.kuboard.cn/install/v3/install.html</a></p></li></ol><h2 id="NFS-安装教程-kuboard官网有详细教程"><a href="#NFS-安装教程-kuboard官网有详细教程" class="headerlink" title="NFS 安装教程(kuboard官网有详细教程)"></a>NFS 安装教程(kuboard官网有详细教程)</h2><ol><li><p>执行以下命令安装 nfs 服务器所需的软件包</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">yum install -y rpcbind nfs-utils<br></code></pre></td></tr></table></figure></li><li><p>执行命令 vim /etc/exports，创建 exports 文件，文件内容如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">/root/nfs_root/ *(insecure,rw,sync,no_root_squash)<br></code></pre></td></tr></table></figure></li><li><p>执行以下命令，启动 nfs 服务</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 创建共享目录，如果要使用自己的目录，请替换本文档中所有的 /root/nfs_root/</span><br> mkdir /root/nfs_root<br><br> systemctl <span class="hljs-built_in">enable</span> rpcbind<br> systemctl <span class="hljs-built_in">enable</span> nfs-server<br><br> systemctl start rpcbind<br> systemctl start nfs-server<br> exportfs -r<br></code></pre></td></tr></table></figure></li><li><p>检查配置是否生效</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">exportfs<br><span class="hljs-comment"># 输出结果如下所示</span><br>/root/nfs_root /root/nfs_root<br></code></pre></td></tr></table></figure><h2 id="ingress安装-参照kuboard教程"><a href="#ingress安装-参照kuboard教程" class="headerlink" title="ingress安装(参照kuboard教程)"></a>ingress安装(参照kuboard教程)</h2></li></ol>]]></content>
      
      
      <categories>
          
          <category> 安装教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> k8s </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>电脑重装系统后如何恢复Hexo博客</title>
      <link href="2022/03/15/hexo-%E9%87%8D%E8%A3%85%E7%B3%BB%E7%BB%9F%E5%90%8E%E5%A6%82%E4%BD%95%E6%81%A2%E5%A4%8D/"/>
      <url>2022/03/15/hexo-%E9%87%8D%E8%A3%85%E7%B3%BB%E7%BB%9F%E5%90%8E%E5%A6%82%E4%BD%95%E6%81%A2%E5%A4%8D/</url>
      
        <content type="html"><![CDATA[<h2 id="一：-安装nodejs-，-git"><a href="#一：-安装nodejs-，-git" class="headerlink" title="一：  安装nodejs ， git"></a>一：  安装nodejs ， git</h2><p><img src="https://img-blog.csdnimg.cn/2018122221245742"></p><h2 id="二：-配置SSH-KEY"><a href="#二：-配置SSH-KEY" class="headerlink" title="二： 配置SSH KEY"></a>二： 配置SSH KEY</h2><p>查看C:\Users\用户名.ssh下有无ssh文件夹，没有则创建</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cd</span> ~/. ssh<br>ssh-keygen -t rsa -C <span class="hljs-string">&quot;邮件地址&quot;</span><br></code></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20181222212457149"></p><p>打开用户目录，找到.ssh\id_rsa.pub文件，记事本打开并复制里面的内容，打开你的github主页，进入个人设置 -&gt; SSH and GPG keys -&gt; New SSH key：</p><p><img src="https://img-blog.csdnimg.cn/20181222212457168"></p><p>测试是否成功</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">ssh -T git@github.com<br></code></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20181222212457192"></p><p>用户名 邮箱配置</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">git config --global user.name <span class="hljs-string">&quot;pgzxc&quot;</span>// 你的github用户名，非昵称<br><br>git config --global user.email  <span class="hljs-string">&quot;xxx@qq.com&quot;</span>// 填写你的github注册邮箱<br></code></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20181222212457302"></p><h2 id="三：-进入到博客-pgzxc-文件夹删除node-modules-public-git-deploy-git，"><a href="#三：-进入到博客-pgzxc-文件夹删除node-modules-public-git-deploy-git，" class="headerlink" title="三： 进入到博客(pgzxc)文件夹删除node_modules public .git .deploy_git，"></a>三： 进入到博客(pgzxc)文件夹删除node_modules public .git .deploy_git，</h2><p><img src="https://img-blog.csdnimg.cn/20181222212457326"></p><h2 id="四：-关联Github项目"><a href="#四：-关联Github项目" class="headerlink" title="四： 关联Github项目"></a>四： 关联Github项目</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">git init<br>git remote add origin git@github.com:xxxxxxxxx.github.io.git<br></code></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20181222212457349"></p><h2 id="五：运行如下指令”npm-install-–g-hexo-”安装hexo"><a href="#五：运行如下指令”npm-install-–g-hexo-”安装hexo" class="headerlink" title="五：运行如下指令”npm install –g hexo ”安装hexo"></a>五：运行如下指令”npm install –g hexo ”安装hexo</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">npm install –g hexo<br></code></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20181222212457366"></p><h2 id="六：运行如下指令安装项目依赖"><a href="#六：运行如下指令安装项目依赖" class="headerlink" title="六：运行如下指令安装项目依赖"></a>六：运行如下指令安装项目依赖</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">npm install  <br></code></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20181222212457385"></p><h2 id="七：hexo-g-生成并本地预览"><a href="#七：hexo-g-生成并本地预览" class="headerlink" title="七：hexo -g 生成并本地预览"></a>七：hexo -g 生成并本地预览</h2><p><img src="https://img-blog.csdnimg.cn/20181222212457385"></p><h2 id="八：hexo-s-本地预览，在浏览器中输入http-localhost-4000"><a href="#八：hexo-s-本地预览，在浏览器中输入http-localhost-4000" class="headerlink" title="八：hexo -s 本地预览，在浏览器中输入http://localhost:4000/"></a>八：hexo -s 本地预览，在浏览器中输入<a href="http://localhost:4000/">http://localhost:4000/</a></h2><p><img src="https://img-blog.csdnimg.cn/20181222212457428"></p><h2 id="九：hexo-d-生成并上传"><a href="#九：hexo-d-生成并上传" class="headerlink" title="九：hexo d 生成并上传"></a>九：hexo d 生成并上传</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">hexo d<br></code></pre></td></tr></table></figure><h2 id="十：添加备份"><a href="#十：添加备份" class="headerlink" title="十：添加备份"></a>十：添加备份</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">git add .<br>git commit -m <span class="hljs-string">&#x27;modify&#x27;</span><br>git push origin hexo<br></code></pre></td></tr></table></figure><hr><blockquote><p>转载至 <a href="https://blog.csdn.net/Calvin_zhou/article/details/85218157?utm_medium=distribute.pc_relevant.none-task-blog-2~default~BlogCommendFromMachineLearnPai2~default-1.control&amp;depth_1-utm_source=distribute.pc_relevant.none-task-blog-2~default~BlogCommendFromMachineLearnPai2~default-1.control">https://blog.csdn.net/Calvin_zhou/article/details/85218157?utm_medium=distribute.pc_relevant.none-task-blog-2%7Edefault%7EBlogCommendFromMachineLearnPai2%7Edefault-1.control&amp;depth_1-utm_source=distribute.pc_relevant.none-task-blog-2%7Edefault%7EBlogCommendFromMachineLearnPai2%7Edefault-1.control</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>shell 单引号内解析变量</title>
      <link href="2022/03/15/SHELL%E5%8D%95%E5%BC%95%E5%8F%B7%E5%86%85%E8%A7%A3%E6%9E%90%E5%8F%98%E9%87%8F/"/>
      <url>2022/03/15/SHELL%E5%8D%95%E5%BC%95%E5%8F%B7%E5%86%85%E8%A7%A3%E6%9E%90%E5%8F%98%E9%87%8F/</url>
      
        <content type="html"><![CDATA[<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-meta">#!/bin/bash</span><br>test2=<span class="hljs-string">&quot;java/haoqipei&quot;</span><br>test1=<span class="hljs-string">&quot;jjjjjjjjjj/bbbbb&quot;</span><br><br><span class="hljs-built_in">echo</span> <span class="hljs-string">&#x27;&#123;&quot;kind&quot;:&quot;deployments&quot;,&quot;namespace&quot;:&quot;default&quot;,&quot;name&quot;:&quot;qqipei&quot;,&quot;images&quot;:&#123;&quot;$test1&quot;:&quot;$test1:$test2&quot;&#125;&#125;&#x27;</span><br><span class="hljs-built_in">echo</span> <span class="hljs-string">&#x27;&#123;&quot;kind&quot;:&quot;deployments&quot;,&quot;namespace&quot;:&quot;default&quot;,&quot;name&quot;:&quot;qqipei&quot;,&quot;images&quot;:&#123;&quot;&#x27;</span><span class="hljs-variable">$test1</span><span class="hljs-string">&#x27;&quot;:&quot;&#x27;</span><span class="hljs-variable">$test1</span>:<span class="hljs-variable">$test2</span><span class="hljs-string">&#x27;&quot;&#125;&#125;&#x27;</span><br></code></pre></td></tr></table></figure><p>执行结果如下 </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">&#123;<span class="hljs-string">&quot;kind&quot;</span>:<span class="hljs-string">&quot;deployments&quot;</span>,<span class="hljs-string">&quot;namespace&quot;</span>:<span class="hljs-string">&quot;default&quot;</span>,<span class="hljs-string">&quot;name&quot;</span>:<span class="hljs-string">&quot;qqipei&quot;</span>,<span class="hljs-string">&quot;images&quot;</span>:&#123;<span class="hljs-string">&quot;<span class="hljs-variable">$test1</span>&quot;</span>:<span class="hljs-string">&quot;<span class="hljs-variable">$test1</span>:<span class="hljs-variable">$test2</span>&quot;</span>&#125;&#125;<br>&#123;<span class="hljs-string">&quot;kind&quot;</span>:<span class="hljs-string">&quot;deployments&quot;</span>,<span class="hljs-string">&quot;namespace&quot;</span>:<span class="hljs-string">&quot;default&quot;</span>,<span class="hljs-string">&quot;name&quot;</span>:<span class="hljs-string">&quot;qqipei&quot;</span>,<span class="hljs-string">&quot;images&quot;</span>:&#123;<span class="hljs-string">&quot;jjjjjjjjjj/bbbbb&quot;</span>:<span class="hljs-string">&quot;jjjjjjjjjj/bbbbb:java/haoqipei&quot;</span>&#125;&#125;<br><br></code></pre></td></tr></table></figure><p>外层单引号起到变量引用得作用</p>]]></content>
      
      
      <categories>
          
          <category> shell </category>
          
      </categories>
      
      
        <tags>
            
            <tag> shell </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>docker镜像之alpine时间设置</title>
      <link href="2022/03/15/docker%E9%95%9C%E5%83%8F%E4%B9%8Balpine%E6%97%B6%E9%97%B4%E8%AE%BE%E7%BD%AE/"/>
      <url>2022/03/15/docker%E9%95%9C%E5%83%8F%E4%B9%8Balpine%E6%97%B6%E9%97%B4%E8%AE%BE%E7%BD%AE/</url>
      
        <content type="html"><![CDATA[<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash">FROM alpine:3.9<br><br><span class="hljs-comment"># 设置时区为上海</span><br>RUN apk add tzdata &amp;&amp; cp /usr/share/zoneinfo/Asia/Shanghai /etc/localtime \<br>&amp;&amp; <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;Asia/Shanghai&quot;</span> &gt; /etc/timezone \<br>&amp;&amp; apk del tzdata<br></code></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> alpine </category>
          
      </categories>
      
      
        <tags>
            
            <tag> alpine </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>分布式系统</title>
      <link href="2022/03/15/%E5%88%86%E5%B8%83%E5%BC%8F%E7%B3%BB%E7%BB%9F/"/>
      <url>2022/03/15/%E5%88%86%E5%B8%83%E5%BC%8F%E7%B3%BB%E7%BB%9F/</url>
      
        <content type="html"><![CDATA[<h2 id="分布式系统特性概念"><a href="#分布式系统特性概念" class="headerlink" title="分布式系统特性概念"></a>分布式系统特性概念</h2><ul><li>系统的各组件分布于网络上多个计算机</li><li>各组件彼此之间仅仅通过消息传递来通信并协调行动</li></ul><h2 id="分布式存在的意义"><a href="#分布式存在的意义" class="headerlink" title="分布式存在的意义"></a>分布式存在的意义</h2><p>扩展了单机处理的弱势以及瓶颈</p><ul><li>向上扩展的性价比越来越底</li><li>单机扩展存在性能上升临界点</li><li>处于稳定行以及可用性考虑, 单机会存在多方面的问题</li></ul><p>线程可以共享进程的多种资源</p><p>if [ $JAR_NAME == “hqp-refund-service” ];then<br>    dir=”./hqp-refund/hqp-refund-service”<br>    rely=”./hqp-refund/hqp-refund-api<br>  elif [ $JAR_NAME == “hqp-purchase-bid-service” ];then<br>    dir=”./hqp-purchase-bid/hqp-purchase-bid-service”<br>    rely=”./hqp-purchase-bid/hqp-purchase-bid-api”<br>  elif [ $JAR_NAME == “hqp-order-service” ];then<br>    dir=”./hqp-order/hqp-order-service”<br>    rely=”./hqp-order/hqp-order-api,./hqp-refund/hqp-refund-api,./hqp-coupon/hqp-coupon-api”<br>fi</p><p>if [ $JAR_NAME == “hqp-refund-service” ];then<br>    dir=”2222”<br>    rely=”./hqp-refund/hqp-refund-api<br>  elif [ $JAR_NAME == “hqp-purchase-bid-service” ];then<br>    dir=”./hqp-purchase-bid/hqp-purchase-bid-service”<br>    rely=”./hqp-purchase-bid/hqp-purchase-bid-api”<br>  elif [ $JAR_NAME == “hqp-order-service” ];then<br>    dir=”./hqp-order/hqp-order-service”<br>    rely=”./hqp-order/hqp-order-api,./hqp-refund/hqp-refund-api,./hqp-coupon/hqp-coupon-api”<br>fi</p><p>kubectl scale –replicas=2 deployment/zeus-bi deployment/zeus-store deployment/zeus-store -n hqp-fat2</p>]]></content>
      
      
      <categories>
          
          <category> 分布式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 分布式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>promethues 安装</title>
      <link href="2022/03/15/Prometheus%E5%AE%89%E8%A3%85%E6%96%87%E6%A1%A3/"/>
      <url>2022/03/15/Prometheus%E5%AE%89%E8%A3%85%E6%96%87%E6%A1%A3/</url>
      
        <content type="html"><![CDATA[<h1 id="Prometeus-alertmanager-blackbox-exporter"><a href="#Prometeus-alertmanager-blackbox-exporter" class="headerlink" title="Prometeus + alertmanager + blackbox exporter"></a>Prometeus + alertmanager + blackbox exporter</h1><h3 id="安装Prometheus"><a href="#安装Prometheus" class="headerlink" title="安装Prometheus"></a>安装Prometheus</h3><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs awk">mkdir -m777 -p <span class="hljs-regexp">/data/</span>prometheus_rules  <br>创建规则目录,权限设置 <span class="hljs-number">777</span> 不然没有权限读取<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">运行镜像 持久化目录/data/prometheus,/data/prometheus_rules, 需要提前创建默认配置文件,不然没有配置文件容器不能启动<br><br>docker run  -itd   -p 9090:9090 --name  prometheus -v /data/prometheus_config/prometheus.yml:/etc/prometheus/prometheus.yml -v /data/prometheus_rules:/prometheus_rules prom/prometheus --config.file=<span class="hljs-string">&quot;/etc/prometheus/prometheus.yml&quot;</span>  --web.enable-lifecycle<br></code></pre></td></tr></table></figure><h3 id="安装grafana-web图形展示"><a href="#安装grafana-web图形展示" class="headerlink" title="安装grafana (web图形展示)"></a>安装grafana (web图形展示)</h3><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs awk">mkdir -m777 -p <span class="hljs-regexp">/data/g</span>rafana-storage<br>创建grafana持久化目录,设置权限<span class="hljs-number">777</span><br></code></pre></td></tr></table></figure><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs awk">运行镜像, 持久化目录:<span class="hljs-regexp">/data/g</span>rafana-storage<br><br>docker run -dit -p <span class="hljs-number">3000</span>:<span class="hljs-number">3000</span> --name grafana -v <span class="hljs-regexp">/data/g</span>rafana-storage:<span class="hljs-regexp">/var/</span>lib<span class="hljs-regexp">/grafana grafana/g</span>rafanadata/<br></code></pre></td></tr></table></figure><h3 id="安装node-exporter-资源监控"><a href="#安装node-exporter-资源监控" class="headerlink" title="安装node-exporter (资源监控)"></a>安装node-exporter (资源监控)</h3><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs crmsh"><span class="hljs-keyword">node</span><span class="hljs-title">-exporter</span>每个需要监控的节点都需要安装<br></code></pre></td></tr></table></figure><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">运行镜像<br><br>docker run -itd --name <span class="hljs-keyword">node</span><span class="hljs-title">-exporter</span> -p <span class="hljs-number">9100</span>:<span class="hljs-number">9100</span> -v <span class="hljs-string">&quot;/proc:/host/proc:ro&quot;</span> -v <span class="hljs-string">&quot;/sys:/host/sys:ro&quot;</span> -v <span class="hljs-string">&quot;/:/rootfs:ro&quot;</span> --<span class="hljs-attr">net=</span><span class="hljs-string">&quot;host&quot;</span> prom/<span class="hljs-keyword">node</span><span class="hljs-title">-exporter</span><br></code></pre></td></tr></table></figure><h3 id="安装AlertManager-报警插件"><a href="#安装AlertManager-报警插件" class="headerlink" title="安装AlertManager (报警插件)"></a>安装AlertManager (报警插件)</h3><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs haskell"><span class="hljs-title">mkdir</span> -p /<span class="hljs-class"><span class="hljs-keyword">data</span>/&#123;<span class="hljs-title">alertmanager_conf</span>,<span class="hljs-title">alertmanager</span>&#125;</span><br>创建持久化目录<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">运行镜像 需要提前创建默认配置文件,不然没有配置文件容器不能启动<br><br>docker run -itd -name alertmanager -p 9093:9093 -v /data/alertmanager_conf:/etc/alertmanager -v /data/alertmanager:/alertmanager --config.file=<span class="hljs-string">&quot;/etc/alertmanager/alertmanager.yml&quot;</span> prom/alertmanager<br></code></pre></td></tr></table></figure><h3 id="安装blackbox-exporter-http、dns、tcp、icmp-监控数据采集"><a href="#安装blackbox-exporter-http、dns、tcp、icmp-监控数据采集" class="headerlink" title="安装blackbox_exporter (http、dns、tcp、icmp 监控数据采集)"></a>安装blackbox_exporter (http、dns、tcp、icmp 监控数据采集)</h3><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs awk">mkdir <span class="hljs-regexp">/data/</span>blackbox_exporter<br>创建配置文件持久化目录<br></code></pre></td></tr></table></figure><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs awk">运行镜像 需要提前创建默认配置文件,不然没有配置文件容器不能启动<br>docker run -itd --name blackbox_exporter -p <span class="hljs-number">9115</span>:<span class="hljs-number">9115</span> -v <span class="hljs-regexp">/data/</span>blackbox_exporter:<span class="hljs-regexp">/config prom/</span>blackbox_exporter<br></code></pre></td></tr></table></figure><h2 id="规则和配置文件"><a href="#规则和配置文件" class="headerlink" title="规则和配置文件"></a>规则和配置文件</h2><ul><li>配置文件检查工具: promtool<ul><li>下载Prometheus二进制包,解压之后 复制出来单独的promtool二进制文件即可使用</li><li>使用示例: promtool check config /prometheus_config/config.yml</li></ul></li><li>prometheus配置文件:<ul><li>/data/prometheus_config/prometheus.yml</li><li>规则目录: /data/prometheus_rules/*.yml</li><li>具体配置内容,看配置文件,有注释</li></ul></li><li>alermanager配置文件<ul><li>/data/alertmanager_conf/alertmanager.yml</li><li>告警模板: /data/alertmanager/templates/email.tmpl</li></ul></li><li>blackbox_exporter配置文件<ul><li>/data/blackbox_exporter/blackbox.yml</li><li>配置好模块之后在Prometheus配置文件里面引用</li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> Prometheus </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Prometheus </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>centos7-关闭ipv6</title>
      <link href="2022/03/15/centos7-%E5%85%B3%E9%97%ADipv6/"/>
      <url>2022/03/15/centos7-%E5%85%B3%E9%97%ADipv6/</url>
      
        <content type="html"><![CDATA[<p>1.在/etc/sysctl.conf中添加此规则：<br>net.ipv6.conf.all.disable_ipv6 = 1</p><p>2.在/etc/sysconfig/network中添加此规则：<br>NETWORKING_IPV6 = no</p><p>3.在/etc/sysconfig/network-scripts/ifcfg-ethX中添加此规则：<br>IPV6INIT = no</p><p>4.关闭防火墙的开机自启动服务：<br>systemctl disable ip6tables.service</p><p>5.重新加载sysctl配置或者重启网络<br>#sysctl -p<br>or<br>#systemctl restart network</p>]]></content>
      
      
      <categories>
          
          <category> 教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 教程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>linux性能优化-cpu</title>
      <link href="2022/03/15/linux%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96-cpu%E7%AF%87/"/>
      <url>2022/03/15/linux%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96-cpu%E7%AF%87/</url>
      
        <content type="html"><![CDATA[<h3 id="什么是”平均负载”"><a href="#什么是”平均负载”" class="headerlink" title="什么是”平均负载”"></a>什么是”平均负载”</h3><p>单位时间内, 系统处于可运行状态和不可终端状态的评价进程数,也就是平均活跃进程数,(和cpu并没有直接关系)</p><ul><li>可运行状态: 正在使用cpu或者等待cpu的进程,r状态</li><li>不可中断状态: 处于内核态流程装的状态, 并且不可中断,比如常见的硬件等I/O响应,D状态</li></ul><p>也就是系统一段时间内运行的进程的数量. 负载的压力程度跟cpu的逻辑个数成正比.</p><h3 id="负载多少时比较合理"><a href="#负载多少时比较合理" class="headerlink" title="负载多少时比较合理"></a>负载多少时比较合理</h3><p>平均负载最理想的情况是等于cpu的个数,所以提前要知道有多少个cpu<br>cpu文件: /proc/cpuinfo<br><code>grep &#39;model name&#39; /proc/cpuinfo | wc -l</code></p><h3 id="常用工具"><a href="#常用工具" class="headerlink" title="常用工具"></a>常用工具</h3><p>top / uptime  1分钟 5分钟 15分钟的平均负载<br>iostat / mpstat / pidstat</p><h3 id="平均负载与cpu使用率"><a href="#平均负载与cpu使用率" class="headerlink" title="平均负载与cpu使用率"></a>平均负载与cpu使用率</h3><p>平均负载包含运行和中断状态, 所以包含了 正在使用cpu的进程,等待cpu和等待io的进程<br>而cpu使用率, 是单位时间内,cpu繁忙情况的统计,跟平均负载并不完全对应例如:</p><ul><li>cpu密集型 大量使用cpu 导致平均负载升高</li><li>io密集型 等待io导致平均负载升高, 但是cpu使用率不一定会升高</li><li>大量等待cpu的进程调度也会导致平均负载升高,此时cpu使用率也会比较高(上下文切换)</li></ul><hr><h3 id="什么是上下文切换"><a href="#什么是上下文切换" class="headerlink" title="什么是上下文切换"></a>什么是上下文切换</h3><p>linux 是一个多任务操作系统, 为了保持多任务运行 所以 要将cpu轮流分配给程序运行,造成了多任务同时运行的错觉.</p><p>知识点: cpu寄存器 , 程序计数器</p><p>cpu寄存器 cpu内置的内存, 程序计数器 用来存储cpu正在执行指令的位置,或者下一条指令的位置, 他们都是cpu在允许程序前必须依赖的环境, 也就是上下文切换</p><p>上下文切换包含: 进程上下文切换 线程上下文切换 中断上下文切换<br>进程上下文切换: 用户态–&gt; 内核态 —&gt; 用户态 期间通过<code>系统调用</code>完成,  需要 open() —&gt; read() —&gt; write() —&gt; close() , 那么上下文就是 保存用户态,切换内核态,恢复用户态, 一次系统调用 发生两次cpu上下文切换.<br>进程是由内核来管理和调度的,进程的切换只能发生在内核态, 所以进程的切换不仅包含了 虚拟内存,栈,全局变量,用户空间等资源,还包括了 内核堆栈,寄存器等内核空间的状态<br>线程上下文切换: 线程共享进程的资源数据, 所以线程切换只需要保存自己的私有数据即可, 所以多线程可以节约上下文切换中消耗的资源</p><p><img src="https://cdn.jsdelivr.net/gh/natsu-ten/images/img/%E4%B8%8A%E4%B8%8B%E6%96%87%E5%88%87%E6%8D%A2.png" alt="上下文切换"></p><p>cpu上下文切换常用工具：</p><ul><li>vmstat 5 #每五秒输出一组数据</li><li>pidstat -w 5 # 每5秒输出一组数据 -t 显示线程<ul><li> cswch/s : 自愿上下文切换 ： 指进程无法获取到所需资源，导致的上下文切换， 比如 io 内存等系统资源不足时 就会发生自愿上下文切换</li><li> nvcswch/s ： 非自愿上下文切换： 由于时间片已到等待时间，被系统强行调度，而发生的上下文切换</li></ul></li></ul><h3 id="cpu使用率"><a href="#cpu使用率" class="headerlink" title="cpu使用率"></a>cpu使用率</h3><p>linux 作为一个多任务操作系统， 将每个cpu的时间划分为很短的时间片，再通过调度器分配给各个任务使用，因此造成多个任务同时执行的假象<br>为了维护cpu时间， linux 通过事先定义的节拍率 （内核中表示为HZ），触发时间中断，并使用全局变量jiffes 记录开机以来的节拍数 每发生一次时间中断，jiffies就加一</p><p>不同的系统可能设置不同的数值， 可以设置为 100 250 1000 等， 可以通过 /boot/config 内核选项来查看</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ grep <span class="hljs-string">&#x27;CONFIG_HZ=&#x27;</span> /boot/config-$(uname -r)<br>CONFIG_HZ=250<br></code></pre></td></tr></table></figure><h3 id="cpu使用率过高怎么处理"><a href="#cpu使用率过高怎么处理" class="headerlink" title="cpu使用率过高怎么处理"></a>cpu使用率过高怎么处理</h3><p>dstat 1 10<br>perf top<br>perf recode<br>perf report</p><p>docker里面无法显示进程名，容器外执行perf recode之后 复制data文件到容器内部执行 perf report</p><h3 id="cpu-优化思路"><a href="#cpu-优化思路" class="headerlink" title="cpu 优化思路"></a>cpu 优化思路</h3><ul><li>怎么评估性能优化的效果<ul><li>性能指标量化</li><li>优化前 vs 优化后  性能指标的对比</li></ul></li><li>多个性能问题时,怎么优化<ul><li>并不是所有的性能问题都必须优化, 二八原则, 可能80%的问题是由于20%的问题导致,优化前先思考清楚 分析问题,怎么优化才能收益最大化</li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 性能优化 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>三步搭建VPC专有网络NAT网关</title>
      <link href="2022/03/15/%E9%98%BF%E9%87%8C%E4%BA%91ecs%20%E6%90%AD%E5%BB%BAvps%E4%B8%93%E6%9C%89%E7%BD%91%E7%BB%9CNAT%E7%BD%91%E5%85%B3/"/>
      <url>2022/03/15/%E9%98%BF%E9%87%8C%E4%BA%91ecs%20%E6%90%AD%E5%BB%BAvps%E4%B8%93%E6%9C%89%E7%BD%91%E7%BB%9CNAT%E7%BD%91%E5%85%B3/</url>
      
        <content type="html"><![CDATA[<h3 id="参考链接-https-developer-aliyun-com-article-607330-spm-5176-smartservice-service-robot-chat-new-0-0-76533cdaL0De0p"><a href="#参考链接-https-developer-aliyun-com-article-607330-spm-5176-smartservice-service-robot-chat-new-0-0-76533cdaL0De0p" class="headerlink" title="参考链接 https://developer.aliyun.com/article/607330?spm=5176.smartservice_service_robot_chat_new.0.0.76533cdaL0De0p"></a>参考链接 <a href="https://developer.aliyun.com/article/607330?spm=5176.smartservice_service_robot_chat_new.0.0.76533cdaL0De0p">https://developer.aliyun.com/article/607330?spm=5176.smartservice_service_robot_chat_new.0.0.76533cdaL0De0p</a></h3><p>重启有公网的ecs之后 需要执行   iptables -t nat -I POSTROUTING -s 172.16.0.0/16 -j SNAT –to-source 172.16.2.9</p><p>搭建NAT网关就是为了实现在相同VPC内，没有公网IP的ECS借助有公网的ECS访问外网，或者是外网通过端口映射访问到内网服务器。</p><p>SNAT：实现没有公网IP的ECS实例借助有公网的ECS访问外网，但是外网无法访问到内网IP；</p><p>DNAT：实现外网通过端口映射访问到内网服务器，但是不能实现内网ECS访问到外网。</p><p>一共三个步骤：</p><p>第一步：开启ECS的ip转发功能</p><p>这步只在有公网的ECS上操作：</p><p>vi /etc/sysctl.conf</p><p>找到 net.ipv4.ip_forward = 1 这一条，确保后面的值为1就行，如果没有这一条，手动加进去。</p><p>697c983cf08a99f21a04bbb74bb40608e7e09acb</p><p>保存退出，然后使用 sysctl -p 命令使上面的修改生效。</p><p>fd431fe987f4d1f303c83716f1190942f33f0f3a</p><p>第二步：设置VPC路由条目</p><p>这一部需要在阿里云控制台操作，添加一条VPC的路由条目</p><p>找不到在哪的可以参考视频教程<a href="https://help.aliyun.com/video_detail/54653.html">https://help.aliyun.com/video_detail/54653.html</a></p><p>在VPC的路由表中，添加如下一条路由条目。</p><p>5883cab1fee276485c56cd343d14c40e14b8a819</p><p>其中目标网段一定要填0.0.0.0/0</p><p>ECS实例选择有公网IP的那个实例。</p><p>第三步：设置iptables 的NAT转发规则</p><p>1、设置SNAT规则</p><p>就一条命令搞定，别直接复制啊，需要根据你的实际情况改一下IP地址：</p><p>iptables -t nat -I POSTROUTING -s 172.16.0.0/16 -j SNAT –to-source 172.16.107.49</p><p>可以这样理解 iptables -t nat -I POSTROUTING -s VPC的IP段 -j SNAT –to-source 有公网IP的ECS内网IP<br>回车执行后要永久生效，还需要保存在iptables配置文件中：</p><p>service iptables save</p><p>如果使用vi /etc/sysconfig/iptables命令查看iptables配置文件，就会发现多了一条nat表的snat转发规则：</p><p>5d3d6c2fa0c6dd70d0503b055bf0adcfc0026154</p><p>然后重启iptables使规则生效：</p><p>systemctl restart iptables.service</p><p>现在没有内网的ECS就可以访问公网了。</p><p>2、设置DNAT规则</p><p>DNAT需要两条命令：</p><p>同样不要照搬复制，需要根据你的实际情况修改下IP</p><p>iptables -t nat -I PREROUTING -p tcp –dport 80 -j DNAT –to 172.16.93.38<br>iptables -t nat -I POSTROUTING -p tcp –dport 80 -j MASQUERADE<br>可以这样理解：</p><p>iptables -t nat -I PREROUTING -p tcp –dport 有公网IP的ECS端口号 -j DNAT –to 目标内网ECS的内网IP</p><p>iptables -t nat -I POSTROUTING -p tcp –dport 有公网IP的ECS端口号 -j MASQUERADE</p><p>比如上面的示例中，是把有公网IP的ECS 80端口映射到了172.16.93.38这个内网实例的80端口。</p><p>回车执行后要永久生效，还需要保存在iptables配置文件中：</p><p>service iptables save</p><p>同样的，如果使用vi /etc/sysconfig/iptables命令查看iptables配置文件，就会发现多了两条nat表的dnat转发规则：</p><p>134a528b2498f19649be73759e665a323a83607e</p><p>前后端口映射不一致怎么办？简单啊，在/etc/sysconfig/iptables内的目标IP后面直接加特定的端口号就行</p><p>ea43d78175c870d40dbf4c1709a51dc73e5b888f</p><p>也是同样的，最后重启iptables使规则生效：</p><p>systemctl restart iptables.service</p><p>测试正常。</p><p>如果不生效，请检查是否是同一VPC内，iptables规则是否有冲突。如果ECS内安装了docker，docker自带的nat转发规则会有影响，需要合理的网段规划和路由规划。</p>]]></content>
      
      
      <categories>
          
          <category> ecs </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 阿里云 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>overlay2 文件系统原理</title>
      <link href="2022/03/15/overlay2%20%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F%E5%8E%9F%E7%90%86/"/>
      <url>2022/03/15/overlay2%20%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F%E5%8E%9F%E7%90%86/</url>
      
        <content type="html"><![CDATA[<h3 id="overlay2-工作原理"><a href="#overlay2-工作原理" class="headerlink" title="overlay2 工作原理"></a>overlay2 工作原理</h3><p>overlay2 和 AUFS 类似，它将所有目录称之为层（layer），overlay2 的目录是镜像和容器分层的基础，而把这些层统一展现到同一的目录下的过程称为联合挂载（union mount）。overlay2 把目录的下一层叫作lowerdir，上一层叫作upperdir，联合挂载后的结果叫作merged。</p><p>总体来说，overlay2 是这样储存文件的：overlay2将镜像层和容器层都放在单独的目录，并且有唯一 ID，每一层仅存储发生变化的文件，最终使用联合挂载技术将容器层和镜像层的所有文件统一挂载到容器中，使得容器中看到完整的系统文件。</p><p>overlay2 文件系统最多支持 128 个层数叠加，也就是说你的 Dockerfile 最多只能写 128 行，不过这在日常使用中足够了。</p>]]></content>
      
      
      <categories>
          
          <category> docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 文件系统 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>linux基础问题</title>
      <link href="2022/03/15/linux%E5%9F%BA%E7%A1%80%E9%97%AE%E9%A2%98/"/>
      <url>2022/03/15/linux%E5%9F%BA%E7%A1%80%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<h2 id="基础问题合集"><a href="#基础问题合集" class="headerlink" title="基础问题合集"></a>基础问题合集</h2><ul><li><p>yum remove 不能干净的卸载软件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 用rpm -e --nodeps 代替 remove 移除软件</span><br><span class="hljs-comment"># yum remove sysstat # 只能卸载软件包无法卸载其依赖</span><br>rpm -e --nodeps sysstat <br></code></pre></td></tr></table></figure></li><li><p>同时安装不同版本的软件 如何选择使用那个</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 通过切换$PATH 的环境变量来实现</span><br><span class="hljs-built_in">echo</span> <span class="hljs-variable">$PATH</span> <br><span class="hljs-built_in">export</span> PATH=<span class="hljs-variable">$PATH</span>:/XXX/XXX<br></code></pre></td></tr></table></figure></li><li><p>查询某个时间段的日志</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sed -n <span class="hljs-string">&#x27;/2022-02-16 14:24/,/14:26/p&#x27;</span> xxxx.log<br></code></pre></td></tr></table></figure></li><li><p>linux tmp目录下面自动删除时间</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">cat /usr/lib/tmpfiles.d/tmp.conf<br></code></pre></td></tr></table></figure></li><li><p>grep 两个小常识</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># grep -w 精确匹配</span><br><span class="hljs-comment"># 过滤grep自身的命令, 只需要给 匹配的某个参数加上[]</span><br><span class="hljs-comment"># ps -ef | grep [c]rond</span><br></code></pre></td></tr></table></figure></li><li><p>sed 小常识</p></li></ul><ul><li><p>shell 脚本 for循环中镶嵌nohup 后台执行</p><p>脚本中for循环 使用wget 批量下载 时, 使用 nohup &amp; ,  这样因为使用了 &amp; 符号, 提前进入后台, 无法进入下一个循环 </b><br>如果不用 &amp; , 那么就是顺序执行, 不能批量进行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 可以把 nohup 传递给echo 新开一个bash执行</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span>  [0-9]*;<span class="hljs-keyword">do</span> <br>  <span class="hljs-built_in">cd</span> <span class="hljs-variable">$i</span>; <span class="hljs-comment">#2</span><br>  <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;nohup wget http://xxxxxx.tar &amp;&quot;</span> | bash; <br><span class="hljs-keyword">done</span><br></code></pre></td></tr></table></figure></li><li><p>mysql配置文件查看</p><p>mysql –help|grep ‘my.cnf’</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>linux性能优化-网络</title>
      <link href="2022/03/15/linux%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96-%E7%BD%91%E7%BB%9C%E7%AF%87/"/>
      <url>2022/03/15/linux%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96-%E7%BD%91%E7%BB%9C%E7%AF%87/</url>
      
        <content type="html"><![CDATA[<h3 id="7层OSI模型"><a href="#7层OSI模型" class="headerlink" title="7层OSI模型"></a>7层OSI模型</h3><ul><li><p>应用层</p></li><li><p>表示层</p></li><li><p>会话层</p></li><li><p>传输层</p></li><li><p>网络层</p></li><li><p>链路层</p></li><li><p>物理层</p><h3 id="linux中的网络模型-TCP-IP-模型"><a href="#linux中的网络模型-TCP-IP-模型" class="headerlink" title="linux中的网络模型 TCP/IP 模型"></a>linux中的网络模型 TCP/IP 模型</h3></li><li><p>应用层</p></li><li><p>传输层</p></li><li><p>网络层</p></li><li><p>网络接口层<br><img src="https://cdn.jsdelivr.net/gh/natsu-ten/images/img/osi%E6%A8%A1%E5%9E%8B.png" alt="osi模型"></p></li></ul><h3 id="MTU"><a href="#MTU" class="headerlink" title="MTU"></a>MTU</h3><p>网络接口配置的最大传输单元 MTU , 规定了最大的ip包大小, 常用的以太网中 MTU的默认值为 1500, 超过这个大小, 就会在网络层分片后的ip包不大于MTU, MTU 越大 需要分包就越少,自然网络吞吐能力就越强</p><h3 id="网络包处理流程"><a href="#网络包处理流程" class="headerlink" title="网络包处理流程"></a>网络包处理流程</h3><p><img src="https://cdn.jsdelivr.net/gh/natsu-ten/images/img/%E7%BD%91%E7%BB%9C%E5%8C%85%E5%A4%84%E7%90%86%E6%B5%81%E7%A8%8B.png" alt="网络包处理流程"></p><h3 id="网络性能指标"><a href="#网络性能指标" class="headerlink" title="网络性能指标"></a>网络性能指标</h3><ul><li>带宽</li><li>延迟</li><li>吞吐量</li><li>pps</li></ul><hr><ul><li><p>网络可用性</p></li><li><p>丢包率</p></li><li><p>并发连接数</p></li><li><p>重传率</p><h3 id="网络io模型"><a href="#网络io模型" class="headerlink" title="网络io模型"></a>网络io模型</h3></li><li><p>i/o事件的通知方式, 水平触发和边缘触发</p><ul><li>水平触发: 只要文件描述符可以非阻塞的执行i/o,就会触发通知, 也就是说程序可以随时检查文件描述符的状态,然后在根据状态进行io操作</li><li>边缘触发: 只有在文件描述符的状态发生改变, 也就是io请求达到时,才会发送一次通知, 这时候 应用程序就需要尽可能多的执行i/o 直到无法继续读写.才可以停止,如果io没有执行完, 或者因为某些原因没来的急处理 那么这次通知就丢失了</li></ul></li></ul><h3 id="PPS测试工具"><a href="#PPS测试工具" class="headerlink" title="PPS测试工具"></a>PPS测试工具</h3><p>pktgen</p><h3 id="TCP-UDP-性能测试"><a href="#TCP-UDP-性能测试" class="headerlink" title="TCP UDP 性能测试"></a>TCP UDP 性能测试</h3><p>iperf和netperf都是最常用的网络性能测试工具, 测试tcp udp 的吞吐量.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">#安装iperf</span><br>yum install iperf3<br></code></pre></td></tr></table></figure><p>在目标机器上面启动服务端</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># -s 表示启动服务端，-i 表示汇报间隔，-p 表示监听端口</span><br>$ iperf3 -s -i 1 -p 10000<br></code></pre></td></tr></table></figure><p>在另一台机器上运行iperf客户端进行测试</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># -c 表示启动客户端，192.168.0.30 为目标服务器的 IP</span><br><span class="hljs-comment"># -b 表示目标带宽 (单位是 bits/s)</span><br><span class="hljs-comment"># -t 表示测试时间</span><br><span class="hljs-comment"># -P 表示并发数，-p 表示目标服务器监听端口</span><br>$ iperf3 -c 192.168.0.30 -b 1G -t 15 -P 2 -p 10000<br></code></pre></td></tr></table></figure><p>然后查看 iperf的报告, </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">[ ID] Interval           Transfer     Bandwidth<br>...<br>[SUM]   0.00-15.04  sec  0.00 Bytes  0.00 bits/sec                  sender<br>[SUM]   0.00-15.04  sec  1.51 GBytes   860 Mbits/sec                  receiver<br></code></pre></td></tr></table></figure><p>最后的 SUM 行就是测试的汇总结果，包括测试时间、数据传输量以及带宽等。按照发送和接收，这一部分又分为了 sender 和 receiver 两行。</p><p>从测试结果你可以看到，这台机器 TCP 接收的带宽（吞吐量）为 860 Mb/s， 跟目标的 1Gb/s 相比，还是有些差距的。</p><h3 id="http性能测试"><a href="#http性能测试" class="headerlink" title="http性能测试"></a>http性能测试</h3><p>ab : apache自带的http压测工具, 主要测试http服务的每秒请求数, 请求延迟 吞吐量以的分布情况等</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">#安装ab</span><br>yum install -y httpd-tools<br></code></pre></td></tr></table></figure><p>测试nginx性能为例:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># -c 表示并发请求数为 1000，-n 表示总的请求数为 10000</span><br>$ ab -c 1000 -n 10000 http://192.168.0.30/<br><br>...<br>Server Software:        nginx/1.15.8<br>Server Hostname:        192.168.0.30<br>Server Port:            80<br> <br>...<br> <br>Requests per second:    1078.54 [<span class="hljs-comment">#/sec] (mean)</span><br>Time per request:       927.183 [ms] (mean)<br>Time per request:       0.927 [ms] (mean, across all concurrent requests)<br>Transfer rate:          890.00 [Kbytes/sec] received<br> <br>Connection Times (ms)<br>              min  mean[+/-sd] median   max<br>Connect:        0   27 152.1      1    1038<br>Processing:     9  207 843.0     22    9242<br>Waiting:        8  207 843.0     22    9242<br>Total:         15  233 857.7     23    9268<br> <br>Percentage of the requests served within a certain time (ms)<br>  50%     23<br>  66%     24<br>  75%     24<br>  80%     26<br>  90%    274<br>  95%   1195<br>  98%   2335<br>  99%   4663<br> 100%   9268 (longest request)<br></code></pre></td></tr></table></figure><p>可以看到，ab 的测试结果分为三个部分，分别是请求汇总、连接时间汇总还有请求延迟汇总。以上面的结果为例，我们具体来看。</p><p>在请求汇总部分，你可以看到：</p><ul><li><p>Requests per second 为 1074；</p></li><li><p>每个请求的延迟（Time per request）分为两行，第一行的 927 ms 表示平均延迟，包括了线程运行的调度时间和网络请求响应时间，而下一行的 0.927ms ，则表示实际请求的响应时间；</p></li><li><p>Transfer rate 表示吞吐量（BPS）为 890 KB/s。</p></li></ul><p>连接时间汇总部分，则是分别展示了建立连接、请求、等待以及汇总等的各类时间，包括最小、最大、平均以及中值处理时间。</p><p>最后的请求延迟汇总部分，则给出了不同时间段内处理请求的百分比，比如， 90% 的请求，都可以在 274ms 内完成</p><h3 id="应用负载性能测试"><a href="#应用负载性能测试" class="headerlink" title="应用负载性能测试"></a>应用负载性能测试</h3><p>wrk : http性能测试工具, 内置luaJIT 根据实际需求, 生成所需的请求负载, 或者自定义响应处理方法</p><p>wrk安装: 通过源码编译安装即可</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">git <span class="hljs-built_in">clone</span> https://github.com/wg/wrk<br><span class="hljs-built_in">cd</span> wrk<br>make<br>cp wrk /usr/<span class="hljs-built_in">local</span>/bin<br></code></pre></td></tr></table></figure><p>测试nginx性能</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># -c 表示并发连接数 1000，-t 表示线程数为 2</span><br>$ wrk -c 1000 -t 2 http://192.168.0.30/<br>Running 10s <span class="hljs-built_in">test</span> @ http://192.168.0.30/<br>  2 threads and 1000 connections<br>  Thread Stats   Avg      Stdev     Max   +/- Stdev<br>    Latency    65.83ms  174.06ms   1.99s    95.85%<br>    Req/Sec     4.87k   628.73     6.78k    69.00%<br>  96954 requests <span class="hljs-keyword">in</span> 10.06s, 78.59MB <span class="hljs-built_in">read</span><br>  Socket errors: connect 0, <span class="hljs-built_in">read</span> 0, write 0, timeout 179<br>Requests/sec:   9641.31<br>Transfer/sec:      7.82MB<br></code></pre></td></tr></table></figure><p>这里使用 2 个线程、并发 1000 连接，重新测试了 Nginx 的性能。你可以看到，每秒请求数为 9641，吞吐量为 7.82MB，平均延迟为 65ms，比前面 ab 的测试结果要好很多。</p><p>当然，wrk 最大的优势，是其内置的 LuaJIT，可以用来实现复杂场景的性能测试。wrk 在调用 Lua 脚本时，可以将 HTTP 请求分为三个阶段，即 setup、running、done，如下图所示：</p><p><img src="https://cdn.jsdelivr.net/gh/natsu-ten/images/img/wrk.png" alt="wrk"></p>]]></content>
      
      
      <categories>
          
          <category> linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 性能优化 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>cgroups概念详解</title>
      <link href="2022/03/15/cgroups%E5%9F%BA%E7%A1%80%E6%A6%82%E5%BF%B5/"/>
      <url>2022/03/15/cgroups%E5%9F%BA%E7%A1%80%E6%A6%82%E5%BF%B5/</url>
      
        <content type="html"><![CDATA[<p> 参考链接:  <a href="https://zhuanlan.zhihu.com/p/388101355">https://zhuanlan.zhihu.com/p/388101355</a></p><h3 id="什么是cgroups"><a href="#什么是cgroups" class="headerlink" title="什么是cgroups?"></a><strong>什么是cgroups?</strong></h3><p>Cgroups是linux的一种内核机制,这种机制可以根据系统需求把系统任务和子任务按照资源等级划分或整合到不同的组内,从而为管理系统资源提供一个框架, 简单说 Cgroups就是限制,记录追踪应用程序使用物理资源的机制, 本质上说是内核附加在应用程序上面的一系列钩子,通过应用程序调用系统资源从而触发钩子,钩子追踪记录,限制程序使用系统资源</p><h3 id="为什么要使用Cgroups"><a href="#为什么要使用Cgroups" class="headerlink" title="为什么要使用Cgroups?"></a><strong>为什么要使用Cgroups?</strong></h3><p>Cgroups可以对cpu,内存等资源进行精细化控制,比如docker k8s的pod 都使用cgroups进行对容器的资源控制</p><h3 id="cgroups的主要作用"><a href="#cgroups的主要作用" class="headerlink" title="cgroups的主要作用"></a><strong>cgroups的主要作用</strong></h3><p>为不同用户层面提供一个资源管理的统一化的接口,从单个任务的资源控制到操作系统层面的虚拟化 Cgroups提供了四大功能</p><ul><li>资源限制 : 对任务总额进行限制,比如内存超出 触发OOM机制</li><li>优先级分配 : 通过分配的cpu时间片和磁盘io带宽,实际上就等同于控制了任务运行的优先级 </li><li>资源统计: Cgroup可以统计系统资源的使用量,比如cpu使用时长,内存使用量,等</li><li>任务控制 : 可以对任务执行挂起,恢复等操作</li></ul><h3 id="Cgroups的概念以及原理"><a href="#Cgroups的概念以及原理" class="headerlink" title="Cgroups的概念以及原理"></a><strong>Cgroups的概念以及原理</strong></h3><ul><li><strong>Task(任务)</strong> : 在linux系统中 , 内核本身的调度和管理并不对进程和线程进行区分,只是根据clone时传入的参数从概念上划分进行和线程, 这里使用task来表示系统的一个进程或者线程</li><li><strong>Cgroups(控制组)</strong> : cgroups中的资源控制以cgroup为单位实现,cgroup表示按某种资源控制表中划分而成的任务组, 包含一个或多个子系统,一个任务可以加入某个cgroup,也可以从某个cgroup迁移到一个cgroup </li><li><strong>subsystem(子系统)</strong> : 子系统可以到 /proc/cgrousp 文件下查看 就是一个资源调度控制器, 比如cpu子系统可以控制cpu的时间分配.内存子系统可以限制内存的使用量<ul><li>blkio 对块设备的 IO 进行限制。</li><li>cpu 限制 CPU 时间片的分配，与 cpuacct 挂载在同一目录。</li><li>cpuacct 生成 cgroup 中的任务占用 CPU 资源的报告，与 cpu 挂载在同一目录。</li><li>cpuset 给 cgroup 中的任务分配独立的 CPU(多处理器系统) 和内存节点。</li><li>devices 允许或禁止 cgroup 中的任务访问设备。</li><li>freezer 暂停/恢复 cgroup 中的任务。</li><li>hugetlb 限制使用的内存页数量。</li><li>memory 对 cgroup 中的任务的可用内存进行限制，并自动生成资源占用报告。</li><li>net_cls 使用等级识别符（classid）标记网络数据包，这让 Linux 流量控制器（tc 指令）可以识别来自特定 cgroup 任务的数据包，并进行网络限制。</li><li>net_prio 允许基于 cgroup 设置网络流量(netowork traffic)的优先级。</li><li>perf_event 允许使用 perf 工具来监控 cgroup。</li><li>pids 限制任务的数量。</li></ul></li><li><strong>hierarchy(层级)</strong> : 层级有一系列cgroup以一个树状结构排列而成,每一个层级通过绑定对应的子系统进行资源控制,层级中的cgroup节点可以包含零个或者多个子节点 子节点继承父节点挂载的子系统,一个操作系统中可以有多个层级</li></ul><h3 id="测试以及测试后删除目录"><a href="#测试以及测试后删除目录" class="headerlink" title="测试以及测试后删除目录"></a><strong>测试以及测试后删除目录</strong></h3><p>利用Cgroup 限制进程cpu使用量<br>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs bash"> mount -t cgroup  <span class="hljs-comment">#查看cgroup挂在目录</span><br><br> <span class="hljs-comment"># 创建test测试目录</span><br> <span class="hljs-built_in">cd</span> /sys/fs/cgroup/cpu &amp;&amp;  mkdir <span class="hljs-built_in">test</span><br> <span class="hljs-built_in">cd</span> <span class="hljs-built_in">test</span><br><br> <span class="hljs-built_in">echo</span> 100000 &gt; cpu.cfs_period_us   <span class="hljs-comment"># 设定周期时间，必须与cfs_quota_us配合使用</span><br> <span class="hljs-built_in">echo</span> 20000 &gt; cpu.cfs_quota_us     <span class="hljs-comment"># 限制cpu最高占用20%资源</span><br><br> <span class="hljs-comment">#写一个死循环脚本</span><br> cat &gt; test.sh &lt;&lt; <span class="hljs-string">EOF</span><br><span class="hljs-string"> #!/bin/bash</span><br><span class="hljs-string"> i=1</span><br><span class="hljs-string"> while :</span><br><span class="hljs-string"> do</span><br><span class="hljs-string"> let i+=1</span><br><span class="hljs-string"> echo $i</span><br><span class="hljs-string"> done</span><br><span class="hljs-string"> EOF</span><br><br>bash test.sh <span class="hljs-comment"># 运行脚本</span><br><br>top  <span class="hljs-comment"># 查看test.sh 的pid 并写入 test目录下的task文件, 让他监控这个进程</span><br><br><span class="hljs-built_in">echo</span> 1234 &gt; /sys/fs/cgroup/cpu/<span class="hljs-built_in">test</span>/tasks <br><br><span class="hljs-comment">#观察cpu占用率</span><br><br><span class="hljs-comment">#删除测试完的目录</span><br>yum install libcgroup<br>yum install libcgroup-tools<br><br><span class="hljs-comment">#验证是否安装成功</span><br>cgdelete -h<br><br><span class="hljs-comment">#删除</span><br>cgdelete cpu:/<span class="hljs-built_in">test</span>/<br><br></code></pre></td></tr></table></figure></p>]]></content>
      
      
      <categories>
          
          <category> cgroups </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>运维面试题</title>
      <link href="2022/03/15/%E8%BF%90%E7%BB%B4%E9%9D%A2%E8%AF%95%E9%97%AE%E9%A2%98/"/>
      <url>2022/03/15/%E8%BF%90%E7%BB%B4%E9%9D%A2%E8%AF%95%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<h2 id="如何排查报警"><a href="#如何排查报警" class="headerlink" title="如何排查报警"></a>如何排查报警</h2><p>  首先报警一般是通过邮件,或者钉钉微信 等方式通知, 一般情况下报警主要是两大类, 一个是基础资源报警,一个是服务报警<br>  基础资源一般是服务器的cpu 内存 磁盘 的负载, 程序的报警一般是 服务故障,502 等情况, 一般情况下cpu和内存报警 大多数都是程序引起的, 这个时候一般用top查看总体的一个负载情况, 如果负载很高, 然后再看具体某个进程的占用情况, 如果某个单一进程消耗资源很多,使用pidstat 查看具体的一些进程使用情况, 然后杀掉进程, 去看这个程序的日志 如果看不出来,</p><h2 id="nginx-性能优化"><a href="#nginx-性能优化" class="headerlink" title="nginx 性能优化"></a>nginx 性能优化</h2>]]></content>
      
      
      <categories>
          
          <category> 面试 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 面试 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>alertmanage 邮件模板</title>
      <link href="2022/03/15/alertmanage%20%E9%82%AE%E4%BB%B6%E6%A8%A1%E6%9D%BF/"/>
      <url>2022/03/15/alertmanage%20%E9%82%AE%E4%BB%B6%E6%A8%A1%E6%9D%BF/</url>
      
        <content type="html"><![CDATA[<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs bash"><br>&#123;&#123; define <span class="hljs-string">&quot;email.html&quot;</span> &#125;&#125;<br>&#123;&#123;- <span class="hljs-keyword">if</span> gt (len .Alerts.Firing) 0 -&#125;&#125;<br>@告警<br>&lt;table border=<span class="hljs-string">&quot;5&quot;</span>&gt;<br>    &lt;tr&gt;&lt;td&gt;报警项&lt;/td&gt;<br>        &lt;td&gt;实例&lt;/td&gt;<br>        &lt;td&gt;报警详情&lt;/td&gt;<br>        &lt;td&gt;报警阀值&lt;/td&gt;<br>        &lt;td&gt;开始时间&lt;/td&gt;<br>    &lt;/tr&gt;<br>    &#123;&#123; range <span class="hljs-variable">$i</span>, <span class="hljs-variable">$alert</span> := .Alerts &#125;&#125;<br>        &lt;tr&gt;&lt;td&gt;&#123;&#123; index <span class="hljs-variable">$alert</span>.Labels <span class="hljs-string">&quot;alertname&quot;</span> &#125;&#125;&lt;/td&gt;<br>            &lt;td&gt;&#123;&#123; index <span class="hljs-variable">$alert</span>.Labels <span class="hljs-string">&quot;instance&quot;</span> &#125;&#125;&lt;/td&gt;<br>            &lt;td&gt;&#123;&#123; index <span class="hljs-variable">$alert</span>.Annotations <span class="hljs-string">&quot;description&quot;</span> &#125;&#125;&lt;/td&gt;<br>            &lt;td&gt;&#123;&#123; index <span class="hljs-variable">$alert</span>.Annotations <span class="hljs-string">&quot;value&quot;</span> &#125;&#125;&lt;/td&gt;<br>            &lt;td&gt;&#123;&#123; <span class="hljs-variable">$alert</span>.StartsAt &#125;&#125;&lt;/td&gt;<br>        &lt;/tr&gt;<br>    &#123;&#123; end &#125;&#125;<br>&lt;/table&gt;<br>&#123;&#123; end &#125;&#125;<br>&#123;&#123;- <span class="hljs-keyword">if</span> gt (len .Alerts.Resolved) 0 -&#125;&#125;<br>@恢复<br>&lt;table border=<span class="hljs-string">&quot;5&quot;</span>&gt;<br>    &lt;tr&gt;&lt;td&gt;报警项&lt;/td&gt;<br>        &lt;td&gt;实例&lt;/td&gt;<br>        &lt;td&gt;报警详情&lt;/td&gt;<br>        &lt;td&gt;报警阀值&lt;/td&gt;<br>        &lt;td&gt;开始时间&lt;/td&gt;<br>    &lt;/tr&gt;<br>    &#123;&#123; range <span class="hljs-variable">$i</span>, <span class="hljs-variable">$alert</span> := .Alerts &#125;&#125;<br>        &lt;tr&gt;&lt;td&gt;&#123;&#123; index <span class="hljs-variable">$alert</span>.Labels <span class="hljs-string">&quot;alertname&quot;</span> &#125;&#125;&lt;/td&gt;<br>            &lt;td&gt;&#123;&#123; index <span class="hljs-variable">$alert</span>.Labels <span class="hljs-string">&quot;instance&quot;</span> &#125;&#125;&lt;/td&gt;<br>            &lt;td&gt;&#123;&#123; index <span class="hljs-variable">$alert</span>.Annotations <span class="hljs-string">&quot;description&quot;</span> &#125;&#125;&lt;/td&gt;<br>            &lt;td&gt;&#123;&#123; index <span class="hljs-variable">$alert</span>.Annotations <span class="hljs-string">&quot;value&quot;</span> &#125;&#125;&lt;/td&gt;<br>            &lt;td&gt;&#123;&#123; <span class="hljs-variable">$alert</span>.StartsAt &#125;&#125;&lt;/td&gt;<br>        &lt;/tr&gt;<br>    &#123;&#123; end &#125;&#125;<br>&lt;/table&gt;<br>&#123;&#123; end &#125;&#125;&#123;&#123;- end &#125;&#125;<br><br></code></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> promethues </category>
          
      </categories>
      
      
        <tags>
            
            <tag> alertmanage </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>gcc 升级</title>
      <link href="2022/03/15/gcc%E7%BC%96%E8%AF%91%E5%99%A8%E5%8D%87%E7%BA%A7/"/>
      <url>2022/03/15/gcc%E7%BC%96%E8%AF%91%E5%99%A8%E5%8D%87%E7%BA%A7/</url>
      
        <content type="html"><![CDATA[<h3 id="centos7默认gcc版本为4-8，一般不满足编译需求，因此升级gcc版本为常见操作；"><a href="#centos7默认gcc版本为4-8，一般不满足编译需求，因此升级gcc版本为常见操作；" class="headerlink" title="centos7默认gcc版本为4.8，一般不满足编译需求，因此升级gcc版本为常见操作；"></a>centos7默认gcc版本为4.8，一般不满足编译需求，因此升级gcc版本为常见操作；</h3><blockquote><p>现有博客中，大多数教程都是基于源码重新编译安装；但是源码编译过程等待时间很长且编译麻烦。<br><br>因此，直接基于命令升级gcc迫切。亲测可用。</p></blockquote><p>升级到gcc 6.3</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">1 yum -y install centos-release-scl<br>2 yum -y install devtoolset-6-gcc devtoolset-6-gcc-c++ devtoolset-6-binutils<br>3 scl <span class="hljs-built_in">enable</span> devtoolset-6 bash<br></code></pre></td></tr></table></figure><p><code>需要注意的是scl命令启用只是临时的，退出shell或重启就会恢复原系统gcc版本。</code></p><h3 id="如果要长期使用gcc-6-3的话："><a href="#如果要长期使用gcc-6-3的话：" class="headerlink" title="如果要长期使用gcc 6.3的话："></a>如果要长期使用gcc 6.3的话：</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;source /opt/rh/devtoolset-6/enable&quot;</span> &gt;&gt;/etc/profile<br></code></pre></td></tr></table></figure><p>这样退出shell重新打开就是新版的gcc了</p><h3 id="以下其他版本同理，修改devtoolset版本号即可。"><a href="#以下其他版本同理，修改devtoolset版本号即可。" class="headerlink" title="以下其他版本同理，修改devtoolset版本号即可。"></a>以下其他版本同理，修改devtoolset版本号即可。</h3><p>升级到gcc 7.3</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">yum -y install centos-release-scl<br>yum -y install devtoolset-7-gcc devtoolset-7-gcc-c++ devtoolset-7-binutils<br>scl <span class="hljs-built_in">enable</span> devtoolset-7 bash<br></code></pre></td></tr></table></figure><p><code>需要注意的是scl命令启用只是临时的，退出shell或重启就会恢复原系统gcc版本。</code></p><h3 id="如果要长期使用gcc-7-3的话："><a href="#如果要长期使用gcc-7-3的话：" class="headerlink" title="如果要长期使用gcc 7.3的话："></a>如果要长期使用gcc 7.3的话：</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;source /opt/rh/devtoolset-7/enable&quot;</span> &gt;&gt;/etc/profile<br></code></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> gcc </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux 离奇磁盘爆满，如何解决</title>
      <link href="2022/03/15/linux%E7%A3%81%E7%9B%98%E6%8C%82%E8%BD%BD%E9%97%AE%E9%A2%98/"/>
      <url>2022/03/15/linux%E7%A3%81%E7%9B%98%E6%8C%82%E8%BD%BD%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<p>##查看磁盘 uuid<br>    * blkid /dev/sdb</p><h2 id="Linux-离奇磁盘爆满，如何解决？"><a href="#Linux-离奇磁盘爆满，如何解决？" class="headerlink" title="Linux 离奇磁盘爆满，如何解决？"></a>Linux 离奇磁盘爆满，如何解决？</h2><p>对于 Linux 磁盘满的问题，我们通常的处理思路是用 du 查找可清理的大文件，然后临时删掉让磁盘使用率先降下来，从而尽快保证磁盘能继续写入。</p><p>但是，有一些情况的处理效果不太一样，du/df 呈现的结果可能还会让人迷惑不解。下面，我就分享下几个工作中遇到过的较离奇的磁盘满问题。</p><p>被忽略的隐藏文件</p><p>1、认识 swapfile</p><p>Linux 的交换文件 swapfile 的产生场景较普遍，而且也是以隐藏文件的形式存在的，因此这里主要聊聊 swapfile 这一类的隐藏文件。</p><p>当用 vim 打开一个文件时，都会产生一个 .swp 的临时隐藏交换文件，用来备份缓冲区中的内容。</p><p>当文件非正常关闭（比如直接关闭终端或者电脑断电等）时，.swp文件不会被删除，这样就可以用此文件来恢复文件。（注意当正常关闭时，此文件会被删除；且如果只是读取文件，不会产生 .swp 文件）</p><p>而且，如果 vim 意外退出后，又重新打开文件二次编辑，那么旧的 .swp 文件会继续保留，并产生新的 .swo 临时隐藏文件。</p><p>如果二次编辑的时候，vim 又异常退出了，那么还会继续产生新的临时隐藏文件.swn、.swm、 .swl ……</p><p>2、处理建议</p><p>有些隐藏文件的磁盘占用也挺大：</p><p>:/tmp # ll -rth | grep G<br>total 17.7G<br>-rw——- 1 xxxx users 17.6G 2020-02-12 18:27 .sqlkfJTFl.swp<br>所以有时候碰到大隐藏文件导致磁盘满的情况，如果没能发现这些隐藏文件，就会觉得离奇和疑惑。</p><p>所以在排查磁盘满问题的时候，可以通过执行 vim -r 来查看和检查下所有临时交换文件的大小；或者通过 ls -lha 把所有隐藏文件都列出来看看大小。</p><p>如果不想留 swapfile 这个特性，可以考虑关掉 swapfile ：</p><p>vim /etc/vimrc   </p><h1 id="添加如下配置"><a href="#添加如下配置" class="headerlink" title="添加如下配置"></a>添加如下配置</h1><p>set noswapfile  # 禁止在编辑时候产生此文件；<br>但是注意这仅限于对文件损失可以容忍的情况下；如果不能容忍文件损失，那还是建议还是打开 swapfile：</p><p>vim /etc/vimrc   # 添加如下配置set swapfile  # 则是在编辑时候产生此文件；</p><p>未释放的已删除文件</p><p>1、du 和 df 不一致</p><p>如果隐藏文件因素排除了，还是发现 du 出来的大小诡异，比如 du 发现磁盘并没有用满，但是 df 看到磁盘使用率却是 100% 。</p><p>这又会是什么原因呢？</p><p>这时候，通常就得怀疑有一些已删除的文件，还被一些进程 hold 住句柄没释放，导致这些文件虽然已经删除，也的确看不到了，但是却还占着磁盘空间；</p><p>从而导致 du 和 df 出来的磁盘使用结果不一致的情况。</p><p>2、处理建议</p><p>通过执行 lsof | grep deleted 可以找到那些没有释放磁盘空间的文件和进程，</p><p>然后通过重启对应进程，就可以达到释放已删除文件占用的空间的目的。</p><p>这个帖子 《 清空热文件的常见错误操作 》 阐述了 “已删除文件还占用磁盘” 的产生场景和处理方式。</p><p>另外，对于这种情况，还有个错误的处理方法，这里特别提醒下：</p><p>有些同学在找到未释放已删除文件的 pid 之后，可能会直接通过 kill pid 来达到释放已删除文件的目的。</p><p>这种做法确实能够释放已删除文件，从而释放磁盘空间，但是这种做法是有副作用的，危害可大可小。</p><p>如果在离线环境这么操作，影响一般不大；但是如果在生产环境这么操作的话，那就可能搞出故障来了。</p><p>我们假设这么一种场景：</p><p>生产环境的某程序由于某种Bug，一直不会释放日志文件，而分时写入的日志文件又是有过期删除机制的，这样一直持续下去，就会发现服务器上有大量的已过期删除日志文件还占用着磁盘空间，直到产生磁盘满风险。</p><p>那么这个时候如果直接通过 kill pid 来处理的话，就直接把生产环境的在线程序直接干掉了；这个后果就可想而知了：在这个程序被守护进程拉起来之前，这个服务都是不可用的。</p><p>挂载引发的悬案</p><p>1、消失的空间</p><p>如果执行 ls -lha 并没有发现大隐藏文件，执行 lsof | grep deleted 也没有发现未释放的已删除文件；但是 df 看到根目录确实达到 100% 了 ，而 du 出来的根目录实际使用空间却并没有用满 。</p><p>这又会是什么原因呢？</p><p>出现这种情况的时候，请回忆下最近这台磁盘异常的机器，是否检修 或者 换过磁盘？</p><p>根目录出现这种离奇现象，通常就是在检修/更换磁盘的时候（这里假设是更换/data1 ）,新磁盘还没挂载就开始往 /data1 写数据了，这时候由于还没挂载新盘，所以写入数据占用的是根目录的空间。</p><p>然后换好/data1 盘并重新挂载上去后，原本放在 /data1 的数据，也不会出现在挂载盘上，还是继续占用根目录的空间。</p><p>所以这时候就会出现这样的现象：</p><p>挂载后 du /data1 并不大 ，但是挂载前 /data1目录写入的数据实际却占用了根目录空间；而且这个数据在挂载后是看不到的，因此很难发现。于是就会发现根目录有一些空间似乎凭空消失了，相当诡异。</p><p>2、处理建议</p><p>2.1 解决方法</p><p>怎么确认是新的挂载盘掩盖了一些数据呢？把新的挂载盘 /data1 umount掉，然后再看看 /data1 占用的空间就知道了。</p><p>如果 umount提示 busy，可以通过执行以下命令来解决：</p><p>fuser -kmvi /data1 &amp;&amp; umount /data1<br>卸载后，就会发现 /data1 目录下确实有大量文件，删除后，再 mount -a 重新挂载，然后根目录消失的磁盘空间，一般就能找回来了。</p><p>2.2 测试验证</p><p>如果还不放心的话，清理完数据再次挂载后，可以简单测试下：</p><p>dd if=/dev/zero of=/data1 bs=1M count=20000<br>往 /data1 大概写个 20G 数据，再观察下根目录的空间是否受影响，如果不受影响就说明问题解决！</p><p>2.3 给个建议</p><p>针对根目录这类离奇问题：建议在每次更换磁盘重新做挂载动作之前，检查一下根目录的空间使用情况；如果存在错误写入数据的情况，需要及时清理，然后再进行新盘挂载，切记。</p>]]></content>
      
      
      <categories>
          
          <category> linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 磁盘 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>zsh 配置范例</title>
      <link href="2022/03/15/zsh%20%E9%85%8D%E7%BD%AE%E8%8C%83%E4%BE%8B/"/>
      <url>2022/03/15/zsh%20%E9%85%8D%E7%BD%AE%E8%8C%83%E4%BE%8B/</url>
      
        <content type="html"><![CDATA[<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br></pre></td><td class="code"><pre><code class="hljs bash"><br><span class="hljs-comment"># History related</span><br><span class="hljs-comment"># &#123;&#123;&#123;</span><br><span class="hljs-built_in">unsetopt</span> EXTENDED_HISTORY<br><span class="hljs-built_in">unsetopt</span> HIST_IGNORE_DUPS<br><span class="hljs-built_in">export</span> HISTSIZE=100000<br><span class="hljs-built_in">export</span> SAVEHIST=100000<br><span class="hljs-built_in">export</span> HISTFILE=~/.<span class="hljs-built_in">history</span><br><span class="hljs-built_in">setopt</span> INC_APPEND_HISTORY<br><span class="hljs-built_in">setopt</span> SHARE_HISTORY<br><br><br><span class="hljs-comment"># Enable &#x27;cd&#x27; history, cd -[TAB] to see &#x27;cd&#x27; history</span><br><span class="hljs-built_in">setopt</span> AUTO_PUSHD<br><br><span class="hljs-comment"># Save only once for duplicated paths</span><br><span class="hljs-built_in">setopt</span> PUSHD_IGNORE_DUPS<br><br><span class="hljs-built_in">setopt</span> HIST_IGNORE_SPACE<br><span class="hljs-comment"># &#125;&#125;&#125;</span><br><br><br><span class="hljs-comment">#Command prompt</span><br><span class="hljs-comment">#&#123;&#123;&#123;</span><br><span class="hljs-comment">#RPROMPT=$(echo &#x27;%&#123;\033[31m%&#125;%D %T%&#123;\033[m%&#125;&#x27;)</span><br><span class="hljs-comment">#PROMPT=$(echo &#x27;%&#123;\033[34m%&#125;%M%&#123;\033[32m%&#125;%/</span><br><span class="hljs-comment">#%&#123;\033[36m%&#125;%n %&#123;\033[01;31m%&#125;&gt;%&#123;\033[33m%&#125;&gt;%&#123;\033[34m%&#125;&gt;%&#123;\033[m%&#125; &#x27;)</span><br><span class="hljs-comment">#PROMPT=$(echo &#x27;%&#123;\033[31m%&#125;%D %T%&#123;\033[m%&#125;&#x27;)</span><br>PROMPT=$(<span class="hljs-built_in">echo</span> <span class="hljs-string">&#x27;%&#123;\033[01;34m%&#125;%M%&#123;\033[01;00m%&#125;:%&#123;\033[01;32m%&#125;%/</span><br><span class="hljs-string">%&#123;\033[01;36m%&#125;%n %&#123;\033[01;31m%&#125;&gt;%&#123;\033[01;33m%&#125;&gt;%&#123;\033[01;34m%&#125;&gt;%&#123;\033[01;m%&#125; &#x27;</span>)<br><span class="hljs-comment">#&#125;&#125;&#125;</span><br><br><br><span class="hljs-comment"># Title, status bar</span><br><span class="hljs-comment">#&#123;&#123;&#123;</span><br><span class="hljs-keyword">case</span> <span class="hljs-variable">$TERM</span> <span class="hljs-keyword">in</span> (*xterm*|*rxvt*|(dt|k|E)term)<br>  <span class="hljs-function"><span class="hljs-title">precmd</span></span> () &#123; <span class="hljs-built_in">print</span> -Pn <span class="hljs-string">&quot;\e]0;%n@%M//%/\a&quot;</span> &#125;<br>  <span class="hljs-function"><span class="hljs-title">preexec</span></span> () &#123; <span class="hljs-built_in">print</span> -Pn <span class="hljs-string">&quot;\e]0;%n@%M//%/\ <span class="hljs-variable">$1</span>\a&quot;</span> &#125;<br>  ;;<br><span class="hljs-keyword">esac</span><br><span class="hljs-comment">#&#125;&#125;&#125;</span><br><br><br><span class="hljs-keyword">function</span> allhistory &#123;<br>    Index=1<br>    <span class="hljs-keyword">while</span> <span class="hljs-built_in">read</span> line<br>    <span class="hljs-keyword">do</span><br>        <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;<span class="hljs-variable">$Index</span>: <span class="hljs-variable">$line</span>&quot;</span><br>        Index=$[Index + 1]<br>    <span class="hljs-keyword">done</span> &lt; <span class="hljs-variable">$HISTFILE</span><br>&#125;<br><br><span class="hljs-keyword">function</span> histall &#123;<br>    allhistory<br>&#125;<br><br><span class="hljs-keyword">function</span> hist &#123;<br>    allhistory<br>&#125;<br><br><span class="hljs-keyword">function</span> <span class="hljs-built_in">history</span> &#123;<br>    allhistory<br>&#125;<br><br><br><span class="hljs-comment">#a杂项 &#123;&#123;&#123;</span><br><span class="hljs-comment">#允许在交互模式中使用注释  例如：</span><br><span class="hljs-comment">#cmd #这是注释</span><br><span class="hljs-built_in">setopt</span> INTERACTIVE_COMMENTS<br><br><span class="hljs-comment">#启用自动 cd，输入目录名回车进入目录</span><br><span class="hljs-comment">#稍微有点混乱，不如 cd 补全实用</span><br><span class="hljs-comment">#setopt AUTO_CD</span><br><br><span class="hljs-comment">#扩展路径</span><br><span class="hljs-comment">#/v/c/p/p =&gt; /var/cache/pacman/pkg</span><br><span class="hljs-built_in">setopt</span> complete_in_word<br><br><span class="hljs-comment">#Emacs风格 键绑定</span><br><span class="hljs-built_in">bindkey</span> -e<br><span class="hljs-comment">#设置 [DEL]键 为向后删除</span><br><span class="hljs-built_in">bindkey</span> <span class="hljs-string">&quot;\e[3~&quot;</span> delete-char<br><br><span class="hljs-comment">#以下字符视为单词的一部分</span><br><span class="hljs-comment">#WORDCHARS=&#x27;*?_-[]~=&amp;;!#$%^()&#123;&#125;&lt;&gt;&#x27;</span><br><span class="hljs-comment">##LEO注释了这部分</span><br><span class="hljs-comment">#&#125;&#125;&#125;</span><br><br><br><span class="hljs-comment">#自动补全功能 &#123;&#123;&#123;</span><br><span class="hljs-built_in">setopt</span> AUTO_LIST<br><span class="hljs-built_in">setopt</span> AUTO_MENU<br><span class="hljs-comment">#开启此选项，补全时会直接选中菜单项</span><br><span class="hljs-comment">#setopt MENU_COMPLETE</span><br><br><span class="hljs-built_in">autoload</span> -U compinit<br>compinit<br><br><span class="hljs-comment">#自动补全缓存</span><br><span class="hljs-comment">#zstyle &#x27;:completion::complete:*&#x27; use-cache on</span><br><span class="hljs-comment">#zstyle &#x27;:completion::complete:*&#x27; cache-path .zcache</span><br><span class="hljs-comment">#zstyle &#x27;:completion:*:cd:*&#x27; ignore-parents parent pwd</span><br><br><span class="hljs-comment">#自动补全选项</span><br><span class="hljs-built_in">zstyle</span> <span class="hljs-string">&#x27;:completion:*:match:*&#x27;</span> original only<br><span class="hljs-built_in">zstyle</span> <span class="hljs-string">&#x27;:completion::prefix-1:*&#x27;</span> completer _complete<br><span class="hljs-built_in">zstyle</span> <span class="hljs-string">&#x27;:completion:predict:*&#x27;</span> completer _complete<br><span class="hljs-built_in">zstyle</span> <span class="hljs-string">&#x27;:completion:incremental:*&#x27;</span> completer _complete _correct<br><span class="hljs-built_in">zstyle</span> <span class="hljs-string">&#x27;:completion:*&#x27;</span> completer _complete _prefix _correct _prefix _match _approximate<br><br><span class="hljs-comment">#路径补全</span><br><span class="hljs-built_in">zstyle</span> <span class="hljs-string">&#x27;:completion:*&#x27;</span> expand <span class="hljs-string">&#x27;yes&#x27;</span><br><span class="hljs-built_in">zstyle</span> <span class="hljs-string">&#x27;:completion:*&#x27;</span> squeeze-shlashes <span class="hljs-string">&#x27;yes&#x27;</span><br><span class="hljs-built_in">zstyle</span> <span class="hljs-string">&#x27;:completion::complete:*&#x27;</span> <span class="hljs-string">&#x27;\\&#x27;</span><br><br><span class="hljs-built_in">zstyle</span> <span class="hljs-string">&#x27;:completion:*&#x27;</span> menu select<br><span class="hljs-built_in">zstyle</span> <span class="hljs-string">&#x27;:completion:*:*:default&#x27;</span> force-list always<br><br><span class="hljs-comment">#彩色补全菜单</span><br><span class="hljs-built_in">eval</span> $(dircolors -b)<br><span class="hljs-built_in">export</span> ZLSCOLORS=<span class="hljs-string">&quot;<span class="hljs-variable">$&#123;LS_COLORS&#125;</span>&quot;</span><br><span class="hljs-built_in">zmodload</span> zsh/complist<br><span class="hljs-built_in">zstyle</span> <span class="hljs-string">&#x27;:completion:*&#x27;</span> list-colors <span class="hljs-variable">$&#123;(s.:.)LS_COLORS&#125;</span><br><span class="hljs-built_in">zstyle</span> <span class="hljs-string">&#x27;:completion:*:*:kill:*:processes&#x27;</span> list-colors <span class="hljs-string">&#x27;=(#b) #([0-9]#)*=0=01;31&#x27;</span><br><br><span class="hljs-comment">#修正大小写</span><br><span class="hljs-built_in">zstyle</span> <span class="hljs-string">&#x27;:completion:*&#x27;</span> matcher-list <span class="hljs-string">&#x27;&#x27;</span> <span class="hljs-string">&#x27;m:&#123;a-zA-Z&#125;=&#123;A-Za-z&#125;&#x27;</span><br><span class="hljs-comment">#错误校正</span><br><span class="hljs-built_in">zstyle</span> <span class="hljs-string">&#x27;:completion:*&#x27;</span> completer _complete _match _approximate<br><span class="hljs-built_in">zstyle</span> <span class="hljs-string">&#x27;:completion:*:match:*&#x27;</span> original only<br><span class="hljs-built_in">zstyle</span> <span class="hljs-string">&#x27;:completion:*:approximate:*&#x27;</span> max-errors 1 numeric<br><br><span class="hljs-comment">#kill 命令补全</span><br>compdef pkill=<span class="hljs-built_in">kill</span><br>compdef pkill=killall<br><span class="hljs-built_in">zstyle</span> <span class="hljs-string">&#x27;:completion:*:*:kill:*&#x27;</span> menu yes select<br><span class="hljs-built_in">zstyle</span> <span class="hljs-string">&#x27;:completion:*:*:*:*:processes&#x27;</span> force-list always<br><span class="hljs-built_in">zstyle</span> <span class="hljs-string">&#x27;:completion:*:processes&#x27;</span> <span class="hljs-built_in">command</span> <span class="hljs-string">&#x27;ps -au$USER&#x27;</span><br><br><span class="hljs-comment">#补全类型提示分组</span><br><span class="hljs-built_in">zstyle</span> <span class="hljs-string">&#x27;:completion:*:matches&#x27;</span> group <span class="hljs-string">&#x27;yes&#x27;</span><br><span class="hljs-built_in">zstyle</span> <span class="hljs-string">&#x27;:completion:*&#x27;</span> group-name <span class="hljs-string">&#x27;&#x27;</span><br><span class="hljs-built_in">zstyle</span> <span class="hljs-string">&#x27;:completion:*:options&#x27;</span> description <span class="hljs-string">&#x27;yes&#x27;</span><br><span class="hljs-built_in">zstyle</span> <span class="hljs-string">&#x27;:completion:*:options&#x27;</span> auto-description <span class="hljs-string">&#x27;%d&#x27;</span><br><span class="hljs-built_in">zstyle</span> <span class="hljs-string">&#x27;:completion:*:descriptions&#x27;</span> format $<span class="hljs-string">&#x27;\e[01;33m -- %d --\e[0m&#x27;</span><br><span class="hljs-built_in">zstyle</span> <span class="hljs-string">&#x27;:completion:*:messages&#x27;</span> format $<span class="hljs-string">&#x27;\e[01;35m -- %d --\e[0m&#x27;</span><br><span class="hljs-built_in">zstyle</span> <span class="hljs-string">&#x27;:completion:*:warnings&#x27;</span> format $<span class="hljs-string">&#x27;\e[01;31m -- No Matches Found --\e[0m&#x27;</span><br><span class="hljs-comment">#&#125;&#125;&#125;</span><br><br><span class="hljs-comment">##行编辑高亮模式 &#123;&#123;&#123;</span><br><span class="hljs-comment"># Ctrl+@ 设置标记，标记和光标点之间为 region</span><br>zle_highlight=(region:<span class="hljs-built_in">bg</span>=magenta <span class="hljs-comment">#选中区域</span><br>              special:bold      <span class="hljs-comment">#特殊字符</span><br>              isearch:underline)<span class="hljs-comment">#搜索时使用的关键字</span><br><span class="hljs-comment">#&#125;&#125;&#125;</span><br><br><span class="hljs-comment">##空行(光标在行首)补全 &quot;cd &quot; &#123;&#123;&#123;</span><br>user-<span class="hljs-function"><span class="hljs-title">complete</span></span>()&#123;<br>   <span class="hljs-keyword">case</span> <span class="hljs-variable">$BUFFER</span> <span class="hljs-keyword">in</span><br>       <span class="hljs-string">&quot;&quot;</span> )                       <span class="hljs-comment"># 空行填入 &quot;cd &quot;</span><br>           BUFFER=<span class="hljs-string">&quot;cd &quot;</span><br>           <span class="hljs-built_in">zle</span> end-of-line<br>           <span class="hljs-built_in">zle</span> expand-or-complete<br>           ;;<br>       <span class="hljs-string">&quot;cd --&quot;</span> )                  <span class="hljs-comment"># &quot;cd --&quot; 替换为 &quot;cd +&quot;</span><br>           BUFFER=<span class="hljs-string">&quot;cd +&quot;</span><br>           <span class="hljs-built_in">zle</span> end-of-line<br>           <span class="hljs-built_in">zle</span> expand-or-complete<br>           ;;<br>       <span class="hljs-string">&quot;cd +-&quot;</span> )                  <span class="hljs-comment"># &quot;cd +-&quot; 替换为 &quot;cd -&quot;</span><br>           BUFFER=<span class="hljs-string">&quot;cd -&quot;</span><br>           <span class="hljs-built_in">zle</span> end-of-line<br>           <span class="hljs-built_in">zle</span> expand-or-complete<br>           ;;<br>       * )<br>           <span class="hljs-built_in">zle</span> expand-or-complete<br>           ;;<br>   <span class="hljs-keyword">esac</span><br>&#125;<br><span class="hljs-built_in">zle</span> -N user-complete<br><span class="hljs-built_in">bindkey</span> <span class="hljs-string">&quot;\t&quot;</span> user-complete<br><span class="hljs-comment">#&#125;&#125;&#125;</span><br><br><span class="hljs-comment">##在命令前插入 sudo &#123;&#123;&#123;</span><br><span class="hljs-comment">#定义功能</span><br><span class="hljs-comment">#sudo-command-line() &#123;</span><br><span class="hljs-comment">#    [[ -z $BUFFER ]] &amp;&amp; zle up-history</span><br><span class="hljs-comment">#    [[ $BUFFER != sudo\ * ]] &amp;&amp; BUFFER=&quot;sudo $BUFFER&quot;</span><br><span class="hljs-comment">#    zle end-of-line                 #光标移动到行末</span><br><span class="hljs-comment">#&#125;</span><br><span class="hljs-comment">#zle -N sudo-command-line</span><br><span class="hljs-comment">#定义快捷键为： [Esc] [Esc]</span><br><span class="hljs-comment">#bindkey &quot;\e\e&quot; sudo-command-line</span><br><span class="hljs-comment">#&#125;&#125;&#125;</span><br><br><span class="hljs-comment">#命令别名 &#123;&#123;&#123;</span><br><span class="hljs-comment">#alias -g cp=&#x27;cp -i&#x27;</span><br><span class="hljs-comment">#alias -g mv=&#x27;mv -i&#x27;</span><br><span class="hljs-comment">#alias -g rm=&#x27;rm -i&#x27;</span><br><span class="hljs-built_in">alias</span> -g ls=<span class="hljs-string">&#x27;ls -X -F --color=auto&#x27;</span><br><span class="hljs-built_in">alias</span> -g ll=<span class="hljs-string">&#x27;ls -l&#x27;</span><br><span class="hljs-built_in">alias</span> -g grep=<span class="hljs-string">&#x27;grep --color=auto&#x27;</span><br><span class="hljs-built_in">alias</span> -g la=<span class="hljs-string">&#x27;ls -a&#x27;</span><br><span class="hljs-comment">#alias -g ee=&#x27;emacsclient -t&#x27;</span><br><span class="hljs-comment">#alias -g tk=&#x27;tmux kill-server&#x27;</span><br><span class="hljs-comment">#哈哈哈，我现在有了byobu</span><br><span class="hljs-built_in">alias</span> -g bb=<span class="hljs-string">&#x27;byobu-tmux&#x27;</span><br><span class="hljs-built_in">alias</span> -g x=<span class="hljs-string">&#x27;exit&#x27;</span><br><span class="hljs-built_in">alias</span> -g t=<span class="hljs-string">&#x27;faweibo -t&#x27;</span><br><span class="hljs-built_in">alias</span> -g tm=<span class="hljs-string">&#x27;tmux&#x27;</span><br><br><span class="hljs-comment">#alias -g cd....=&#x27;cd ../..&#x27;</span><br><span class="hljs-comment">#Well this must consult Gods later.__Leo</span><br><br><span class="hljs-comment">#[Esc][h] man 当前命令时，显示简短说明</span><br><span class="hljs-built_in">alias</span> run-help &gt;&amp;/dev/null &amp;&amp; <span class="hljs-built_in">unalias</span> run-help<br><span class="hljs-built_in">autoload</span> run-help<br><br><span class="hljs-comment">#历史命令 top10</span><br><span class="hljs-built_in">alias</span> top10=<span class="hljs-string">&#x27;print -l  $&#123;(o)history%% *&#125; | uniq -c | sort -nr | head -n 10&#x27;</span><br><span class="hljs-comment">#&#125;&#125;&#125;</span><br><br><span class="hljs-comment">##afor Emacs &#123;&#123;&#123;</span><br><span class="hljs-comment">#在 Emacs终端 中使用 Zsh 的一些设置 不推荐在 Emacs 中使用它</span><br><span class="hljs-keyword">if</span> [[ <span class="hljs-string">&quot;<span class="hljs-variable">$TERM</span>&quot;</span> == <span class="hljs-string">&quot;dumb&quot;</span> ]]; <span class="hljs-keyword">then</span><br><span class="hljs-built_in">setopt</span> No_zle<br>PROMPT=<span class="hljs-string">&#x27;%n@%M %/</span><br><span class="hljs-string">&gt;&gt;&#x27;</span><br><span class="hljs-built_in">alias</span> ls=<span class="hljs-string">&#x27;ls -F&#x27;</span><br><span class="hljs-keyword">fi</span><br><span class="hljs-comment">#&#125;&#125;&#125;</span><br><br><span class="hljs-comment">#&#123;&#123;&#123;自定义补全</span><br><span class="hljs-comment">#补全 ping</span><br><span class="hljs-built_in">zstyle</span> <span class="hljs-string">&#x27;:completion:*:ping:*&#x27;</span> hosts 192.168.128.1&#123;38,&#125; www.g.cn \<br>      192.168.&#123;1,0&#125;.1&#123;&#123;7..9&#125;,&#125;<br><br><span class="hljs-comment">#补全 ssh scp sftp 等</span><br><span class="hljs-comment">#my_accounts=(</span><br><span class="hljs-comment">#&#123;r00t,root&#125;@&#123;192.168.1.1,192.168.0.1&#125;</span><br><span class="hljs-comment">#kardinal@linuxtoy.org</span><br><span class="hljs-comment">#123@211.148.131.7</span><br><span class="hljs-comment">#)</span><br><span class="hljs-comment">#zstyle &#x27;:completion:*:my-accounts&#x27; users-hosts $my_accounts</span><br><span class="hljs-comment">#&#125;&#125;&#125;</span><br><br><span class="hljs-comment">####&#123;&#123;&#123;</span><br><span class="hljs-keyword">function</span> calc &#123; <span class="hljs-built_in">echo</span> $((<span class="hljs-variable">$@</span>)) &#125;<br><span class="hljs-comment">#[Esc][h] man 当前命令时，显示简短说明</span><br><span class="hljs-built_in">alias</span> run-help &gt;&amp;/dev/null &amp;&amp; <span class="hljs-built_in">unalias</span> run-help<br><span class="hljs-built_in">autoload</span> run-help<br><br><span class="hljs-comment">#历史命令 top10</span><br><span class="hljs-built_in">alias</span> top10=<span class="hljs-string">&#x27;print -l  $&#123;(o)history%% *&#125; | uniq -c | sort -nr | head -n 10&#x27;</span><br><span class="hljs-comment">#&#125;&#125;&#125;</span><br><br><span class="hljs-comment">##afor Emacs &#123;&#123;&#123;</span><br><span class="hljs-comment">#在 Emacs终端 中使用 Zsh 的一些设置 不推荐在 Emacs 中使用它</span><br><span class="hljs-keyword">if</span> [[ <span class="hljs-string">&quot;<span class="hljs-variable">$TERM</span>&quot;</span> == <span class="hljs-string">&quot;dumb&quot;</span> ]]; <span class="hljs-keyword">then</span><br><span class="hljs-built_in">zle</span> -N user-complete<br><span class="hljs-built_in">bindkey</span> <span class="hljs-string">&quot;\t&quot;</span> user-complete<br><span class="hljs-comment">#&#125;&#125;&#125;</span><br><br><span class="hljs-comment">##在命令前插入 sudo &#123;&#123;&#123;</span><br><span class="hljs-comment">#定义功能</span><br><span class="hljs-comment">#sudo-command-line() &#123;</span><br><span class="hljs-comment">#    [[ -z $BUFFER ]] &amp;&amp; zle up-history</span><br><span class="hljs-comment">#    [[ $BUFFER != sudo\ * ]] &amp;&amp; BUFFER=&quot;sudo $BUFFER&quot;</span><br><span class="hljs-comment">#    zle end-of-line                 #光标移动到行末</span><br><span class="hljs-comment">#&#125;</span><br><span class="hljs-comment">#zle -N sudo-command-line</span><br><span class="hljs-comment">#定义快捷键为： [Esc] [Esc]</span><br><span class="hljs-comment">#bindkey &quot;\e\e&quot; sudo-command-line</span><br><span class="hljs-comment">#&#125;&#125;&#125;</span><br><br><span class="hljs-comment">#命令别名 &#123;&#123;&#123;</span><br><span class="hljs-comment">#alias -g cp=&#x27;cp -i&#x27;</span><br><span class="hljs-comment">#alias -g mv=&#x27;mv -i&#x27;</span><br><span class="hljs-comment">#alias -g rm=&#x27;rm -i&#x27;</span><br><span class="hljs-built_in">alias</span> -g ls=<span class="hljs-string">&#x27;ls -X -F --color=auto&#x27;</span><br><span class="hljs-built_in">alias</span> -g ll=<span class="hljs-string">&#x27;ls -l&#x27;</span><br><span class="hljs-built_in">alias</span> -g grep=<span class="hljs-string">&#x27;grep --color=auto&#x27;</span><br><span class="hljs-built_in">alias</span> -g la=<span class="hljs-string">&#x27;ls -a&#x27;</span><br><span class="hljs-comment">#alias -g ee=&#x27;emacsclient -t&#x27;</span><br><span class="hljs-comment">#alias -g tk=&#x27;tmux kill-server&#x27;</span><br><span class="hljs-comment">#哈哈哈，我现在有了byobu</span><br><span class="hljs-built_in">alias</span> -g bb=<span class="hljs-string">&#x27;byobu-tmux&#x27;</span><br><span class="hljs-built_in">alias</span> -g x=<span class="hljs-string">&#x27;exit&#x27;</span><br><span class="hljs-built_in">alias</span> -g t=<span class="hljs-string">&#x27;faweibo -t&#x27;</span><br><span class="hljs-built_in">alias</span> -g tm=<span class="hljs-string">&#x27;tmux&#x27;</span><br><br><span class="hljs-comment">#alias -g cd....=&#x27;cd ../..&#x27;</span><br><span class="hljs-comment">#Well this must consult Gods later.__Leo</span><br><br><span class="hljs-comment">#[Esc][h] man 当前命令时，显示简短说明</span><br><span class="hljs-built_in">alias</span> run-help &gt;&amp;/dev/null &amp;&amp; <span class="hljs-built_in">unalias</span> run-help<br><span class="hljs-built_in">autoload</span> run-help<br><br><span class="hljs-comment">#历史命令 top10</span><br><span class="hljs-built_in">alias</span> top10=<span class="hljs-string">&#x27;print -l  $&#123;(o)history%% *&#125; | uniq -c | sort -nr | head -n 10&#x27;</span><br><span class="hljs-comment">#&#125;&#125;&#125;</span><br><br><span class="hljs-comment">##afor Emacs &#123;&#123;&#123;</span><br><span class="hljs-comment">#在 Emacs终端 中使用 Zsh 的一些设置 不推荐在 Emacs 中使用它</span><br><span class="hljs-keyword">if</span> [[ <span class="hljs-string">&quot;<span class="hljs-variable">$TERM</span>&quot;</span> == <span class="hljs-string">&quot;dumb&quot;</span> ]]; <span class="hljs-keyword">then</span><br><span class="hljs-built_in">setopt</span> No_zle<br>PROMPT=<span class="hljs-string">&#x27;%n@%M %/</span><br><span class="hljs-string">&gt;&gt;&#x27;</span><br><span class="hljs-built_in">alias</span> ls=<span class="hljs-string">&#x27;ls -F&#x27;</span><br><span class="hljs-keyword">fi</span><br><span class="hljs-comment">#&#125;&#125;&#125;</span><br><br><span class="hljs-comment">#&#123;&#123;&#123;自定义补全</span><br><span class="hljs-comment">#补全 ping</span><br><span class="hljs-built_in">zstyle</span> <span class="hljs-string">&#x27;:completion:*:ping:*&#x27;</span> hosts 192.168.128.1&#123;38,&#125; www.g.cn \<br>      192.168.&#123;1,0&#125;.1&#123;&#123;7..9&#125;,&#125;<br><br><span class="hljs-comment">#补全 ssh scp sftp 等</span><br><span class="hljs-comment">#my_accounts=(</span><br><span class="hljs-comment">#&#123;r00t,root&#125;@&#123;192.168.1.1,192.168.0.1&#125;</span><br><span class="hljs-comment">#kardinal@linuxtoy.org</span><br><span class="hljs-comment">#123@211.148.131.7</span><br><span class="hljs-comment">#)</span><br><span class="hljs-comment">#zstyle &#x27;:completion:*:my-accounts&#x27; users-hosts $my_accounts</span><br><span class="hljs-comment">#&#125;&#125;&#125;</span><br><br><span class="hljs-comment">####&#123;&#123;&#123;</span><br><span class="hljs-keyword">function</span> calc &#123; <span class="hljs-built_in">echo</span> $((<span class="hljs-variable">$@</span>)) &#125;<br><span class="hljs-keyword">function</span> timeconv &#123; date -d @<span class="hljs-variable">$1</span> +<span class="hljs-string">&quot;%Y-%m-%d %T&quot;</span> &#125;<br><br><span class="hljs-comment"># &#125;&#125;&#125;</span><br><br><br><span class="hljs-keyword">if</span> [ <span class="hljs-string">&quot;Linux&quot;</span> = <span class="hljs-string">&quot;`uname`&quot;</span> ]; <span class="hljs-keyword">then</span><br>    <span class="hljs-built_in">export</span> DRIVE_C=<span class="hljs-string">&#x27;/media/SystemWin7&#x27;</span><br>    <span class="hljs-built_in">export</span> DRIVE_D=<span class="hljs-string">&#x27;/media/Programs&#x27;</span><br>    <span class="hljs-built_in">export</span> DRIVE_E=<span class="hljs-string">&#x27;/media/Work&#x27;</span><br><span class="hljs-keyword">else</span><br>    <span class="hljs-built_in">export</span> DRIVE_C=<span class="hljs-string">&#x27;/cygdrive/c&#x27;</span><br>    <span class="hljs-built_in">export</span> DRIVE_D=<span class="hljs-string">&#x27;/cygdrive/d&#x27;</span><br>    <span class="hljs-built_in">export</span> DRIVE_E=<span class="hljs-string">&#x27;/cygdrive/e&#x27;</span><br><span class="hljs-keyword">fi</span><br><br><br><span class="hljs-keyword">if</span> [ <span class="hljs-string">&quot;Linux&quot;</span> = <span class="hljs-string">&quot;`uname`&quot;</span> ]; <span class="hljs-keyword">then</span><br>    <span class="hljs-keyword">if</span> [ -f <span class="hljs-variable">$HOME</span>/files/cfg/shrc ]; <span class="hljs-keyword">then</span><br>       <span class="hljs-built_in">source</span> <span class="hljs-variable">$HOME</span>/files/cfg/shrc<br>    <span class="hljs-keyword">fi</span><br><span class="hljs-keyword">else</span><br>    <span class="hljs-keyword">if</span> [ -f /cygdrive/e/files/cfg/shrc ]; <span class="hljs-keyword">then</span><br>        <span class="hljs-built_in">source</span> /cygdrive/e/files/cfg/shrc<br>    <span class="hljs-keyword">fi</span><br><span class="hljs-keyword">fi</span><br><br><span class="hljs-comment"># Go language</span><br><span class="hljs-keyword">if</span> [ -f <span class="hljs-variable">$HOME</span>/files/bin/go/misc/zsh/go ]; <span class="hljs-keyword">then</span><br>   <span class="hljs-built_in">source</span> <span class="hljs-variable">$HOME</span>/files/bin/go/misc/zsh/go<br><span class="hljs-keyword">fi</span><br><br></code></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> zsh </category>
          
      </categories>
      
      
        <tags>
            
            <tag> zsh </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>mysql5.7 - 8.0 安装卸载</title>
      <link href="2022/03/15/mysql5.7-8.0%20%E5%AE%89%E8%A3%85%E5%8D%B8%E8%BD%BD%E7%AC%94%E8%AE%B0/"/>
      <url>2022/03/15/mysql5.7-8.0%20%E5%AE%89%E8%A3%85%E5%8D%B8%E8%BD%BD%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<p>mysql5.7</p><ul><li><p>安装源<br>  wget <a href="http://dev.mysql.com/get/mysql57-community-release-el7-11.noarch.rpm">http://dev.mysql.com/get/mysql57-community-release-el7-11.noarch.rpm</a> // 下载mysql yum源<br>  rpm -ivh mysql57-community-release-el7-11.noarch.rpm // 安装yum源</p></li><li><p>查看有哪些版本<br>  yum repolist all | grep mysql</p></li><li><p>安装myql<br>  yum install mysql-community-server -y</p></li><li><p>如果遇到密钥问题 跳过密钥检查即可</p></li><li><p>  –nogpgcheck</p></li><li><p>启动mysql<br>  systemctl start mysqld 启动<br>  systemctl status mysqld 查看状态<br>  systemctl stop mysqld 停止</p></li><li><p>登录 修改密码<br>  首先查看密码 : grep ‘temporary password’ /var/log/mysqld.log</p><p>  #修改密码: alter user user() identified by “kU1bbSuayn&amp;Z”;<br>  #在外面修改密码: mysql -uroot -p9Tong@1234 -e “alter user user() identified by ‘9Tong@123’”<br>  #在外面修改登录权限: mysql -uroot -p9Tong@123 -e “use mysql;select host,user from user;update user set host=’%’ where user=’root’”</p><p>  登录进去后-修改密码 : SET PASSWORD = PASSWORD(‘密码’);<br>  密码过于简单修改加密方式: set global validate_password_policy=0;<br>  如果不对 可以参照8.0的方式修改,唯一区别 validate_password “_” 换成了”.” 注意这个就行<br>  开启远程登录 : GRANT ALL PRIVILEGES ON <em>.</em> TO ‘root’@’%’ IDENTIFIED BY ‘密码’ WITH GRANT OPTION;<br>  刷新权限 : flush privileges;</p></li><li><p>ok</p></li></ul><p>mysql8.0</p><pre><code>* 安装yum源     yum localinstall https://repo.mysql.com//mysql80-community-release-el7-1.noarch.rpm* 安装mysql   yum install mysql-community-server* 检查启动,检查密码 和5.7一样* 修改密码-加密方式-远程连接 :    修改加密方式 :      首先查看validate_passwd密码验证插件: show variables like &#39;validate_password%&#39;;      然后根据 插件函数 调整参数即可,调整如下      set global validate_password.policy=0;      set global validate_password.length=1;    修改密码:        alter user &#39;root&#39;@&#39;localhost&#39; identified with mysql_native_password by &#39;密码&#39;;      或者      ALTER USER &#39;root&#39;@&#39;localhost&#39; IDENTIFIED BY &#39;密码&#39; PASSWORD EXPIRE NEVER;    开启远程访问:      use mysql   # 选择mysql表      select host,user from user; #查看当前用户的权限      update user set host=&#39;%&#39; where user=&#39;root&#39;; # 修改root的hsot为%    刷新权限:      flush privileges;</code></pre><p>mysql5.7和8.0 在加密方面参数不同导致不通用:<br>  5.7 : validate_password_policy<br>  8.0 : validate_password.policy</p><p>mysql8 创建只读用户</p><p>  CREATE USER ‘readuser’@’%’ IDENTIFIED BY ‘qwer1234’;<br>  GRANT SELECT ON <em>.</em> TO ‘readuser’@’%’;<br>  修改密码和加密方式 远程登录 依照上面8.0的方法</p><p>卸载mysql<br>  第一种<br>    yum list installed mysql*  # 查看安装过的mysql<br>    yum remove mysql-community-client …… 等等 所有显示的mysql信息<br>    y</p><pre><code>rm /etc/my.cnfwhereis mysqlrm -rf mysql的软连接</code></pre><p>  第二种<br>    rpm -qa | grep -i mysql<br>    rpm -e mysql57-community-release-el7-9.noarch<br>    rpm -e mysql-community-server-5.7.17-1.el7.x86_64<br>    …….  所有上面显示的信息全部删完<br>    rm -rf /var/lib/mysql<br>    whereis mysql<br>    rm -rf 删除软连接<br>    rm -rf /usr/my.conf</p><p>基本操作<br>  创建用户，并且给予只读权限：<br>    GRANT SElECT ON <em>.</em> TO ‘readuser’@’%’ IDENTIFIED BY “qwer1234”;<br>  刷新权限：<br>    flush privileges;<br>  显示所有库<br>    show databases;<br>  选择库<br>    use 库;<br>  显示表<br>    show tables;</p>]]></content>
      
      
      <categories>
          
          <category> 安装教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> mysql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>mysql 备份恢复,主从配置</title>
      <link href="2022/03/15/mysql%E5%A4%87%E4%BB%BD%E6%81%A2%E5%A4%8D/"/>
      <url>2022/03/15/mysql%E5%A4%87%E4%BB%BD%E6%81%A2%E5%A4%8D/</url>
      
        <content type="html"><![CDATA[<h2 id="备份和恢复"><a href="#备份和恢复" class="headerlink" title="备份和恢复"></a>备份和恢复</h2><h3 id="mysqldump-复制binlog"><a href="#mysqldump-复制binlog" class="headerlink" title="mysqldump + 复制binlog"></a>mysqldump + 复制binlog</h3><pre><code>mysqldump: 完全备份复制binlog中指定时间范围内的event: 增量备份</code></pre><h3 id="lvm2快照-复制binlog"><a href="#lvm2快照-复制binlog" class="headerlink" title="lvm2快照+ 复制binlog"></a>lvm2快照+ 复制binlog</h3><pre><code>lvm2快照: 使用cp或tar等做物理被封: 完全备份复制binlog中指定的event: 增量备份</code></pre><h3 id="xtarbackup"><a href="#xtarbackup" class="headerlink" title="xtarbackup:"></a>xtarbackup:</h3><pre><code>由percona提供支持对innodb做(物理备份)的工具完全备份, 曾量备份</code></pre><hr><h3 id="binlog日志查看命令"><a href="#binlog日志查看命令" class="headerlink" title="binlog日志查看命令"></a>binlog日志查看命令</h3>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">mysql&gt; show master|binary logs;<br>mysql&gt; show master status;<br>mysql&gt; show binlog events <span class="hljs-keyword">in</span> <span class="hljs-string">&#x27;binlog.000009&#x27;</span>;  | show binlog events <span class="hljs-keyword">in</span> <span class="hljs-string">&#x27;binlog.000009&#x27;</span> from pos;<br></code></pre></td></tr></table></figure><p>  客户端<br>  mysqlbinlog<br>    –start-position<br>    –stop-position<br>    –start-datetime<br>    –stop-datetime<br>  选项: -u -h  -p</p><h3 id="备份名词"><a href="#备份名词" class="headerlink" title="备份名词"></a>备份名词</h3><pre><code>完全备份: 完整的数据库备份增量备份: 以上一次备份为对象 以来 更改的备份数据差异被封: 备份上次以完整备份以后发生改变的备份数据物理备份: 复制文件逻辑备份: 抽取数据,把每个表的数据抽取出来转换成一个巨大的insert语句,存储到文件里面,不适用于完整的大数据备份热备: 在线被封  可数据库可以进行读写操作冷备: 停机备份   数据库不可读写温被: 锁表  数据库只能读 不能写</code></pre><h3 id="备份工具"><a href="#备份工具" class="headerlink" title="备份工具"></a>备份工具</h3><pre><code>mysqldumpcp , tarlvm2xtarbackup</code></pre><h3 id="mysqldump-不建议备份GB级别-速度慢"><a href="#mysqldump-不建议备份GB级别-速度慢" class="headerlink" title="mysqldump (不建议备份GB级别.速度慢)"></a>mysqldump (不建议备份GB级别.速度慢)</h3><p>客户端程序,通过mysql协议链接至mysqld服务,发起一个全量查询操作,把所有数据读取到本地,保存到本地文件里面,实现备份<br>常用命令</p><pre><code># mysqldump [option] db_name [table_name]                : 直接这样写 sql语句里面不会 自动create创建库, 需要手动创建# mysqldump [option] --databases db_name  [table_name]   : 指明 --databases sql文件里面会自动创建 create database 不用手动创建数据库# mysqldump [option] --all-databases </code></pre><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 线上数据库不建议直接备份, 先进行 锁 表 然后在备份</span><br>mysqldump -root -pxxxxx --databases xxx_db  xxx_name &gt; xxxx.sql<br><br><span class="hljs-comment"># innodb: 锁定</span><br><span class="hljs-comment"># -single-transaction </span><br><br><span class="hljs-comment"># 备份指定数据库相关的所有event scheduler 事件调度器</span><br><span class="hljs-comment"># -E , --events</span><br><br><span class="hljs-comment"># 备份指定数据库相关的所有存储过程和存储函数</span><br><span class="hljs-comment"># -R , --routines</span><br><br><span class="hljs-comment"># 备份当前 binlog 日志位置</span><br><span class="hljs-comment"># --master-data=[0|1|2]</span><br><span class="hljs-comment"># </span><br>mysqldump -root -pxxxxx --databases xxx_db  xxx_name &gt; xxxx.sql<br><br><span class="hljs-comment"># --flush-logs</span><br><span class="hljs-comment"># 锁定表完成后, 执行 flush logs命令</span><br><br><span class="hljs-comment"># 锁定数据库myisam(温备)</span><br><span class="hljs-comment"># -lock-tables     :锁定单个库的所有表</span><br><span class="hljs-comment"># -lock-all-tables :锁定所有的库的所有表</span><br><br><br><span class="hljs-comment">##二进制恢复</span><br><br><span class="hljs-comment">#把二进制日志导出成sql文件 </span><br>mysqlbinlog --start-position xxx(记录的日志位置数字) /var/lib/mysql/binlog.00001 &gt; back.sql<br><br><span class="hljs-comment">#把二进制恢复的sql文件导入数据库</span><br>mysql -uroot -p &lt; back.sql<br></code></pre></td></tr></table></figure><h2 id="主从配置"><a href="#主从配置" class="headerlink" title="主从配置"></a>主从配置</h2><p>主节点</p><ul><li>启用二进制日志<ul><li>修改 /etc/my.cnf , 添加: log-bin=binlog</li></ul></li><li>为当前节点设置一个全局唯一的ID 号<ul><li>修改 /etc/my.cnf , 添加 server-id=xx(全局唯一)</li></ul></li><li>创建有复制权限的用户账号<ul><li>REPLICATION SLAVE, REPLICATION CLIENT</li><li>GRANT REPLICATION SLAVE, REPLICATION CLIENT CLIENT ON <em>.</em> TO ‘USERNMAE’@’HOST’ IDENTIFIED BY ‘USERPASSWD’</li></ul></li></ul><p>从节点</p><ul><li><p>启用中继日志</p><ul><li>修改 /etc/my.cnf , 添加 reploy-log=reploy-log(日志名)</li></ul></li><li><p>为当前节点设置一个全局唯一的ID号</p><ul><li>修改 /etc/my.cnf , 添加 server-id=xx(全局唯一)</li></ul></li><li><p>启用二进制日志(根据需要开启)</p><ul><li>修改 /etc/my.cnf , 添加: log-bin=binlog\</li></ul></li><li><p>使用有复制权限的用户账号链接至主服务器,并启动复制线程</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">#查看&quot;change master to&quot; 命令帮助</span><br><span class="hljs-built_in">help</span> change master to;<br><span class="hljs-comment">#链接至主服务器, 需要注意两点,MASTER_LOG_FILE 同步的二进制文件 , MASTER_LOG_POS 节点</span><br>change master to MASTER_HOST=<span class="hljs-string">&#x27;192.168.196.129&#x27;</span>,MASTER_USER=<span class="hljs-string">&#x27;root&#x27;</span>,MASTER_PASSWORD=<span class="hljs-string">&#x27;9Tong@123&#x27;</span>,MASTER_LOG_FILE=<span class="hljs-string">&#x27;binlog.000002&#x27;</span>,MASTER_LOG_POS=154;<br><span class="hljs-comment">#查看从节点状态</span><br>show slave status\G<br><span class="hljs-comment">#启动复制线程</span><br>start slave;<br></code></pre></td></tr></table></figure><p>复制架构中应该注意的问题</p></li><li><p>限制从服务器为读</p><ul><li>查看读状态 mysql&gt; show global variables like ‘%read_only%’;</li><li>修改 /etc/my.cnf , 添加: read_only=ON , 此限制对拥有 SUPER 权限的用户均无效</li><li>组织所有用户<ul><li>mysql&gt; flush tables with read lock;   适用于当前启动环境</li></ul></li></ul></li><li><p>如何保证主从复制的事务安全</p><ul><li>在master节点上面启动参数:<ul><li>sync_binlog=ON  : <code>当遇到事务提交时,立即将binlog缓冲区中记录下来的事件刷写到磁盘中的二进制日志文件中, 从而通知从节点</code></li><li>innodb引擎开启<ul><li>innodb_flush_logs_at_trx_commit=ON : <code>当遇到事务提交时, 立即将事务日志内存缓冲区的与事务相关的数据 刷写到磁盘中的事务日志中</code></li><li>innodb_support_xa=ON : <code>让innodb 支持分布式提交 基于这个实现两段式提交 默认开启</code></li></ul></li></ul></li><li>在从节点(slave)<ul><li>skip_slave_start=ON  :开机是否启动同步服务 建议不开启 </li></ul></li><li>中继日志参数<ul><li>master节点<ul><li>sync_master_info</li></ul></li><li>slave节点<ul><li>sync_relay_log</li><li>sync_relay_log_info</li></ul></li></ul></li><li>一些重要文件<ul><li>/var/lib/mysql/{master.info,relay_log,info}</li><li>master.info 主服务链接参数和同步参数,  relay_log,info 中继日志同步参数</li></ul></li></ul></li></ul><h2 id="主主复制"><a href="#主主复制" class="headerlink" title="主主复制"></a>主主复制</h2><ul><li><p>互为主从</p><ul><li>数据不一致 不建议用</li></ul><h2 id="复制过滤器"><a href="#复制过滤器" class="headerlink" title="复制过滤器"></a>复制过滤器</h2><p>让从节点仅指定的数据库或指定数据库的指定表</p></li><li></li></ul>]]></content>
      
      
      <categories>
          
          <category> mysql </category>
          
      </categories>
      
      
        <tags>
            
            <tag> mysql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ingress websocket 400问题</title>
      <link href="2022/03/15/ingress%20websocket%20400%E9%97%AE%E9%A2%98/"/>
      <url>2022/03/15/ingress%20websocket%20400%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<p>原yaml文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs bash">---<br>apiVersion: networking.k8s.io/v1<br>kind: Ingress<br>metadata:<br>  name: uat-zeus-merchant<br>  namespace: hqp-uat<br>  resourceVersion: <span class="hljs-string">&#x27;34077785&#x27;</span><br>spec:<br>  ingressClassName: nginx<br>  rules:<br>    - host: uat-zeus-merchant.haoqipei.com<br>      http:<br>        paths:<br>          - backend:<br>              service:<br>                name: zeus-merchant<br>                port:<br>                  number: 7101<br>            path: /<br>            pathType: Prefix<br></code></pre></td></tr></table></figure><p>修改后的yaml文件<br>怎加了 annotations </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs bash">---<br>apiVersion: networking.k8s.io/v1<br>kind: Ingress<br>metadata:<br>  annotations:<br>    nginx.ingress.kubernetes.io/configuration-snippet: |<br>      proxy_set_header Upgrade <span class="hljs-variable">$http_upgrade</span>;<br>      proxy_set_header Connection <span class="hljs-string">&quot;upgrade&quot;</span>;<br>    nginx.org/websocket-services: zeus-merchant<br>  name: uat-zeus-merchant<br>  namespace: hqp-uat<br>  resourceVersion: <span class="hljs-string">&#x27;34077785&#x27;</span><br>spec:<br>  ingressClassName: nginx<br>  rules:<br>    - host: uat-zeus-merchant.haoqipei.com<br>      http:<br>        paths:<br>          - backend:<br>              service:<br>                name: zeus-merchant<br>                port:<br>                  number: 7101<br>            path: /<br>            pathType: Prefix<br></code></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> ingress </category>
          
      </categories>
      
      
        <tags>
            
            <tag> k8s </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
